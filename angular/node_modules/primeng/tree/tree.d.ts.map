{"version":3,"file":"tree.d.ts","sources":["tree.d.ts"],"names":[],"mappingssourcesContent":["import { AfterContentInit, OnDestroy, EventEmitter, OnInit, OnChanges, QueryList, TemplateRef, ElementRef, SimpleChanges } from '@angular/core';\nimport { CdkVirtualScrollViewport } from '@angular/cdk/scrolling';\nimport { PrimeNGConfig, TreeNode } from 'primeng/api';\nimport { TreeDragDropService } from 'primeng/api';\nimport { Subscription } from 'rxjs';\nimport { BlockableUI } from 'primeng/api';\nexport declare class UITreeNode implements OnInit {\n    static ICON_CLASS: string;\n    rowNode: any;\n    node: TreeNode;\n    parentNode: TreeNode;\n    root: boolean;\n    index: number;\n    firstChild: boolean;\n    lastChild: boolean;\n    level: number;\n    indentation: number;\n    tree: Tree;\n    constructor(tree: any);\n    draghoverPrev: boolean;\n    draghoverNext: boolean;\n    draghoverNode: boolean;\n    ngOnInit(): void;\n    getIcon(): string;\n    isLeaf(): boolean;\n    toggle(event: Event): void;\n    expand(event: Event): void;\n    collapse(event: Event): void;\n    onNodeClick(event: MouseEvent): void;\n    onNodeKeydown(event: KeyboardEvent): void;\n    onNodeTouchEnd(): void;\n    onNodeRightClick(event: MouseEvent): void;\n    isSelected(): boolean;\n    onDropPoint(event: Event, position: number): void;\n    processPointDrop(event: any): void;\n    createDropPointEventMetadata(position: any): {\n        dragNode: TreeNode<any>;\n        dragNodeIndex: number;\n        dragNodeSubNodes: TreeNode<any>[];\n        dropNode: TreeNode<any>;\n        index: number;\n        position: any;\n    };\n    onDropPointDragOver(event: any): void;\n    onDropPointDragEnter(event: Event, position: number): void;\n    onDropPointDragLeave(event: Event): void;\n    onDragStart(event: any): void;\n    onDragStop(event: any): void;\n    onDropNodeDragOver(event: any): void;\n    onDropNode(event: any): void;\n    createDropNodeEventMetadata(): {\n        dragNode: TreeNode<any>;\n        dragNodeIndex: number;\n        dragNodeSubNodes: TreeNode<any>[];\n        dropNode: TreeNode<any>;\n    };\n    processNodeDrop(event: any): void;\n    onDropNodeDragEnter(event: any): void;\n    onDropNodeDragLeave(event: any): void;\n    onKeyDown(event: KeyboardEvent): void;\n    findNextSiblingOfAncestor(nodeElement: any): any;\n    findLastVisibleDescendant(nodeElement: any): any;\n    getParentNodeElement(nodeElement: any): any;\n    focusNode(element: any): void;\n}\nexport declare class Tree implements OnInit, AfterContentInit, OnChanges, OnDestroy, BlockableUI {\n    el: ElementRef;\n    dragDropService: TreeDragDropService;\n    config: PrimeNGConfig;\n    value: TreeNode[];\n    selectionMode: string;\n    selection: any;\n    selectionChange: EventEmitter<any>;\n    onNodeSelect: EventEmitter<any>;\n    onNodeUnselect: EventEmitter<any>;\n    onNodeExpand: EventEmitter<any>;\n    onNodeCollapse: EventEmitter<any>;\n    onNodeContextMenuSelect: EventEmitter<any>;\n    onNodeDrop: EventEmitter<any>;\n    style: any;\n    styleClass: string;\n    contextMenu: any;\n    layout: string;\n    draggableScope: any;\n    droppableScope: any;\n    draggableNodes: boolean;\n    droppableNodes: boolean;\n    metaKeySelection: boolean;\n    propagateSelectionUp: boolean;\n    propagateSelectionDown: boolean;\n    loading: boolean;\n    loadingIcon: string;\n    emptyMessage: string;\n    ariaLabel: string;\n    ariaLabelledBy: string;\n    validateDrop: boolean;\n    filter: boolean;\n    filterBy: string;\n    filterMode: string;\n    filterPlaceholder: string;\n    filterLocale: string;\n    scrollHeight: string;\n    virtualScroll: boolean;\n    virtualNodeHeight: string;\n    minBufferPx: number;\n    maxBufferPx: number;\n    indentation: number;\n    trackBy: Function;\n    onFilter: EventEmitter<any>;\n    templates: QueryList<any>;\n    virtualScrollBody: CdkVirtualScrollViewport;\n    filterViewChild: ElementRef;\n    serializedValue: any[];\n    headerTemplate: TemplateRef<any>;\n    footerTemplate: TemplateRef<any>;\n    emptyMessageTemplate: TemplateRef<any>;\n    templateMap: any;\n    nodeTouched: boolean;\n    dragNodeTree: Tree;\n    dragNode: TreeNode;\n    dragNodeSubNodes: TreeNode[];\n    dragNodeIndex: number;\n    dragNodeScope: any;\n    dragHover: boolean;\n    dragStartSubscription: Subscription;\n    dragStopSubscription: Subscription;\n    filteredNodes: TreeNode[];\n    constructor(el: ElementRef, dragDropService: TreeDragDropService, config: PrimeNGConfig);\n    ngOnInit(): void;\n    ngOnChanges(simpleChange: SimpleChanges): void;\n    get horizontal(): boolean;\n    get emptyMessageLabel(): string;\n    ngAfterContentInit(): void;\n    updateSerializedValue(): void;\n    serializeNodes(parent: any, nodes: any, level: any, visible: any): void;\n    onNodeClick(event: any, node: TreeNode): void;\n    onNodeTouchEnd(): void;\n    onNodeRightClick(event: MouseEvent, node: TreeNode): void;\n    findIndexInSelection(node: TreeNode): number;\n    syncNodeOption(node: any, parentNodes: any, option: any, value?: any): void;\n    hasFilteredNodes(): number;\n    getNodeWithKey(key: string, nodes: TreeNode[]): any;\n    propagateUp(node: TreeNode, select: boolean): void;\n    propagateDown(node: TreeNode, select: boolean): void;\n    isSelected(node: TreeNode): boolean;\n    isSingleSelectionMode(): boolean;\n    isMultipleSelectionMode(): boolean;\n    isCheckboxSelectionMode(): boolean;\n    isNodeLeaf(node: any): boolean;\n    getRootNode(): TreeNode<any>[];\n    getTemplateForNode(node: TreeNode): TemplateRef<any>;\n    onDragOver(event: any): void;\n    onDrop(event: any): void;\n    processTreeDrop(dragNode: any, dragNodeIndex: any): void;\n    onDragEnter(): void;\n    onDragLeave(event: any): void;\n    allowDrop(dragNode: TreeNode, dropNode: TreeNode, dragNodeScope: any): boolean;\n    isValidDragScope(dragScope: any): boolean;\n    _filter(value: any): void;\n    resetFilter(): void;\n    findFilteredNodes(node: any, paramsWithoutNode: any): boolean;\n    isFilterMatched(node: any, { searchFields, filterText, isStrictMode }: {\n        searchFields: any;\n        filterText: any;\n        isStrictMode: any;\n    }): boolean;\n    getBlockableElement(): HTMLElement;\n    ngOnDestroy(): void;\n}\nexport declare class TreeModule {\n}\n"]}