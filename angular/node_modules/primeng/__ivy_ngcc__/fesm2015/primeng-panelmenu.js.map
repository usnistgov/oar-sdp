{"version":3,"file":"primeng-panelmenu.js","sources":["../../src/app/components/panelmenu/panelmenu.ts","../../src/app/components/panelmenu/primeng-panelmenu.ts"],"names":[],"mappings":"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","sourcesContent":["import {NgModule,Component,Input,ChangeDetectorRef,ChangeDetectionStrategy, ViewEncapsulation} from '@angular/core';\nimport {trigger,state,style,transition,animate} from '@angular/animations';\nimport {CommonModule} from '@angular/common';\nimport {MenuItem} from 'primeng/api';\nimport {RouterModule} from '@angular/router';\n\nexport class BasePanelMenuItem {\n\n    constructor(private ref: ChangeDetectorRef) {}\n        \n    handleClick(event, item) {\n        if (item.disabled) {\n            event.preventDefault();\n            return;\n        }\n        \n        item.expanded = !item.expanded;\n        this.ref.detectChanges();\n        \n        if (!item.url) {\n            event.preventDefault();\n        }\n                   \n        if (item.command) {\n            item.command({\n                originalEvent: event,\n                item: item\n            });\n        }\n    }\n}\n\n@Component({\n    selector: 'p-panelMenuSub',\n    template: `\n        <ul [ngClass]=\"{'p-submenu-list': true, 'p-panelmenu-root-submenu': root}\" [@submenu]=\"expanded ? {value: 'visible', params: {transitionParams: transitionOptions, height: '*'}} : {value: 'hidden', params: {transitionParams: transitionOptions, height: '0'}}\" role=\"tree\">\n            <ng-template ngFor let-child [ngForOf]=\"item.items\">\n                <li *ngIf=\"child.separator\" class=\"p-menu-separator\" role=\"separator\">\n                <li *ngIf=\"!child.separator\" class=\"p-menuitem\" [ngClass]=\"child.styleClass\" [class.p-hidden]=\"child.visible === false\" [ngStyle]=\"child.style\">\n                    <a *ngIf=\"!child.routerLink\" [attr.href]=\"child.url\" class=\"p-menuitem-link\" [attr.tabindex]=\"!item.expanded ? null : child.disabled ? null : '0'\" [attr.id]=\"child.id\"\n                        [ngClass]=\"{'p-disabled':child.disabled}\" role=\"treeitem\" [attr.aria-expanded]=\"child.expanded\"\n                        (click)=\"handleClick($event,child)\" [attr.target]=\"child.target\" [attr.title]=\"child.title\">\n                        <span class=\"p-panelmenu-icon pi pi-fw\" [ngClass]=\"{'pi-angle-right':!child.expanded,'pi-angle-down':child.expanded}\" *ngIf=\"child.items\"></span>\n                        <span class=\"p-menuitem-icon\" [ngClass]=\"child.icon\" *ngIf=\"child.icon\"></span>\n                        <span class=\"p-menuitem-text\" *ngIf=\"child.escape !== false; else htmlLabel\">{{child.label}}</span>\n                        <ng-template #htmlLabel><span class=\"p-menuitem-text\" [innerHTML]=\"child.label\"></span></ng-template>\n                    </a>\n                    <a *ngIf=\"child.routerLink\" [routerLink]=\"child.routerLink\" [queryParams]=\"child.queryParams\" [routerLinkActive]=\"'p-menuitem-link-active'\" [routerLinkActiveOptions]=\"child.routerLinkActiveOptions||{exact:false}\" class=\"p-menuitem-link\" \n                        [ngClass]=\"{'p-disabled':child.disabled}\" [attr.tabindex]=\"!item.expanded ? null : child.disabled ? null : '0'\" [attr.id]=\"child.id\" role=\"treeitem\" [attr.aria-expanded]=\"child.expanded\"\n                        (click)=\"handleClick($event,child)\" [attr.target]=\"child.target\" [attr.title]=\"child.title\"\n                        [fragment]=\"child.fragment\" [queryParamsHandling]=\"child.queryParamsHandling\" [preserveFragment]=\"child.preserveFragment\" [skipLocationChange]=\"child.skipLocationChange\" [replaceUrl]=\"child.replaceUrl\" [state]=\"child.state\">\n                        <span class=\"p-panelmenu-icon pi pi-fw\" [ngClass]=\"{'pi-angle-right':!child.expanded,'pi-angle-down':child.expanded}\" *ngIf=\"child.items\"></span>\n                        <span class=\"p-menuitem-icon\" [ngClass]=\"child.icon\" *ngIf=\"child.icon\"></span>\n                        <span class=\"p-menuitem-text\" *ngIf=\"child.escape !== false; else htmlRouteLabel\">{{child.label}}</span>\n                        <ng-template #htmlRouteLabel><span class=\"p-menuitem-text\" [innerHTML]=\"child.label\"></span></ng-template>\n                    </a>\n                    <p-panelMenuSub [item]=\"child\" [expanded]=\"child.expanded\" [transitionOptions]=\"transitionOptions\" *ngIf=\"child.items\"></p-panelMenuSub>\n                </li>\n            </ng-template>\n        </ul>\n    `,\n    animations: [\n        trigger('submenu', [\n            state('hidden', style({\n                height: '0',\n                overflow: 'hidden'\n            })),\n            state('visible', style({\n                height: '*'\n            })),\n            transition('visible <=> hidden', [style({overflow: 'hidden'}), animate('{{transitionParams}}')]),\n            transition('void => *', animate(0))\n        ])\n    ],\n    encapsulation: ViewEncapsulation.None\n})\nexport class PanelMenuSub extends BasePanelMenuItem {\n    \n    @Input() item: MenuItem;\n    \n    @Input() expanded: boolean;\n\n    @Input() transitionOptions: string;\n\n    @Input() root: boolean;\n\n    constructor(ref: ChangeDetectorRef) {\n        super(ref);\n    }\n}\n\n@Component({\n    selector: 'p-panelMenu',\n    template: `\n        <div [class]=\"styleClass\" [ngStyle]=\"style\" [ngClass]=\"'p-panelmenu p-component'\">\n            <ng-container *ngFor=\"let item of model;let f=first;let l=last;\">\n                <div class=\"p-panelmenu-panel\" [ngClass]=\"{'p-hidden': item.visible === false}\">\n                    <div [ngClass]=\"{'p-component p-panelmenu-header':true, 'p-highlight':item.expanded,'p-disabled':item.disabled}\" [class]=\"item.styleClass\" [ngStyle]=\"item.style\">\n                        <a *ngIf=\"!item.routerLink\" [attr.href]=\"item.url\" (click)=\"handleClick($event,item)\" [attr.tabindex]=\"item.disabled ? null : '0'\" [attr.id]=\"item.id\"\n                           [attr.target]=\"item.target\" [attr.title]=\"item.title\" class=\"p-panelmenu-header-link\" [attr.aria-expanded]=\"item.expanded\" [attr.id]=\"item.id + '_header'\" [attr.aria-controls]=\"item.id +'_content'\">\n                            <span *ngIf=\"item.items\" class=\"p-panelmenu-icon pi\" [ngClass]=\"{'pi-chevron-right':!item.expanded,'pi-chevron-down':item.expanded}\"></span>\n                            <span class=\"p-menuitem-icon\" [ngClass]=\"item.icon\" *ngIf=\"item.icon\"></span>\n                            <span class=\"p-menuitem-text\" *ngIf=\"item.escape !== false; else htmlLabel\">{{item.label}}</span>\n                            <ng-template #htmlLabel><span class=\"p-menuitem-text\" [innerHTML]=\"item.label\"></span></ng-template>\n                        </a>\n                        <a *ngIf=\"item.routerLink\" [routerLink]=\"item.routerLink\" [queryParams]=\"item.queryParams\" [routerLinkActive]=\"'p-menuitem-link-active'\" [routerLinkActiveOptions]=\"item.routerLinkActiveOptions||{exact:false}\"\n                           (click)=\"handleClick($event,item)\" [attr.target]=\"item.target\" [attr.title]=\"item.title\" class=\"p-panelmenu-header-link\" [attr.id]=\"item.id\" [attr.tabindex]=\"item.disabled ? null : '0'\"\n                           [fragment]=\"item.fragment\" [queryParamsHandling]=\"item.queryParamsHandling\" [preserveFragment]=\"item.preserveFragment\" [skipLocationChange]=\"item.skipLocationChange\" [replaceUrl]=\"item.replaceUrl\" [state]=\"item.state\">\n                            <span *ngIf=\"item.items\" class=\"p-panelmenu-icon pi\" [ngClass]=\"{'pi-chevron-right':!item.expanded,'pi-chevron-down':item.expanded}\"></span>\n                            <span class=\"p-menuitem-icon\" [ngClass]=\"item.icon\" *ngIf=\"item.icon\"></span>\n                            <span class=\"p-menuitem-text\" *ngIf=\"item.escape !== false; else htmlRouteLabel\">{{item.label}}</span>\n                            <ng-template #htmlRouteLabel><span class=\"p-menuitem-text\" [innerHTML]=\"item.label\"></span></ng-template>\n                        </a>\n                    </div>\n                    <div *ngIf=\"item.items\" class=\"p-toggleable-content\" [@rootItem]=\"item.expanded ? {value: 'visible', params: {transitionParams: animating ? transitionOptions : '0ms', height: '*'}} : {value: 'hidden', params: {transitionParams: transitionOptions, height: '0'}}\"  (@rootItem.done)=\"onToggleDone()\">\n                        <div class=\"p-panelmenu-content\" role=\"region\" [attr.id]=\"item.id +'_content' \" [attr.aria-labelledby]=\"item.id +'_header'\">\n                            <p-panelMenuSub [item]=\"item\" [expanded]=\"true\" [transitionOptions]=\"transitionOptions\" [root]=\"true\"></p-panelMenuSub>\n                        </div>\n                    </div>\n                </div>\n            </ng-container>\n        </div>\n    `,\n    animations: [\n        trigger('rootItem', [\n            state('hidden', style({\n                height: '0',\n                overflow: 'hidden'\n            })),\n            state('visible', style({\n                height: '*'\n            })),\n            transition('visible <=> hidden', [style({overflow: 'hidden'}), animate('{{transitionParams}}')]),\n            transition('void => *', animate(0))\n        ])\n    ],\n   changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['./panelmenu.css']\n})\nexport class PanelMenu extends BasePanelMenuItem {\n    \n    @Input() model: MenuItem[];\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() multiple: boolean = true;\n\n    @Input() transitionOptions: string = '400ms cubic-bezier(0.86, 0, 0.07, 1)';\n    \n    public animating: boolean;\n\n    constructor(ref: ChangeDetectorRef) {\n        super(ref);\n    }\n                \n    collapseAll() {\n    \tfor(let item of this.model) {\n    \t\tif (item.expanded) {\n    \t\t\titem.expanded = false;\n    \t\t}\n    \t}\n    }\n\n    handleClick(event, item) {\n    \tif (!this.multiple) {\n            for(let modelItem of this.model) {\n        \t\tif (item !== modelItem && modelItem.expanded) {\n        \t\t\tmodelItem.expanded = false;\n        \t\t}\n        \t}\n    \t}\n        \n        this.animating = true;\n        super.handleClick(event, item);\n    }\n    \n    onToggleDone() {\n        this.animating = false;\n    }\n\n}\n\n@NgModule({\n    imports: [CommonModule,RouterModule],\n    exports: [PanelMenu,RouterModule],\n    declarations: [PanelMenu,PanelMenuSub]\n})\nexport class PanelMenuModule { }\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"]}