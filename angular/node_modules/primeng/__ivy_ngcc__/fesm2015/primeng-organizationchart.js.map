{"version":3,"file":"primeng-organizationchart.js","sources":["../../src/app/components/organizationchart/organizationchart.ts","../../src/app/components/organizationchart/primeng-organizationchart.ts"],"names":[],"mappings":"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","sourcesContent":["import {NgModule,Component,ElementRef,Input,Output,AfterContentInit,EventEmitter,TemplateRef,\n        Inject,forwardRef,ContentChildren,QueryList,ChangeDetectionStrategy, ViewEncapsulation, ChangeDetectorRef, OnDestroy} from '@angular/core';\nimport {trigger,state,style,transition,animate} from '@angular/animations';\nimport {CommonModule} from '@angular/common';\nimport {SharedModule} from 'primeng/api';\nimport {TreeNode} from 'primeng/api';\nimport {PrimeTemplate} from 'primeng/api';\nimport { Subject, Subscription } from 'rxjs';\n\n@Component({\n    selector: '[pOrganizationChartNode]',\n    template: `\n        <tbody *ngIf=\"node\">\n            <tr>\n                <td [attr.colspan]=\"colspan\">\n                    <div [class]=\"node.styleClass\" [ngClass]=\"{'p-organizationchart-node-content': true, 'p-organizationchart-selectable-node': chart.selectionMode && node.selectable !== false,'p-highlight':isSelected()}\"\n                        (click)=\"onNodeClick($event,node)\">\n                        <div *ngIf=\"!chart.getTemplateForNode(node)\">{{node.label}}</div>\n                        <div *ngIf=\"chart.getTemplateForNode(node)\">\n                            <ng-container *ngTemplateOutlet=\"chart.getTemplateForNode(node); context: {$implicit: node}\"></ng-container>\n                        </div>\n                        <a *ngIf=\"!leaf\" tabindex=\"0\" class=\"p-node-toggler\" (click)=\"toggleNode($event, node)\" (keydown.enter)=\"toggleNode($event, node)\">\n                            <i class=\"p-node-toggler-icon pi\" [ngClass]=\"{'pi-chevron-down': node.expanded, 'pi-chevron-up': !node.expanded}\"></i>\n                        </a>\n                    </div>\n                </td>\n            </tr>\n            <tr [ngClass]=\"!leaf&&node.expanded ? 'p-organizationchart-node-visible' : 'p-organizationchart-node-hidden'\" class=\"p-organizationchart-lines\" [@childState]=\"'in'\">\n                <td [attr.colspan]=\"colspan\">\n                    <div class=\"p-organizationchart-line-down\"></div>\n                </td>\n            </tr>\n            <tr [ngClass]=\"!leaf&&node.expanded ? 'p-organizationchart-node-visible' : 'p-organizationchart-node-hidden'\" class=\"p-organizationchart-lines\" [@childState]=\"'in'\">\n                <ng-container *ngIf=\"node.children && node.children.length === 1\">\n                    <td [attr.colspan]=\"colspan\">\n                        <div class=\"p-organizationchart-line-down\"></div>\n                    </td>\n                </ng-container>\n                <ng-container *ngIf=\"node.children && node.children.length > 1\">\n                    <ng-template ngFor let-child [ngForOf]=\"node.children\" let-first=\"first\" let-last=\"last\">\n                        <td class=\"p-organizationchart-line-left\" [ngClass]=\"{'p-organizationchart-line-top':!first}\">&nbsp;</td>\n                        <td class=\"p-organizationchart-line-right\" [ngClass]=\"{'p-organizationchart-line-top':!last}\">&nbsp;</td>\n                    </ng-template>\n                </ng-container>\n            </tr>\n            <tr [ngClass]=\"!leaf&&node.expanded ? 'p-organizationchart-node-visible' : 'p-organizationchart-node-hidden'\" class=\"p-organizationchart-nodes\" [@childState]=\"'in'\">\n                <td *ngFor=\"let child of node.children\" colspan=\"2\">\n                    <table class=\"p-organizationchart-table\" pOrganizationChartNode [node]=\"child\"></table>\n                </td>\n            </tr>\n        </tbody>\n    `,\n    animations: [\n        trigger('childState', [\n            state('in', style({opacity: 1})),\n           transition('void => *', [\n             style({opacity: 0}),\n             animate(150)\n           ]),\n           transition('* => void', [\n             animate(150, style({opacity:0}))\n           ])\n        ])\n    ],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    styleUrls: ['./organizationchart.css']\n})\nexport class OrganizationChartNode implements OnDestroy{\n\n    @Input() node: TreeNode;\n        \n    @Input() root: boolean;\n    \n    @Input() first: boolean;\n    \n    @Input() last: boolean;\n\n    chart: OrganizationChart;\n\n    subscription: Subscription;\n        \n    constructor(@Inject(forwardRef(() => OrganizationChart)) chart, public cd: ChangeDetectorRef) {\n        this.chart = chart as OrganizationChart;\n        this.subscription = this.chart.selectionSource$.subscribe(() =>{\n            this.cd.markForCheck();\n        })\n    }\n                \n    get leaf(): boolean {\n        return this.node.leaf == false ? false : !(this.node.children&&this.node.children.length);\n    }\n    \n    get colspan() {\n        return (this.node.children && this.node.children.length) ? this.node.children.length * 2: null;\n    }\n    \n    onNodeClick(event: Event, node: TreeNode) {\n        this.chart.onNodeClick(event, node)\n    }\n    \n    toggleNode(event: Event, node: TreeNode) {\n        node.expanded = !node.expanded;\n        if (node.expanded)\n            this.chart.onNodeExpand.emit({originalEvent: event, node: this.node});\n        else\n            this.chart.onNodeCollapse.emit({originalEvent: event, node: this.node});\n            \n        event.preventDefault();\n    }\n    \n    isSelected() {\n        return this.chart.isSelected(this.node);\n    }\n\n    ngOnDestroy() {\n        this.subscription.unsubscribe();\n    }\n}\n\n@Component({\n    selector: 'p-organizationChart',\n    template: `\n        <div [ngStyle]=\"style\" [class]=\"styleClass\" [ngClass]=\"{'p-organizationchart p-component': true, 'p-organizationchart-preservespace': preserveSpace}\">\n            <table class=\"p-organizationchart-table\" pOrganizationChartNode [node]=\"root\" *ngIf=\"root\"></table>\n        </div>\n    `,\n   changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class OrganizationChart implements AfterContentInit {\n            \n    @Input() value: TreeNode[];            \n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n    \n    @Input() selectionMode: string;\n    \n    @Input() preserveSpace: boolean = true;\n    \n    @Input()  get selection(): any {\n        return this._selection;\n    }\n\n    set selection(val:any) {\n        this._selection = val;\n        \n        if (this.initialized)\n            this.selectionSource.next();\n    }\n\n    @Output() selectionChange: EventEmitter<any> = new EventEmitter();\n    \n    @Output() onNodeSelect: EventEmitter<any> = new EventEmitter();\n    \n    @Output() onNodeUnselect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeExpand: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeCollapse: EventEmitter<any> = new EventEmitter();\n    \n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\n    \n    public templateMap: any;\n\n    private selectionSource = new Subject<any>();\n\n    _selection: any;\n\n    initialized: boolean;\n\n    selectionSource$ = this.selectionSource.asObservable();\n    \n    constructor(public el: ElementRef, public cd:ChangeDetectorRef) {}\n    \n    get root(): TreeNode {\n        return this.value && this.value.length ? this.value[0] : null;\n    }\n    \n    ngAfterContentInit() {\n        if (this.templates.length) {\n            this.templateMap = {};\n        }\n        \n        this.templates.forEach((item) => {\n            this.templateMap[item.getType()] = item.template;\n        });\n\n        this.initialized = true;\n    }\n    \n    getTemplateForNode(node: TreeNode): TemplateRef<any> {\n        if (this.templateMap)\n            return node.type ? this.templateMap[node.type] : this.templateMap['default'];\n        else\n            return null;\n    }\n    \n    onNodeClick(event: Event, node: TreeNode) {\n        let eventTarget = (<Element> event.target);\n        \n        if (eventTarget.className && (eventTarget.className.indexOf('p-node-toggler') !== -1 || eventTarget.className.indexOf('p-node-toggler-icon') !== -1)) {\n            return;\n        }\n        else if (this.selectionMode) {\n            if (node.selectable === false) {\n                return;\n            }\n            \n            let index = this.findIndexInSelection(node);\n            let selected = (index >= 0);\n            \n            if (this.selectionMode === 'single') {\n                if (selected) {\n                    this.selection = null;\n                    this.onNodeUnselect.emit({originalEvent: event, node: node});\n                }\n                else {\n                    this.selection = node;\n                    this.onNodeSelect.emit({originalEvent: event, node: node});\n                }\n            }\n            else if (this.selectionMode === 'multiple') {\n                if (selected) {\n                    this.selection = this.selection.filter((val,i) => i!=index);\n                    this.onNodeUnselect.emit({originalEvent: event, node: node});\n                }\n                else {\n                    this.selection = [...this.selection||[],node];\n                    this.onNodeSelect.emit({originalEvent: event, node: node});\n                }\n            }\n            \n            this.selectionChange.emit(this.selection);\n            this.selectionSource.next();\n        }\n    }\n    \n    findIndexInSelection(node: TreeNode) {\n        let index: number = -1;\n\n        if (this.selectionMode && this.selection) {\n            if (this.selectionMode === 'single') {\n                index = (this.selection == node) ? 0 : - 1;\n            }\n            else if (this.selectionMode === 'multiple') {\n                for(let i = 0; i  < this.selection.length; i++) {\n                    if (this.selection[i] == node) {\n                        index = i;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return index;\n    }\n    \n    isSelected(node: TreeNode) {\n        return this.findIndexInSelection(node) != -1;         \n    }\n}\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [OrganizationChart,SharedModule],\n    declarations: [OrganizationChart,OrganizationChartNode]\n})\nexport class OrganizationChartModule { }","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"]}