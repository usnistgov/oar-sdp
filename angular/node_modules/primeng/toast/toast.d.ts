import { OnInit, AfterViewInit, AfterContentInit, OnDestroy, ElementRef, EventEmitter, QueryList, TemplateRef, NgZone, ChangeDetectorRef } from '@angular/core';
import { Message, PrimeNGConfig } from 'primeng/api';
import { MessageService } from 'primeng/api';
import { Subscription } from 'rxjs';
import { AnimationEvent } from '@angular/animations';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "primeng/ripple";
import * as i3 from "primeng/api";
export declare class ToastItem implements AfterViewInit, OnDestroy {
    private zone;
    message: Message;
    index: number;
    template: TemplateRef<any>;
    showTransformOptions: string;
    hideTransformOptions: string;
    showTransitionOptions: string;
    hideTransitionOptions: string;
    onClose: EventEmitter<any>;
    containerViewChild: ElementRef;
    timeout: any;
    constructor(zone: NgZone);
    ngAfterViewInit(): void;
    initTimeout(): void;
    clearTimeout(): void;
    onMouseEnter(): void;
    onMouseLeave(): void;
    onCloseIconClick(event: any): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ToastItem, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ToastItem, "p-toastItem", never, { "message": "message"; "index": "index"; "template": "template"; "showTransformOptions": "showTransformOptions"; "hideTransformOptions": "hideTransformOptions"; "showTransitionOptions": "showTransitionOptions"; "hideTransitionOptions": "hideTransitionOptions"; }, { "onClose": "onClose"; }, never, never>;
}
export declare class Toast implements OnInit, AfterContentInit, OnDestroy {
    messageService: MessageService;
    private cd;
    config: PrimeNGConfig;
    key: string;
    autoZIndex: boolean;
    baseZIndex: number;
    style: any;
    styleClass: string;
    position: string;
    preventOpenDuplicates: boolean;
    preventDuplicates: boolean;
    showTransformOptions: string;
    hideTransformOptions: string;
    showTransitionOptions: string;
    hideTransitionOptions: string;
    breakpoints: any;
    onClose: EventEmitter<any>;
    containerViewChild: ElementRef;
    templates: QueryList<any>;
    messageSubscription: Subscription;
    clearSubscription: Subscription;
    messages: Message[];
    messagesArchieve: Message[];
    template: TemplateRef<any>;
    constructor(messageService: MessageService, cd: ChangeDetectorRef, config: PrimeNGConfig);
    styleElement: any;
    id: string;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    add(messages: Message[]): void;
    canAdd(message: Message): boolean;
    containsMessage(collection: Message[], message: Message): boolean;
    ngAfterContentInit(): void;
    onMessageClose(event: any): void;
    onAnimationStart(event: AnimationEvent): void;
    onAnimationEnd(event: AnimationEvent): void;
    createStyle(): void;
    destroyStyle(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<Toast, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<Toast, "p-toast", never, { "key": "key"; "autoZIndex": "autoZIndex"; "baseZIndex": "baseZIndex"; "style": "style"; "styleClass": "styleClass"; "position": "position"; "preventOpenDuplicates": "preventOpenDuplicates"; "preventDuplicates": "preventDuplicates"; "showTransformOptions": "showTransformOptions"; "hideTransformOptions": "hideTransformOptions"; "showTransitionOptions": "showTransitionOptions"; "hideTransitionOptions": "hideTransitionOptions"; "breakpoints": "breakpoints"; }, { "onClose": "onClose"; }, ["templates"], never>;
}
export declare class ToastModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<ToastModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<ToastModule, [typeof Toast, typeof ToastItem], [typeof i1.CommonModule, typeof i2.RippleModule], [typeof Toast, typeof i3.SharedModule]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<ToastModule>;
}
