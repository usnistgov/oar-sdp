import { ElementRef, OnInit, OnDestroy, EventEmitter } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from 'primeng/inputtext';
export declare const INPUTMASK_VALUE_ACCESSOR: any;
export declare class InputMask implements OnInit, OnDestroy, ControlValueAccessor {
    el: ElementRef;
    type: string;
    slotChar: string;
    autoClear: boolean;
    style: any;
    inputId: string;
    styleClass: string;
    placeholder: string;
    size: number;
    maxlength: number;
    tabindex: string;
    title: string;
    ariaLabel: string;
    ariaRequired: boolean;
    disabled: boolean;
    readonly: boolean;
    unmask: boolean;
    name: string;
    required: boolean;
    characterPattern: string;
    autoFocus: boolean;
    autocomplete: string;
    inputViewChild: ElementRef;
    onComplete: EventEmitter<any>;
    onFocus: EventEmitter<any>;
    onBlur: EventEmitter<any>;
    onInput: EventEmitter<any>;
    value: any;
    _mask: string;
    onModelChange: Function;
    onModelTouched: Function;
    input: HTMLInputElement;
    filled: boolean;
    defs: any;
    tests: any[];
    partialPosition: any;
    firstNonMaskPos: number;
    lastRequiredNonMaskPos: any;
    len: number;
    oldVal: string;
    buffer: any;
    defaultBuffer: string;
    focusText: string;
    caretTimeoutId: any;
    androidChrome: boolean;
    focused: boolean;
    constructor(el: ElementRef);
    ngOnInit(): void;
    mask: string;
    initMask(): void;
    writeValue(value: any): void;
    registerOnChange(fn: Function): void;
    registerOnTouched(fn: Function): void;
    setDisabledState(val: boolean): void;
    caret(first?: number, last?: number): {
        begin: any;
        end: any;
    };
    isCompleted(): boolean;
    getPlaceholder(i: number): string;
    seekNext(pos: any): any;
    seekPrev(pos: any): any;
    shiftL(begin: number, end: number): void;
    shiftR(pos: any): void;
    handleAndroidInput(e: any): void;
    onInputBlur(e: any): void;
    onKeyDown(e: any): void;
    onKeyPress(e: any): void;
    clearBuffer(start: any, end: any): void;
    writeBuffer(): void;
    checkVal(allow?: boolean): any;
    onInputFocus(event: any): void;
    onInputChange(event: any): void;
    handleInputChange(event: any): void;
    getUnmaskedValue(): string;
    updateModel(e: any): void;
    updateFilledState(): void;
    focus(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<InputMask, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<InputMask, "p-inputMask", never, { "type": "type"; "slotChar": "slotChar"; "autoClear": "autoClear"; "characterPattern": "characterPattern"; "mask": "mask"; "disabled": "disabled"; "style": "style"; "inputId": "inputId"; "styleClass": "styleClass"; "placeholder": "placeholder"; "size": "size"; "maxlength": "maxlength"; "tabindex": "tabindex"; "title": "title"; "ariaLabel": "ariaLabel"; "ariaRequired": "ariaRequired"; "readonly": "readonly"; "unmask": "unmask"; "name": "name"; "required": "required"; "autoFocus": "autoFocus"; "autocomplete": "autocomplete"; }, { "onComplete": "onComplete"; "onFocus": "onFocus"; "onBlur": "onBlur"; "onInput": "onInput"; }, never, never>;
}
export declare class InputMaskModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<InputMaskModule, [typeof InputMask], [typeof ɵngcc1.CommonModule, typeof ɵngcc2.InputTextModule], [typeof InputMask]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<InputMaskModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXRtYXNrLmQudHMiLCJzb3VyY2VzIjpbImlucHV0bWFzay5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7OztBQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlGQTs7OztBQUVBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgT25Jbml0LCBPbkRlc3Ryb3ksIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5leHBvcnQgZGVjbGFyZSBjb25zdCBJTlBVVE1BU0tfVkFMVUVfQUNDRVNTT1I6IGFueTtcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIElucHV0TWFzayBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95LCBDb250cm9sVmFsdWVBY2Nlc3NvciB7XG4gICAgZWw6IEVsZW1lbnRSZWY7XG4gICAgdHlwZTogc3RyaW5nO1xuICAgIHNsb3RDaGFyOiBzdHJpbmc7XG4gICAgYXV0b0NsZWFyOiBib29sZWFuO1xuICAgIHN0eWxlOiBhbnk7XG4gICAgaW5wdXRJZDogc3RyaW5nO1xuICAgIHN0eWxlQ2xhc3M6IHN0cmluZztcbiAgICBwbGFjZWhvbGRlcjogc3RyaW5nO1xuICAgIHNpemU6IG51bWJlcjtcbiAgICBtYXhsZW5ndGg6IG51bWJlcjtcbiAgICB0YWJpbmRleDogc3RyaW5nO1xuICAgIHRpdGxlOiBzdHJpbmc7XG4gICAgYXJpYUxhYmVsOiBzdHJpbmc7XG4gICAgYXJpYVJlcXVpcmVkOiBib29sZWFuO1xuICAgIGRpc2FibGVkOiBib29sZWFuO1xuICAgIHJlYWRvbmx5OiBib29sZWFuO1xuICAgIHVubWFzazogYm9vbGVhbjtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgcmVxdWlyZWQ6IGJvb2xlYW47XG4gICAgY2hhcmFjdGVyUGF0dGVybjogc3RyaW5nO1xuICAgIGF1dG9Gb2N1czogYm9vbGVhbjtcbiAgICBhdXRvY29tcGxldGU6IHN0cmluZztcbiAgICBpbnB1dFZpZXdDaGlsZDogRWxlbWVudFJlZjtcbiAgICBvbkNvbXBsZXRlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvbkZvY3VzOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvbkJsdXI6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uSW5wdXQ6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIHZhbHVlOiBhbnk7XG4gICAgX21hc2s6IHN0cmluZztcbiAgICBvbk1vZGVsQ2hhbmdlOiBGdW5jdGlvbjtcbiAgICBvbk1vZGVsVG91Y2hlZDogRnVuY3Rpb247XG4gICAgaW5wdXQ6IEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgZmlsbGVkOiBib29sZWFuO1xuICAgIGRlZnM6IGFueTtcbiAgICB0ZXN0czogYW55W107XG4gICAgcGFydGlhbFBvc2l0aW9uOiBhbnk7XG4gICAgZmlyc3ROb25NYXNrUG9zOiBudW1iZXI7XG4gICAgbGFzdFJlcXVpcmVkTm9uTWFza1BvczogYW55O1xuICAgIGxlbjogbnVtYmVyO1xuICAgIG9sZFZhbDogc3RyaW5nO1xuICAgIGJ1ZmZlcjogYW55O1xuICAgIGRlZmF1bHRCdWZmZXI6IHN0cmluZztcbiAgICBmb2N1c1RleHQ6IHN0cmluZztcbiAgICBjYXJldFRpbWVvdXRJZDogYW55O1xuICAgIGFuZHJvaWRDaHJvbWU6IGJvb2xlYW47XG4gICAgZm9jdXNlZDogYm9vbGVhbjtcbiAgICBjb25zdHJ1Y3RvcihlbDogRWxlbWVudFJlZik7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBtYXNrOiBzdHJpbmc7XG4gICAgaW5pdE1hc2soKTogdm9pZDtcbiAgICB3cml0ZVZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46IEZ1bmN0aW9uKTogdm9pZDtcbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogRnVuY3Rpb24pOiB2b2lkO1xuICAgIHNldERpc2FibGVkU3RhdGUodmFsOiBib29sZWFuKTogdm9pZDtcbiAgICBjYXJldChmaXJzdD86IG51bWJlciwgbGFzdD86IG51bWJlcik6IHtcbiAgICAgICAgYmVnaW46IGFueTtcbiAgICAgICAgZW5kOiBhbnk7XG4gICAgfTtcbiAgICBpc0NvbXBsZXRlZCgpOiBib29sZWFuO1xuICAgIGdldFBsYWNlaG9sZGVyKGk6IG51bWJlcik6IHN0cmluZztcbiAgICBzZWVrTmV4dChwb3M6IGFueSk6IGFueTtcbiAgICBzZWVrUHJldihwb3M6IGFueSk6IGFueTtcbiAgICBzaGlmdEwoYmVnaW46IG51bWJlciwgZW5kOiBudW1iZXIpOiB2b2lkO1xuICAgIHNoaWZ0Uihwb3M6IGFueSk6IHZvaWQ7XG4gICAgaGFuZGxlQW5kcm9pZElucHV0KGU6IGFueSk6IHZvaWQ7XG4gICAgb25JbnB1dEJsdXIoZTogYW55KTogdm9pZDtcbiAgICBvbktleURvd24oZTogYW55KTogdm9pZDtcbiAgICBvbktleVByZXNzKGU6IGFueSk6IHZvaWQ7XG4gICAgY2xlYXJCdWZmZXIoc3RhcnQ6IGFueSwgZW5kOiBhbnkpOiB2b2lkO1xuICAgIHdyaXRlQnVmZmVyKCk6IHZvaWQ7XG4gICAgY2hlY2tWYWwoYWxsb3c/OiBib29sZWFuKTogYW55O1xuICAgIG9uSW5wdXRGb2N1cyhldmVudDogYW55KTogdm9pZDtcbiAgICBvbklucHV0Q2hhbmdlKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIGhhbmRsZUlucHV0Q2hhbmdlKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIGdldFVubWFza2VkVmFsdWUoKTogc3RyaW5nO1xuICAgIHVwZGF0ZU1vZGVsKGU6IGFueSk6IHZvaWQ7XG4gICAgdXBkYXRlRmlsbGVkU3RhdGUoKTogdm9pZDtcbiAgICBmb2N1cygpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBJbnB1dE1hc2tNb2R1bGUge1xufVxuIl19