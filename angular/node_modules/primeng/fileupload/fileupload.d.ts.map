{"version":3,"file":"fileupload.d.ts","sources":["fileupload.d.ts"],"names":[],"mappingssourcesContent":["import { OnDestroy, EventEmitter, TemplateRef, AfterViewInit, AfterContentInit, QueryList, ElementRef, NgZone, ChangeDetectorRef, OnInit } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { Message } from 'primeng/api';\nimport { PrimeNGConfig } from 'primeng/api';\nimport { BlockableUI } from 'primeng/api';\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { Subscription } from 'rxjs';\nexport declare class FileUpload implements AfterViewInit, AfterContentInit, OnInit, OnDestroy, BlockableUI {\n    private el;\n    sanitizer: DomSanitizer;\n    zone: NgZone;\n    private http;\n    cd: ChangeDetectorRef;\n    config: PrimeNGConfig;\n    name: string;\n    url: string;\n    method: string;\n    multiple: boolean;\n    accept: string;\n    disabled: boolean;\n    auto: boolean;\n    withCredentials: boolean;\n    maxFileSize: number;\n    invalidFileSizeMessageSummary: string;\n    invalidFileSizeMessageDetail: string;\n    invalidFileTypeMessageSummary: string;\n    invalidFileTypeMessageDetail: string;\n    invalidFileLimitMessageDetail: string;\n    invalidFileLimitMessageSummary: string;\n    style: any;\n    styleClass: string;\n    previewWidth: number;\n    chooseLabel: string;\n    uploadLabel: string;\n    cancelLabel: string;\n    chooseIcon: string;\n    uploadIcon: string;\n    cancelIcon: string;\n    showUploadButton: boolean;\n    showCancelButton: boolean;\n    mode: string;\n    headers: HttpHeaders;\n    customUpload: boolean;\n    fileLimit: number;\n    onBeforeUpload: EventEmitter<any>;\n    onSend: EventEmitter<any>;\n    onUpload: EventEmitter<any>;\n    onError: EventEmitter<any>;\n    onClear: EventEmitter<any>;\n    onRemove: EventEmitter<any>;\n    onSelect: EventEmitter<any>;\n    onProgress: EventEmitter<any>;\n    uploadHandler: EventEmitter<any>;\n    templates: QueryList<any>;\n    advancedFileInput: ElementRef;\n    basicFileInput: ElementRef;\n    content: ElementRef;\n    set files(files: File[]);\n    get files(): File[];\n    _files: File[];\n    progress: number;\n    dragHighlight: boolean;\n    msgs: Message[];\n    fileTemplate: TemplateRef<any>;\n    contentTemplate: TemplateRef<any>;\n    toolbarTemplate: TemplateRef<any>;\n    uploadedFileCount: number;\n    focus: boolean;\n    uploading: boolean;\n    duplicateIEEvent: boolean;\n    translationSubscription: Subscription;\n    constructor(el: ElementRef, sanitizer: DomSanitizer, zone: NgZone, http: HttpClient, cd: ChangeDetectorRef, config: PrimeNGConfig);\n    ngAfterContentInit(): void;\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    choose(): void;\n    onFileSelect(event: any): void;\n    isFileSelected(file: File): boolean;\n    isIE11(): boolean;\n    validate(file: File): boolean;\n    private isFileTypeValid;\n    getTypeClass(fileType: string): string;\n    isWildcard(fileType: string): boolean;\n    getFileExtension(file: File): string;\n    isImage(file: File): boolean;\n    onImageLoad(img: any): void;\n    upload(): void;\n    clear(): void;\n    remove(event: Event, index: number): void;\n    isFileLimitExceeded(): boolean;\n    isChooseDisabled(): boolean;\n    checkFileLimit(): void;\n    clearInputElement(): void;\n    clearIEInput(): void;\n    hasFiles(): boolean;\n    onDragEnter(e: any): void;\n    onDragOver(e: any): void;\n    onDragLeave(event: any): void;\n    onDrop(event: any): void;\n    onFocus(): void;\n    onBlur(): void;\n    formatSize(bytes: any): string;\n    onBasicUploaderClick(): void;\n    getBlockableElement(): HTMLElement;\n    get chooseButtonLabel(): string;\n    get uploadButtonLabel(): string;\n    get cancelButtonLabel(): string;\n    ngOnDestroy(): void;\n}\nexport declare class FileUploadModule {\n}\n"]}