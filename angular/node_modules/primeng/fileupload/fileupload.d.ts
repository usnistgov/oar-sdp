import { OnDestroy, EventEmitter, TemplateRef, AfterViewInit, AfterContentInit, QueryList, ElementRef, NgZone } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { Message } from 'primeng/api';
import { BlockableUI } from 'primeng/api';
import { HttpClient, HttpHeaders } from "@angular/common/http";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from 'primeng/api';
import * as ɵngcc3 from 'primeng/button';
import * as ɵngcc4 from 'primeng/progressbar';
import * as ɵngcc5 from 'primeng/messages';
export declare class FileUpload implements AfterViewInit, AfterContentInit, OnDestroy, BlockableUI {
    private el;
    sanitizer: DomSanitizer;
    zone: NgZone;
    private http;
    name: string;
    url: string;
    method: string;
    multiple: boolean;
    accept: string;
    disabled: boolean;
    auto: boolean;
    withCredentials: boolean;
    maxFileSize: number;
    invalidFileSizeMessageSummary: string;
    invalidFileSizeMessageDetail: string;
    invalidFileTypeMessageSummary: string;
    invalidFileTypeMessageDetail: string;
    invalidFileLimitMessageDetail: string;
    invalidFileLimitMessageSummary: string;
    style: any;
    styleClass: string;
    previewWidth: number;
    chooseLabel: string;
    uploadLabel: string;
    cancelLabel: string;
    chooseIcon: string;
    uploadIcon: string;
    cancelIcon: string;
    showUploadButton: boolean;
    showCancelButton: boolean;
    mode: string;
    headers: HttpHeaders;
    customUpload: boolean;
    fileLimit: number;
    onBeforeUpload: EventEmitter<any>;
    onSend: EventEmitter<any>;
    onUpload: EventEmitter<any>;
    onError: EventEmitter<any>;
    onClear: EventEmitter<any>;
    onRemove: EventEmitter<any>;
    onSelect: EventEmitter<any>;
    onProgress: EventEmitter<any>;
    uploadHandler: EventEmitter<any>;
    templates: QueryList<any>;
    advancedFileInput: ElementRef;
    basicFileInput: ElementRef;
    content: ElementRef;
    files: File[];
    _files: File[];
    progress: number;
    dragHighlight: boolean;
    msgs: Message[];
    fileTemplate: TemplateRef<any>;
    contentTemplate: TemplateRef<any>;
    toolbarTemplate: TemplateRef<any>;
    uploadedFileCount: number;
    focus: boolean;
    uploading: boolean;
    duplicateIEEvent: boolean;
    constructor(el: ElementRef, sanitizer: DomSanitizer, zone: NgZone, http: HttpClient);
    ngAfterContentInit(): void;
    ngAfterViewInit(): void;
    onFileSelect(event: any): void;
    isFileSelected(file: File): boolean;
    isIE11(): boolean;
    validate(file: File): boolean;
    private isFileTypeValid;
    getTypeClass(fileType: string): string;
    isWildcard(fileType: string): boolean;
    getFileExtension(file: File): string;
    isImage(file: File): boolean;
    onImageLoad(img: any): void;
    upload(): void;
    clear(): void;
    remove(event: Event, index: number): void;
    isFileLimitExceeded(): boolean;
    isChooseDisabled(): boolean;
    checkFileLimit(): void;
    clearInputElement(): void;
    clearIEInput(): void;
    hasFiles(): boolean;
    onDragEnter(e: any): void;
    onDragOver(e: any): void;
    onDragLeave(event: any): void;
    onDrop(event: any): void;
    onFocus(): void;
    onBlur(): void;
    formatSize(bytes: any): string;
    onSimpleUploaderClick(event: Event): void;
    getBlockableElement(): HTMLElement;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<FileUpload, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<FileUpload, "p-fileUpload", never, { "method": "method"; "invalidFileSizeMessageSummary": "invalidFileSizeMessageSummary"; "invalidFileSizeMessageDetail": "invalidFileSizeMessageDetail"; "invalidFileTypeMessageSummary": "invalidFileTypeMessageSummary"; "invalidFileTypeMessageDetail": "invalidFileTypeMessageDetail"; "invalidFileLimitMessageDetail": "invalidFileLimitMessageDetail"; "invalidFileLimitMessageSummary": "invalidFileLimitMessageSummary"; "previewWidth": "previewWidth"; "chooseLabel": "chooseLabel"; "uploadLabel": "uploadLabel"; "cancelLabel": "cancelLabel"; "chooseIcon": "chooseIcon"; "uploadIcon": "uploadIcon"; "cancelIcon": "cancelIcon"; "showUploadButton": "showUploadButton"; "showCancelButton": "showCancelButton"; "mode": "mode"; "files": "files"; "name": "name"; "url": "url"; "multiple": "multiple"; "accept": "accept"; "disabled": "disabled"; "auto": "auto"; "withCredentials": "withCredentials"; "maxFileSize": "maxFileSize"; "style": "style"; "styleClass": "styleClass"; "headers": "headers"; "customUpload": "customUpload"; "fileLimit": "fileLimit"; }, { "onBeforeUpload": "onBeforeUpload"; "onSend": "onSend"; "onUpload": "onUpload"; "onError": "onError"; "onClear": "onClear"; "onRemove": "onRemove"; "onSelect": "onSelect"; "onProgress": "onProgress"; "uploadHandler": "uploadHandler"; }, ["templates"], never>;
}
export declare class FileUploadModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<FileUploadModule, [typeof FileUpload], [typeof ɵngcc1.CommonModule, typeof ɵngcc2.SharedModule, typeof ɵngcc3.ButtonModule, typeof ɵngcc4.ProgressBarModule, typeof ɵngcc5.MessagesModule], [typeof FileUpload, typeof ɵngcc2.SharedModule, typeof ɵngcc3.ButtonModule, typeof ɵngcc4.ProgressBarModule, typeof ɵngcc5.MessagesModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<FileUploadModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXVwbG9hZC5kLnRzIiwic291cmNlcyI6WyJmaWxldXBsb2FkLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0FBS0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE0RkE7Ozs7QUFFQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9uRGVzdHJveSwgRXZlbnRFbWl0dGVyLCBUZW1wbGF0ZVJlZiwgQWZ0ZXJWaWV3SW5pdCwgQWZ0ZXJDb250ZW50SW5pdCwgUXVlcnlMaXN0LCBFbGVtZW50UmVmLCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERvbVNhbml0aXplciB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuaW1wb3J0IHsgTWVzc2FnZSB9IGZyb20gJ3ByaW1lbmcvYXBpJztcbmltcG9ydCB7IEJsb2NrYWJsZVVJIH0gZnJvbSAncHJpbWVuZy9hcGknO1xuaW1wb3J0IHsgSHR0cENsaWVudCwgSHR0cEhlYWRlcnMgfSBmcm9tIFwiQGFuZ3VsYXIvY29tbW9uL2h0dHBcIjtcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEZpbGVVcGxvYWQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBBZnRlckNvbnRlbnRJbml0LCBPbkRlc3Ryb3ksIEJsb2NrYWJsZVVJIHtcbiAgICBwcml2YXRlIGVsO1xuICAgIHNhbml0aXplcjogRG9tU2FuaXRpemVyO1xuICAgIHpvbmU6IE5nWm9uZTtcbiAgICBwcml2YXRlIGh0dHA7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIHVybDogc3RyaW5nO1xuICAgIG1ldGhvZDogc3RyaW5nO1xuICAgIG11bHRpcGxlOiBib29sZWFuO1xuICAgIGFjY2VwdDogc3RyaW5nO1xuICAgIGRpc2FibGVkOiBib29sZWFuO1xuICAgIGF1dG86IGJvb2xlYW47XG4gICAgd2l0aENyZWRlbnRpYWxzOiBib29sZWFuO1xuICAgIG1heEZpbGVTaXplOiBudW1iZXI7XG4gICAgaW52YWxpZEZpbGVTaXplTWVzc2FnZVN1bW1hcnk6IHN0cmluZztcbiAgICBpbnZhbGlkRmlsZVNpemVNZXNzYWdlRGV0YWlsOiBzdHJpbmc7XG4gICAgaW52YWxpZEZpbGVUeXBlTWVzc2FnZVN1bW1hcnk6IHN0cmluZztcbiAgICBpbnZhbGlkRmlsZVR5cGVNZXNzYWdlRGV0YWlsOiBzdHJpbmc7XG4gICAgaW52YWxpZEZpbGVMaW1pdE1lc3NhZ2VEZXRhaWw6IHN0cmluZztcbiAgICBpbnZhbGlkRmlsZUxpbWl0TWVzc2FnZVN1bW1hcnk6IHN0cmluZztcbiAgICBzdHlsZTogYW55O1xuICAgIHN0eWxlQ2xhc3M6IHN0cmluZztcbiAgICBwcmV2aWV3V2lkdGg6IG51bWJlcjtcbiAgICBjaG9vc2VMYWJlbDogc3RyaW5nO1xuICAgIHVwbG9hZExhYmVsOiBzdHJpbmc7XG4gICAgY2FuY2VsTGFiZWw6IHN0cmluZztcbiAgICBjaG9vc2VJY29uOiBzdHJpbmc7XG4gICAgdXBsb2FkSWNvbjogc3RyaW5nO1xuICAgIGNhbmNlbEljb246IHN0cmluZztcbiAgICBzaG93VXBsb2FkQnV0dG9uOiBib29sZWFuO1xuICAgIHNob3dDYW5jZWxCdXR0b246IGJvb2xlYW47XG4gICAgbW9kZTogc3RyaW5nO1xuICAgIGhlYWRlcnM6IEh0dHBIZWFkZXJzO1xuICAgIGN1c3RvbVVwbG9hZDogYm9vbGVhbjtcbiAgICBmaWxlTGltaXQ6IG51bWJlcjtcbiAgICBvbkJlZm9yZVVwbG9hZDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25TZW5kOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvblVwbG9hZDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25FcnJvcjogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25DbGVhcjogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25SZW1vdmU6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uU2VsZWN0OiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvblByb2dyZXNzOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICB1cGxvYWRIYW5kbGVyOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICB0ZW1wbGF0ZXM6IFF1ZXJ5TGlzdDxhbnk+O1xuICAgIGFkdmFuY2VkRmlsZUlucHV0OiBFbGVtZW50UmVmO1xuICAgIGJhc2ljRmlsZUlucHV0OiBFbGVtZW50UmVmO1xuICAgIGNvbnRlbnQ6IEVsZW1lbnRSZWY7XG4gICAgZmlsZXM6IEZpbGVbXTtcbiAgICBfZmlsZXM6IEZpbGVbXTtcbiAgICBwcm9ncmVzczogbnVtYmVyO1xuICAgIGRyYWdIaWdobGlnaHQ6IGJvb2xlYW47XG4gICAgbXNnczogTWVzc2FnZVtdO1xuICAgIGZpbGVUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBjb250ZW50VGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgdG9vbGJhclRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIHVwbG9hZGVkRmlsZUNvdW50OiBudW1iZXI7XG4gICAgZm9jdXM6IGJvb2xlYW47XG4gICAgdXBsb2FkaW5nOiBib29sZWFuO1xuICAgIGR1cGxpY2F0ZUlFRXZlbnQ6IGJvb2xlYW47XG4gICAgY29uc3RydWN0b3IoZWw6IEVsZW1lbnRSZWYsIHNhbml0aXplcjogRG9tU2FuaXRpemVyLCB6b25lOiBOZ1pvbmUsIGh0dHA6IEh0dHBDbGllbnQpO1xuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIG9uRmlsZVNlbGVjdChldmVudDogYW55KTogdm9pZDtcbiAgICBpc0ZpbGVTZWxlY3RlZChmaWxlOiBGaWxlKTogYm9vbGVhbjtcbiAgICBpc0lFMTEoKTogYm9vbGVhbjtcbiAgICB2YWxpZGF0ZShmaWxlOiBGaWxlKTogYm9vbGVhbjtcbiAgICBwcml2YXRlIGlzRmlsZVR5cGVWYWxpZDtcbiAgICBnZXRUeXBlQ2xhc3MoZmlsZVR5cGU6IHN0cmluZyk6IHN0cmluZztcbiAgICBpc1dpbGRjYXJkKGZpbGVUeXBlOiBzdHJpbmcpOiBib29sZWFuO1xuICAgIGdldEZpbGVFeHRlbnNpb24oZmlsZTogRmlsZSk6IHN0cmluZztcbiAgICBpc0ltYWdlKGZpbGU6IEZpbGUpOiBib29sZWFuO1xuICAgIG9uSW1hZ2VMb2FkKGltZzogYW55KTogdm9pZDtcbiAgICB1cGxvYWQoKTogdm9pZDtcbiAgICBjbGVhcigpOiB2b2lkO1xuICAgIHJlbW92ZShldmVudDogRXZlbnQsIGluZGV4OiBudW1iZXIpOiB2b2lkO1xuICAgIGlzRmlsZUxpbWl0RXhjZWVkZWQoKTogYm9vbGVhbjtcbiAgICBpc0Nob29zZURpc2FibGVkKCk6IGJvb2xlYW47XG4gICAgY2hlY2tGaWxlTGltaXQoKTogdm9pZDtcbiAgICBjbGVhcklucHV0RWxlbWVudCgpOiB2b2lkO1xuICAgIGNsZWFySUVJbnB1dCgpOiB2b2lkO1xuICAgIGhhc0ZpbGVzKCk6IGJvb2xlYW47XG4gICAgb25EcmFnRW50ZXIoZTogYW55KTogdm9pZDtcbiAgICBvbkRyYWdPdmVyKGU6IGFueSk6IHZvaWQ7XG4gICAgb25EcmFnTGVhdmUoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgb25Ecm9wKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIG9uRm9jdXMoKTogdm9pZDtcbiAgICBvbkJsdXIoKTogdm9pZDtcbiAgICBmb3JtYXRTaXplKGJ5dGVzOiBhbnkpOiBzdHJpbmc7XG4gICAgb25TaW1wbGVVcGxvYWRlckNsaWNrKGV2ZW50OiBFdmVudCk6IHZvaWQ7XG4gICAgZ2V0QmxvY2thYmxlRWxlbWVudCgpOiBIVE1MRWxlbWVudDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRmlsZVVwbG9hZE1vZHVsZSB7XG59XG4iXX0=