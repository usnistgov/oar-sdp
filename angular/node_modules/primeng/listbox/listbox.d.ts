import { ElementRef, EventEmitter, AfterContentInit, QueryList, TemplateRef, ChangeDetectorRef } from '@angular/core';
import { SelectItem } from 'primeng/api';
import { ControlValueAccessor } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from 'primeng/api';
export declare const LISTBOX_VALUE_ACCESSOR: any;
export declare class Listbox implements AfterContentInit, ControlValueAccessor {
    el: ElementRef;
    cd: ChangeDetectorRef;
    multiple: boolean;
    style: any;
    styleClass: string;
    listStyle: any;
    listStyleClass: string;
    readonly: boolean;
    disabled: boolean;
    checkbox: boolean;
    filter: boolean;
    filterMode: string;
    filterLocale: string;
    metaKeySelection: boolean;
    dataKey: string;
    showToggleAll: boolean;
    optionLabel: string;
    ariaFilterLabel: string;
    filterPlaceHolder: string;
    onChange: EventEmitter<any>;
    onClick: EventEmitter<any>;
    onDblClick: EventEmitter<any>;
    headerCheckboxViewChild: ElementRef;
    headerFacet: any;
    footerFacet: any;
    templates: QueryList<any>;
    itemTemplate: TemplateRef<any>;
    _filterValue: string;
    filtered: boolean;
    value: any;
    onModelChange: Function;
    onModelTouched: Function;
    optionTouched: boolean;
    focus: boolean;
    _options: any[];
    headerCheckboxFocus: boolean;
    disabledSelectedOptions: SelectItem[];
    constructor(el: ElementRef, cd: ChangeDetectorRef);
    options: any[];
    filterValue: string;
    ngAfterContentInit(): void;
    writeValue(value: any): void;
    registerOnChange(fn: Function): void;
    registerOnTouched(fn: Function): void;
    setDisabledState(val: boolean): void;
    onOptionClick(event: any, option: any): void;
    onOptionTouchEnd(event: any, option: any): void;
    onOptionDoubleClick(event: Event, option: SelectItem): any;
    onOptionClickSingle(event: any, option: any): void;
    onOptionClickMultiple(event: any, option: any): void;
    onOptionClickCheckbox(event: any, option: any): void;
    removeOption(option: any): void;
    isSelected(option: SelectItem): boolean;
    readonly allChecked: boolean;
    getEnabledOptionCount(): number;
    allFilteredSelected(): boolean;
    onFilter(event: any): void;
    toggleAll(event: any): void;
    isItemVisible(option: SelectItem): boolean;
    onInputFocus(event: any): void;
    onInputBlur(event: any): void;
    onOptionKeyDown(event: KeyboardEvent, option: any): void;
    findNextItem(item: any): any;
    findPrevItem(item: any): any;
    getFilteredOptions(): any[];
    onHeaderCheckboxFocus(): void;
    onHeaderCheckboxBlur(): void;
    setDisabledSelectedOptions(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Listbox, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<Listbox, "p-listbox", never, { "checkbox": "checkbox"; "filter": "filter"; "filterMode": "filterMode"; "metaKeySelection": "metaKeySelection"; "showToggleAll": "showToggleAll"; "options": "options"; "filterValue": "filterValue"; "disabled": "disabled"; "multiple": "multiple"; "style": "style"; "styleClass": "styleClass"; "listStyle": "listStyle"; "listStyleClass": "listStyleClass"; "readonly": "readonly"; "filterLocale": "filterLocale"; "dataKey": "dataKey"; "optionLabel": "optionLabel"; "ariaFilterLabel": "ariaFilterLabel"; "filterPlaceHolder": "filterPlaceHolder"; }, { "onChange": "onChange"; "onClick": "onClick"; "onDblClick": "onDblClick"; }, ["headerFacet", "footerFacet", "templates"], ["p-header", "p-footer"]>;
}
export declare class ListboxModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<ListboxModule, [typeof Listbox], [typeof ɵngcc1.CommonModule, typeof ɵngcc2.SharedModule], [typeof Listbox, typeof ɵngcc2.SharedModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<ListboxModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdGJveC5kLnRzIiwic291cmNlcyI6WyJsaXN0Ym94LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQUdBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFzRUE7Ozs7QUFFQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgQWZ0ZXJDb250ZW50SW5pdCwgUXVlcnlMaXN0LCBUZW1wbGF0ZVJlZiwgQ2hhbmdlRGV0ZWN0b3JSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFNlbGVjdEl0ZW0gfSBmcm9tICdwcmltZW5nL2FwaSc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IExJU1RCT1hfVkFMVUVfQUNDRVNTT1I6IGFueTtcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIExpc3Rib3ggaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0LCBDb250cm9sVmFsdWVBY2Nlc3NvciB7XG4gICAgZWw6IEVsZW1lbnRSZWY7XG4gICAgY2Q6IENoYW5nZURldGVjdG9yUmVmO1xuICAgIG11bHRpcGxlOiBib29sZWFuO1xuICAgIHN0eWxlOiBhbnk7XG4gICAgc3R5bGVDbGFzczogc3RyaW5nO1xuICAgIGxpc3RTdHlsZTogYW55O1xuICAgIGxpc3RTdHlsZUNsYXNzOiBzdHJpbmc7XG4gICAgcmVhZG9ubHk6IGJvb2xlYW47XG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgY2hlY2tib3g6IGJvb2xlYW47XG4gICAgZmlsdGVyOiBib29sZWFuO1xuICAgIGZpbHRlck1vZGU6IHN0cmluZztcbiAgICBmaWx0ZXJMb2NhbGU6IHN0cmluZztcbiAgICBtZXRhS2V5U2VsZWN0aW9uOiBib29sZWFuO1xuICAgIGRhdGFLZXk6IHN0cmluZztcbiAgICBzaG93VG9nZ2xlQWxsOiBib29sZWFuO1xuICAgIG9wdGlvbkxhYmVsOiBzdHJpbmc7XG4gICAgYXJpYUZpbHRlckxhYmVsOiBzdHJpbmc7XG4gICAgZmlsdGVyUGxhY2VIb2xkZXI6IHN0cmluZztcbiAgICBvbkNoYW5nZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25DbGljazogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25EYmxDbGljazogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgaGVhZGVyQ2hlY2tib3hWaWV3Q2hpbGQ6IEVsZW1lbnRSZWY7XG4gICAgaGVhZGVyRmFjZXQ6IGFueTtcbiAgICBmb290ZXJGYWNldDogYW55O1xuICAgIHRlbXBsYXRlczogUXVlcnlMaXN0PGFueT47XG4gICAgaXRlbVRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIF9maWx0ZXJWYWx1ZTogc3RyaW5nO1xuICAgIGZpbHRlcmVkOiBib29sZWFuO1xuICAgIHZhbHVlOiBhbnk7XG4gICAgb25Nb2RlbENoYW5nZTogRnVuY3Rpb247XG4gICAgb25Nb2RlbFRvdWNoZWQ6IEZ1bmN0aW9uO1xuICAgIG9wdGlvblRvdWNoZWQ6IGJvb2xlYW47XG4gICAgZm9jdXM6IGJvb2xlYW47XG4gICAgX29wdGlvbnM6IGFueVtdO1xuICAgIGhlYWRlckNoZWNrYm94Rm9jdXM6IGJvb2xlYW47XG4gICAgZGlzYWJsZWRTZWxlY3RlZE9wdGlvbnM6IFNlbGVjdEl0ZW1bXTtcbiAgICBjb25zdHJ1Y3RvcihlbDogRWxlbWVudFJlZiwgY2Q6IENoYW5nZURldGVjdG9yUmVmKTtcbiAgICBvcHRpb25zOiBhbnlbXTtcbiAgICBmaWx0ZXJWYWx1ZTogc3RyaW5nO1xuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkO1xuICAgIHdyaXRlVmFsdWUodmFsdWU6IGFueSk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogRnVuY3Rpb24pOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiBGdW5jdGlvbik6IHZvaWQ7XG4gICAgc2V0RGlzYWJsZWRTdGF0ZSh2YWw6IGJvb2xlYW4pOiB2b2lkO1xuICAgIG9uT3B0aW9uQ2xpY2soZXZlbnQ6IGFueSwgb3B0aW9uOiBhbnkpOiB2b2lkO1xuICAgIG9uT3B0aW9uVG91Y2hFbmQoZXZlbnQ6IGFueSwgb3B0aW9uOiBhbnkpOiB2b2lkO1xuICAgIG9uT3B0aW9uRG91YmxlQ2xpY2soZXZlbnQ6IEV2ZW50LCBvcHRpb246IFNlbGVjdEl0ZW0pOiBhbnk7XG4gICAgb25PcHRpb25DbGlja1NpbmdsZShldmVudDogYW55LCBvcHRpb246IGFueSk6IHZvaWQ7XG4gICAgb25PcHRpb25DbGlja011bHRpcGxlKGV2ZW50OiBhbnksIG9wdGlvbjogYW55KTogdm9pZDtcbiAgICBvbk9wdGlvbkNsaWNrQ2hlY2tib3goZXZlbnQ6IGFueSwgb3B0aW9uOiBhbnkpOiB2b2lkO1xuICAgIHJlbW92ZU9wdGlvbihvcHRpb246IGFueSk6IHZvaWQ7XG4gICAgaXNTZWxlY3RlZChvcHRpb246IFNlbGVjdEl0ZW0pOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGFsbENoZWNrZWQ6IGJvb2xlYW47XG4gICAgZ2V0RW5hYmxlZE9wdGlvbkNvdW50KCk6IG51bWJlcjtcbiAgICBhbGxGaWx0ZXJlZFNlbGVjdGVkKCk6IGJvb2xlYW47XG4gICAgb25GaWx0ZXIoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgdG9nZ2xlQWxsKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIGlzSXRlbVZpc2libGUob3B0aW9uOiBTZWxlY3RJdGVtKTogYm9vbGVhbjtcbiAgICBvbklucHV0Rm9jdXMoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgb25JbnB1dEJsdXIoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgb25PcHRpb25LZXlEb3duKGV2ZW50OiBLZXlib2FyZEV2ZW50LCBvcHRpb246IGFueSk6IHZvaWQ7XG4gICAgZmluZE5leHRJdGVtKGl0ZW06IGFueSk6IGFueTtcbiAgICBmaW5kUHJldkl0ZW0oaXRlbTogYW55KTogYW55O1xuICAgIGdldEZpbHRlcmVkT3B0aW9ucygpOiBhbnlbXTtcbiAgICBvbkhlYWRlckNoZWNrYm94Rm9jdXMoKTogdm9pZDtcbiAgICBvbkhlYWRlckNoZWNrYm94Qmx1cigpOiB2b2lkO1xuICAgIHNldERpc2FibGVkU2VsZWN0ZWRPcHRpb25zKCk6IHZvaWQ7XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBMaXN0Ym94TW9kdWxlIHtcbn1cbiJdfQ==