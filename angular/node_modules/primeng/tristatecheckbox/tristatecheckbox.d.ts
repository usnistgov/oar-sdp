import { EventEmitter, ChangeDetectorRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
export declare const TRISTATECHECKBOX_VALUE_ACCESSOR: any;
export declare class TriStateCheckbox implements ControlValueAccessor {
    private cd;
    constructor(cd: ChangeDetectorRef);
    disabled: boolean;
    name: string;
    ariaLabelledBy: string;
    tabindex: number;
    inputId: string;
    style: any;
    styleClass: string;
    label: string;
    readonly: boolean;
    onChange: EventEmitter<any>;
    focus: boolean;
    value: any;
    onModelChange: Function;
    onModelTouched: Function;
    onClick(event: Event, input: HTMLInputElement): void;
    onKeydown(event: KeyboardEvent): void;
    onKeyup(event: KeyboardEvent): void;
    toggle(event: Event): void;
    onFocus(): void;
    onBlur(): void;
    registerOnChange(fn: Function): void;
    registerOnTouched(fn: Function): void;
    writeValue(value: any): void;
    setDisabledState(disabled: boolean): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TriStateCheckbox, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TriStateCheckbox, "p-triStateCheckbox", never, { "disabled": "disabled"; "name": "name"; "ariaLabelledBy": "ariaLabelledBy"; "tabindex": "tabindex"; "inputId": "inputId"; "style": "style"; "styleClass": "styleClass"; "label": "label"; "readonly": "readonly"; }, { "onChange": "onChange"; }, never, never>;
}
export declare class TriStateCheckboxModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<TriStateCheckboxModule, [typeof TriStateCheckbox], [typeof ɵngcc1.CommonModule], [typeof TriStateCheckbox]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<TriStateCheckboxModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJpc3RhdGVjaGVja2JveC5kLnRzIiwic291cmNlcyI6WyJ0cmlzdGF0ZWNoZWNrYm94LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBNEJBOzs7O0FBRUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIENoYW5nZURldGVjdG9yUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IFRSSVNUQVRFQ0hFQ0tCT1hfVkFMVUVfQUNDRVNTT1I6IGFueTtcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFRyaVN0YXRlQ2hlY2tib3ggaW1wbGVtZW50cyBDb250cm9sVmFsdWVBY2Nlc3NvciB7XG4gICAgcHJpdmF0ZSBjZDtcbiAgICBjb25zdHJ1Y3RvcihjZDogQ2hhbmdlRGV0ZWN0b3JSZWYpO1xuICAgIGRpc2FibGVkOiBib29sZWFuO1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBhcmlhTGFiZWxsZWRCeTogc3RyaW5nO1xuICAgIHRhYmluZGV4OiBudW1iZXI7XG4gICAgaW5wdXRJZDogc3RyaW5nO1xuICAgIHN0eWxlOiBhbnk7XG4gICAgc3R5bGVDbGFzczogc3RyaW5nO1xuICAgIGxhYmVsOiBzdHJpbmc7XG4gICAgcmVhZG9ubHk6IGJvb2xlYW47XG4gICAgb25DaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGZvY3VzOiBib29sZWFuO1xuICAgIHZhbHVlOiBhbnk7XG4gICAgb25Nb2RlbENoYW5nZTogRnVuY3Rpb247XG4gICAgb25Nb2RlbFRvdWNoZWQ6IEZ1bmN0aW9uO1xuICAgIG9uQ2xpY2soZXZlbnQ6IEV2ZW50LCBpbnB1dDogSFRNTElucHV0RWxlbWVudCk6IHZvaWQ7XG4gICAgb25LZXlkb3duKGV2ZW50OiBLZXlib2FyZEV2ZW50KTogdm9pZDtcbiAgICBvbktleXVwKGV2ZW50OiBLZXlib2FyZEV2ZW50KTogdm9pZDtcbiAgICB0b2dnbGUoZXZlbnQ6IEV2ZW50KTogdm9pZDtcbiAgICBvbkZvY3VzKCk6IHZvaWQ7XG4gICAgb25CbHVyKCk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogRnVuY3Rpb24pOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiBGdW5jdGlvbik6IHZvaWQ7XG4gICAgd3JpdGVWYWx1ZSh2YWx1ZTogYW55KTogdm9pZDtcbiAgICBzZXREaXNhYmxlZFN0YXRlKGRpc2FibGVkOiBib29sZWFuKTogdm9pZDtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFRyaVN0YXRlQ2hlY2tib3hNb2R1bGUge1xufVxuIl19