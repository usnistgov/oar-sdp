import { ElementRef, AfterViewChecked, DoCheck, EventEmitter, IterableDiffers, ChangeDetectorRef, NgZone } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
export declare class GMap implements AfterViewChecked, DoCheck {
    el: ElementRef;
    cd: ChangeDetectorRef;
    zone: NgZone;
    style: any;
    styleClass: string;
    options: any;
    overlays: any[];
    onMapClick: EventEmitter<any>;
    onOverlayClick: EventEmitter<any>;
    onOverlayDblClick: EventEmitter<any>;
    onOverlayDragStart: EventEmitter<any>;
    onOverlayDrag: EventEmitter<any>;
    onOverlayDragEnd: EventEmitter<any>;
    onMapReady: EventEmitter<any>;
    onMapDragEnd: EventEmitter<any>;
    onZoomChanged: EventEmitter<any>;
    differ: any;
    map: any;
    constructor(el: ElementRef, differs: IterableDiffers, cd: ChangeDetectorRef, zone: NgZone);
    ngAfterViewChecked(): void;
    initialize(): void;
    bindOverlayEvents(overlay: any): void;
    ngDoCheck(): void;
    bindDragEvents(overlay: any): void;
    getMap(): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<GMap, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<GMap, "p-gmap", never, { "style": "style"; "styleClass": "styleClass"; "options": "options"; "overlays": "overlays"; }, { "onMapClick": "onMapClick"; "onOverlayClick": "onOverlayClick"; "onOverlayDblClick": "onOverlayDblClick"; "onOverlayDragStart": "onOverlayDragStart"; "onOverlayDrag": "onOverlayDrag"; "onOverlayDragEnd": "onOverlayDragEnd"; "onMapReady": "onMapReady"; "onMapDragEnd": "onMapDragEnd"; "onZoomChanged": "onZoomChanged"; }, never, never>;
}
export declare class GMapModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<GMapModule, [typeof GMap], [typeof ɵngcc1.CommonModule], [typeof GMap]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<GMapModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ21hcC5kLnRzIiwic291cmNlcyI6WyJnbWFwLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBMEJBOzs7O0FBRUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBBZnRlclZpZXdDaGVja2VkLCBEb0NoZWNrLCBFdmVudEVtaXR0ZXIsIEl0ZXJhYmxlRGlmZmVycywgQ2hhbmdlRGV0ZWN0b3JSZWYsIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgR01hcCBpbXBsZW1lbnRzIEFmdGVyVmlld0NoZWNrZWQsIERvQ2hlY2sge1xuICAgIGVsOiBFbGVtZW50UmVmO1xuICAgIGNkOiBDaGFuZ2VEZXRlY3RvclJlZjtcbiAgICB6b25lOiBOZ1pvbmU7XG4gICAgc3R5bGU6IGFueTtcbiAgICBzdHlsZUNsYXNzOiBzdHJpbmc7XG4gICAgb3B0aW9uczogYW55O1xuICAgIG92ZXJsYXlzOiBhbnlbXTtcbiAgICBvbk1hcENsaWNrOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvbk92ZXJsYXlDbGljazogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25PdmVybGF5RGJsQ2xpY2s6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uT3ZlcmxheURyYWdTdGFydDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25PdmVybGF5RHJhZzogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25PdmVybGF5RHJhZ0VuZDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25NYXBSZWFkeTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25NYXBEcmFnRW5kOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvblpvb21DaGFuZ2VkOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBkaWZmZXI6IGFueTtcbiAgICBtYXA6IGFueTtcbiAgICBjb25zdHJ1Y3RvcihlbDogRWxlbWVudFJlZiwgZGlmZmVyczogSXRlcmFibGVEaWZmZXJzLCBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYsIHpvbmU6IE5nWm9uZSk7XG4gICAgbmdBZnRlclZpZXdDaGVja2VkKCk6IHZvaWQ7XG4gICAgaW5pdGlhbGl6ZSgpOiB2b2lkO1xuICAgIGJpbmRPdmVybGF5RXZlbnRzKG92ZXJsYXk6IGFueSk6IHZvaWQ7XG4gICAgbmdEb0NoZWNrKCk6IHZvaWQ7XG4gICAgYmluZERyYWdFdmVudHMob3ZlcmxheTogYW55KTogdm9pZDtcbiAgICBnZXRNYXAoKTogYW55O1xufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgR01hcE1vZHVsZSB7XG59XG4iXX0=