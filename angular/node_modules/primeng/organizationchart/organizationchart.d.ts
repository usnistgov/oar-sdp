import { ElementRef, AfterContentInit, EventEmitter, TemplateRef, QueryList } from '@angular/core';
import { TreeNode } from 'primeng/api';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from 'primeng/api';
export declare class OrganizationChartNode {
    node: TreeNode;
    root: boolean;
    first: boolean;
    last: boolean;
    chart: OrganizationChart;
    constructor(chart: any);
    readonly leaf: boolean;
    readonly colspan: number;
    onNodeClick(event: Event, node: TreeNode): void;
    toggleNode(event: Event, node: TreeNode): void;
    isSelected(): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<OrganizationChartNode, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<OrganizationChartNode, "[pOrganizationChartNode]", never, { "node": "node"; "root": "root"; "first": "first"; "last": "last"; }, {}, never, never>;
}
export declare class OrganizationChart implements AfterContentInit {
    el: ElementRef;
    value: TreeNode[];
    style: any;
    styleClass: string;
    selectionMode: string;
    selection: any;
    preserveSpace: boolean;
    selectionChange: EventEmitter<any>;
    onNodeSelect: EventEmitter<any>;
    onNodeUnselect: EventEmitter<any>;
    onNodeExpand: EventEmitter<any>;
    onNodeCollapse: EventEmitter<any>;
    templates: QueryList<any>;
    templateMap: any;
    constructor(el: ElementRef);
    readonly root: TreeNode;
    ngAfterContentInit(): void;
    getTemplateForNode(node: TreeNode): TemplateRef<any>;
    onNodeClick(event: Event, node: TreeNode): void;
    findIndexInSelection(node: TreeNode): number;
    isSelected(node: TreeNode): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<OrganizationChart, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<OrganizationChart, "p-organizationChart", never, { "preserveSpace": "preserveSpace"; "selection": "selection"; "value": "value"; "style": "style"; "styleClass": "styleClass"; "selectionMode": "selectionMode"; }, { "selectionChange": "selectionChange"; "onNodeSelect": "onNodeSelect"; "onNodeUnselect": "onNodeUnselect"; "onNodeExpand": "onNodeExpand"; "onNodeCollapse": "onNodeCollapse"; }, ["templates"], never>;
}
export declare class OrganizationChartModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<OrganizationChartModule, [typeof OrganizationChart, typeof OrganizationChartNode], [typeof ɵngcc1.CommonModule], [typeof OrganizationChart, typeof ɵngcc2.SharedModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<OrganizationChartModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JnYW5pemF0aW9uY2hhcnQuZC50cyIsInNvdXJjZXMiOlsib3JnYW5pemF0aW9uY2hhcnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7QUFFQTs7Ozs7Ozs7Ozs7Ozs7QUFZQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXVCQTs7OztBQUVBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgQWZ0ZXJDb250ZW50SW5pdCwgRXZlbnRFbWl0dGVyLCBUZW1wbGF0ZVJlZiwgUXVlcnlMaXN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUcmVlTm9kZSB9IGZyb20gJ3ByaW1lbmcvYXBpJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE9yZ2FuaXphdGlvbkNoYXJ0Tm9kZSB7XG4gICAgbm9kZTogVHJlZU5vZGU7XG4gICAgcm9vdDogYm9vbGVhbjtcbiAgICBmaXJzdDogYm9vbGVhbjtcbiAgICBsYXN0OiBib29sZWFuO1xuICAgIGNoYXJ0OiBPcmdhbml6YXRpb25DaGFydDtcbiAgICBjb25zdHJ1Y3RvcihjaGFydDogYW55KTtcbiAgICByZWFkb25seSBsZWFmOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGNvbHNwYW46IG51bWJlcjtcbiAgICBvbk5vZGVDbGljayhldmVudDogRXZlbnQsIG5vZGU6IFRyZWVOb2RlKTogdm9pZDtcbiAgICB0b2dnbGVOb2RlKGV2ZW50OiBFdmVudCwgbm9kZTogVHJlZU5vZGUpOiB2b2lkO1xuICAgIGlzU2VsZWN0ZWQoKTogYm9vbGVhbjtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE9yZ2FuaXphdGlvbkNoYXJ0IGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCB7XG4gICAgZWw6IEVsZW1lbnRSZWY7XG4gICAgdmFsdWU6IFRyZWVOb2RlW107XG4gICAgc3R5bGU6IGFueTtcbiAgICBzdHlsZUNsYXNzOiBzdHJpbmc7XG4gICAgc2VsZWN0aW9uTW9kZTogc3RyaW5nO1xuICAgIHNlbGVjdGlvbjogYW55O1xuICAgIHByZXNlcnZlU3BhY2U6IGJvb2xlYW47XG4gICAgc2VsZWN0aW9uQ2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvbk5vZGVTZWxlY3Q6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uTm9kZVVuc2VsZWN0OiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvbk5vZGVFeHBhbmQ6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uTm9kZUNvbGxhcHNlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICB0ZW1wbGF0ZXM6IFF1ZXJ5TGlzdDxhbnk+O1xuICAgIHRlbXBsYXRlTWFwOiBhbnk7XG4gICAgY29uc3RydWN0b3IoZWw6IEVsZW1lbnRSZWYpO1xuICAgIHJlYWRvbmx5IHJvb3Q6IFRyZWVOb2RlO1xuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkO1xuICAgIGdldFRlbXBsYXRlRm9yTm9kZShub2RlOiBUcmVlTm9kZSk6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgb25Ob2RlQ2xpY2soZXZlbnQ6IEV2ZW50LCBub2RlOiBUcmVlTm9kZSk6IHZvaWQ7XG4gICAgZmluZEluZGV4SW5TZWxlY3Rpb24obm9kZTogVHJlZU5vZGUpOiBudW1iZXI7XG4gICAgaXNTZWxlY3RlZChub2RlOiBUcmVlTm9kZSk6IGJvb2xlYW47XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBPcmdhbml6YXRpb25DaGFydE1vZHVsZSB7XG59XG4iXX0=