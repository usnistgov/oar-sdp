import { ElementRef, OnInit, AfterContentInit, EventEmitter, QueryList, TemplateRef, OnChanges, SimpleChanges } from '@angular/core';
import { BlockableUI } from 'primeng/api';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from 'primeng/api';
import * as ɵngcc3 from 'primeng/paginator';
export declare class DataView implements OnInit, AfterContentInit, BlockableUI, OnChanges {
    el: ElementRef;
    layout: string;
    paginator: boolean;
    rows: number;
    totalRecords: number;
    pageLinks: number;
    rowsPerPageOptions: any[];
    paginatorPosition: string;
    alwaysShowPaginator: boolean;
    paginatorDropdownAppendTo: any;
    paginatorDropdownScrollHeight: string;
    currentPageReportTemplate: string;
    showCurrentPageReport: boolean;
    lazy: boolean;
    emptyMessage: string;
    onLazyLoad: EventEmitter<any>;
    style: any;
    styleClass: string;
    trackBy: Function;
    filterBy: string;
    filterLocale: string;
    loading: boolean;
    loadingIcon: string;
    first: number;
    sortField: string;
    sortOrder: number;
    value: any[];
    onPage: EventEmitter<any>;
    onSort: EventEmitter<any>;
    onChangeLayout: EventEmitter<any>;
    header: any;
    footer: any;
    templates: QueryList<any>;
    _value: any[];
    listItemTemplate: TemplateRef<any>;
    gridItemTemplate: TemplateRef<any>;
    itemTemplate: TemplateRef<any>;
    paginatorLeftTemplate: TemplateRef<any>;
    paginatorRightTemplate: TemplateRef<any>;
    filteredValue: any[];
    filterValue: string;
    initialized: boolean;
    constructor(el: ElementRef);
    ngOnInit(): void;
    ngOnChanges(simpleChanges: SimpleChanges): void;
    ngAfterContentInit(): void;
    updateItemTemplate(): void;
    changeLayout(layout: string): void;
    updateTotalRecords(): void;
    paginate(event: any): void;
    sort(): void;
    isEmpty(): boolean;
    createLazyLoadMetadata(): any;
    getBlockableElement(): HTMLElement;
    filter(filter: string, filterMatchMode?: string): void;
    hasFilter(): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DataView, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DataView, "p-dataView", never, { "layout": "layout"; "pageLinks": "pageLinks"; "paginatorPosition": "paginatorPosition"; "alwaysShowPaginator": "alwaysShowPaginator"; "paginatorDropdownScrollHeight": "paginatorDropdownScrollHeight"; "currentPageReportTemplate": "currentPageReportTemplate"; "emptyMessage": "emptyMessage"; "trackBy": "trackBy"; "loadingIcon": "loadingIcon"; "first": "first"; "totalRecords": "totalRecords"; "rows": "rows"; "paginator": "paginator"; "rowsPerPageOptions": "rowsPerPageOptions"; "paginatorDropdownAppendTo": "paginatorDropdownAppendTo"; "showCurrentPageReport": "showCurrentPageReport"; "lazy": "lazy"; "style": "style"; "styleClass": "styleClass"; "filterBy": "filterBy"; "filterLocale": "filterLocale"; "loading": "loading"; "sortField": "sortField"; "sortOrder": "sortOrder"; "value": "value"; }, { "onLazyLoad": "onLazyLoad"; "onPage": "onPage"; "onSort": "onSort"; "onChangeLayout": "onChangeLayout"; }, ["header", "footer", "templates"], ["p-header", "p-footer"]>;
}
export declare class DataViewLayoutOptions {
    dv: DataView;
    style: any;
    styleClass: string;
    constructor(dv: DataView);
    changeLayout(event: Event, layout: string): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DataViewLayoutOptions, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DataViewLayoutOptions, "p-dataViewLayoutOptions", never, { "style": "style"; "styleClass": "styleClass"; }, {}, never, never>;
}
export declare class DataViewModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<DataViewModule, [typeof DataView, typeof DataViewLayoutOptions], [typeof ɵngcc1.CommonModule, typeof ɵngcc2.SharedModule, typeof ɵngcc3.PaginatorModule], [typeof DataView, typeof ɵngcc2.SharedModule, typeof DataViewLayoutOptions]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<DataViewModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YXZpZXcuZC50cyIsInNvdXJjZXMiOlsiZGF0YXZpZXcuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBeURBOzs7Ozs7Ozs7QUFPQTs7OztBQUVBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgT25Jbml0LCBBZnRlckNvbnRlbnRJbml0LCBFdmVudEVtaXR0ZXIsIFF1ZXJ5TGlzdCwgVGVtcGxhdGVSZWYsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQmxvY2thYmxlVUkgfSBmcm9tICdwcmltZW5nL2FwaSc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBEYXRhVmlldyBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJDb250ZW50SW5pdCwgQmxvY2thYmxlVUksIE9uQ2hhbmdlcyB7XG4gICAgZWw6IEVsZW1lbnRSZWY7XG4gICAgbGF5b3V0OiBzdHJpbmc7XG4gICAgcGFnaW5hdG9yOiBib29sZWFuO1xuICAgIHJvd3M6IG51bWJlcjtcbiAgICB0b3RhbFJlY29yZHM6IG51bWJlcjtcbiAgICBwYWdlTGlua3M6IG51bWJlcjtcbiAgICByb3dzUGVyUGFnZU9wdGlvbnM6IGFueVtdO1xuICAgIHBhZ2luYXRvclBvc2l0aW9uOiBzdHJpbmc7XG4gICAgYWx3YXlzU2hvd1BhZ2luYXRvcjogYm9vbGVhbjtcbiAgICBwYWdpbmF0b3JEcm9wZG93bkFwcGVuZFRvOiBhbnk7XG4gICAgcGFnaW5hdG9yRHJvcGRvd25TY3JvbGxIZWlnaHQ6IHN0cmluZztcbiAgICBjdXJyZW50UGFnZVJlcG9ydFRlbXBsYXRlOiBzdHJpbmc7XG4gICAgc2hvd0N1cnJlbnRQYWdlUmVwb3J0OiBib29sZWFuO1xuICAgIGxhenk6IGJvb2xlYW47XG4gICAgZW1wdHlNZXNzYWdlOiBzdHJpbmc7XG4gICAgb25MYXp5TG9hZDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgc3R5bGU6IGFueTtcbiAgICBzdHlsZUNsYXNzOiBzdHJpbmc7XG4gICAgdHJhY2tCeTogRnVuY3Rpb247XG4gICAgZmlsdGVyQnk6IHN0cmluZztcbiAgICBmaWx0ZXJMb2NhbGU6IHN0cmluZztcbiAgICBsb2FkaW5nOiBib29sZWFuO1xuICAgIGxvYWRpbmdJY29uOiBzdHJpbmc7XG4gICAgZmlyc3Q6IG51bWJlcjtcbiAgICBzb3J0RmllbGQ6IHN0cmluZztcbiAgICBzb3J0T3JkZXI6IG51bWJlcjtcbiAgICB2YWx1ZTogYW55W107XG4gICAgb25QYWdlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvblNvcnQ6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uQ2hhbmdlTGF5b3V0OiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBoZWFkZXI6IGFueTtcbiAgICBmb290ZXI6IGFueTtcbiAgICB0ZW1wbGF0ZXM6IFF1ZXJ5TGlzdDxhbnk+O1xuICAgIF92YWx1ZTogYW55W107XG4gICAgbGlzdEl0ZW1UZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBncmlkSXRlbVRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIGl0ZW1UZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBwYWdpbmF0b3JMZWZ0VGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgcGFnaW5hdG9yUmlnaHRUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBmaWx0ZXJlZFZhbHVlOiBhbnlbXTtcbiAgICBmaWx0ZXJWYWx1ZTogc3RyaW5nO1xuICAgIGluaXRpYWxpemVkOiBib29sZWFuO1xuICAgIGNvbnN0cnVjdG9yKGVsOiBFbGVtZW50UmVmKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKHNpbXBsZUNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkO1xuICAgIHVwZGF0ZUl0ZW1UZW1wbGF0ZSgpOiB2b2lkO1xuICAgIGNoYW5nZUxheW91dChsYXlvdXQ6IHN0cmluZyk6IHZvaWQ7XG4gICAgdXBkYXRlVG90YWxSZWNvcmRzKCk6IHZvaWQ7XG4gICAgcGFnaW5hdGUoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgc29ydCgpOiB2b2lkO1xuICAgIGlzRW1wdHkoKTogYm9vbGVhbjtcbiAgICBjcmVhdGVMYXp5TG9hZE1ldGFkYXRhKCk6IGFueTtcbiAgICBnZXRCbG9ja2FibGVFbGVtZW50KCk6IEhUTUxFbGVtZW50O1xuICAgIGZpbHRlcihmaWx0ZXI6IHN0cmluZywgZmlsdGVyTWF0Y2hNb2RlPzogc3RyaW5nKTogdm9pZDtcbiAgICBoYXNGaWx0ZXIoKTogYm9vbGVhbjtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIERhdGFWaWV3TGF5b3V0T3B0aW9ucyB7XG4gICAgZHY6IERhdGFWaWV3O1xuICAgIHN0eWxlOiBhbnk7XG4gICAgc3R5bGVDbGFzczogc3RyaW5nO1xuICAgIGNvbnN0cnVjdG9yKGR2OiBEYXRhVmlldyk7XG4gICAgY2hhbmdlTGF5b3V0KGV2ZW50OiBFdmVudCwgbGF5b3V0OiBzdHJpbmcpOiB2b2lkO1xufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRGF0YVZpZXdNb2R1bGUge1xufVxuIl19