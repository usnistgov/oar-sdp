{"version":3,"file":"picklist.d.ts","sources":["picklist.d.ts"],"names":[],"mappingssourcesContent":["import { ElementRef, AfterContentInit, AfterViewChecked, QueryList, TemplateRef, EventEmitter, ChangeDetectorRef } from '@angular/core';\nexport declare class PickList implements AfterViewChecked, AfterContentInit {\n    el: ElementRef;\n    cd: ChangeDetectorRef;\n    source: any[];\n    target: any[];\n    sourceHeader: string;\n    targetHeader: string;\n    responsive: boolean;\n    filterBy: string;\n    filterLocale: string;\n    trackBy: Function;\n    sourceTrackBy: Function;\n    targetTrackBy: Function;\n    showSourceFilter: boolean;\n    showTargetFilter: boolean;\n    metaKeySelection: boolean;\n    dragdrop: boolean;\n    style: any;\n    styleClass: string;\n    sourceStyle: any;\n    targetStyle: any;\n    showSourceControls: boolean;\n    showTargetControls: boolean;\n    sourceFilterPlaceholder: string;\n    targetFilterPlaceholder: string;\n    disabled: boolean;\n    ariaSourceFilterLabel: string;\n    ariaTargetFilterLabel: string;\n    filterMatchMode: string;\n    onMoveToSource: EventEmitter<any>;\n    onMoveAllToSource: EventEmitter<any>;\n    onMoveAllToTarget: EventEmitter<any>;\n    onMoveToTarget: EventEmitter<any>;\n    onSourceReorder: EventEmitter<any>;\n    onTargetReorder: EventEmitter<any>;\n    onSourceSelect: EventEmitter<any>;\n    onTargetSelect: EventEmitter<any>;\n    onSourceFilter: EventEmitter<any>;\n    onTargetFilter: EventEmitter<any>;\n    listViewSourceChild: ElementRef;\n    listViewTargetChild: ElementRef;\n    sourceFilterViewChild: ElementRef;\n    targetFilterViewChild: ElementRef;\n    templates: QueryList<any>;\n    itemTemplate: TemplateRef<any>;\n    visibleOptionsSource: any[];\n    visibleOptionsTarget: any[];\n    selectedItemsSource: any[];\n    selectedItemsTarget: any[];\n    reorderedListElement: any;\n    draggedItemIndexSource: number;\n    draggedItemIndexTarget: number;\n    dragOverItemIndexSource: number;\n    dragOverItemIndexTarget: number;\n    dragging: boolean;\n    movedUp: boolean;\n    movedDown: boolean;\n    itemTouched: boolean;\n    filterValueSource: string;\n    filterValueTarget: string;\n    fromListType: number;\n    toListType: number;\n    onListItemDroppoint: boolean;\n    listHighlightTarget: boolean;\n    listHighlightSource: boolean;\n    emptyMessageSourceTemplate: TemplateRef<any>;\n    emptyMessageTargetTemplate: TemplateRef<any>;\n    readonly SOURCE_LIST = -1;\n    readonly TARGET_LIST = 1;\n    constructor(el: ElementRef, cd: ChangeDetectorRef);\n    ngAfterContentInit(): void;\n    ngAfterViewChecked(): void;\n    onItemClick(event: any, item: any, selectedItems: any[], callback: EventEmitter<any>): void;\n    onSourceItemDblClick(): void;\n    onTargetItemDblClick(): void;\n    onFilter(event: KeyboardEvent, data: any[], listType: number): void;\n    filter(query: string, data: any[], listType: number): void;\n    isItemVisible(item: any, listType: number): boolean;\n    isVisibleInList(data: any[], item: any, filterValue: string): boolean;\n    onItemTouchEnd(event: any): void;\n    private sortByIndexInList;\n    moveUp(listElement: any, list: any, selectedItems: any, callback: any): void;\n    moveTop(listElement: any, list: any, selectedItems: any, callback: any): void;\n    moveDown(listElement: any, list: any, selectedItems: any, callback: any): void;\n    moveBottom(listElement: any, list: any, selectedItems: any, callback: any): void;\n    moveRight(): void;\n    moveAllRight(): void;\n    moveLeft(): void;\n    moveAllLeft(): void;\n    isSelected(item: any, selectedItems: any[]): boolean;\n    findIndexInSelection(item: any, selectedItems: any[]): number;\n    findIndexInList(item: any, list: any): number;\n    onDragStart(event: DragEvent, index: number, listType: number): void;\n    onDragOver(event: DragEvent, index: number, listType: number): void;\n    onDragLeave(event: DragEvent, listType: number): void;\n    onDrop(event: DragEvent, index: number, listType: number): void;\n    onDragEnd(event: DragEvent): void;\n    onListDrop(event: DragEvent, listType: number): void;\n    insert(fromIndex: any, fromList: any, toIndex: any, toList: any, callback: any): void;\n    onListMouseMove(event: MouseEvent, listType: number): void;\n    onListDragLeave(): void;\n    resetFilter(): void;\n    onItemKeydown(event: KeyboardEvent, item: any, selectedItems: any[], callback: EventEmitter<any>): void;\n    findNextItem(item: any): any;\n    findPrevItem(item: any): any;\n}\nexport declare class PickListModule {\n}\n"]}