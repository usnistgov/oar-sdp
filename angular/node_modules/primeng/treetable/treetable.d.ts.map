{"version":3,"file":"treetable.d.ts","sources":["treetable.d.ts"],"names":[],"mappingssourcesContent":["import { AfterContentInit, OnInit, OnDestroy, EventEmitter, TemplateRef, QueryList, ElementRef, NgZone, AfterViewInit, OnChanges, SimpleChanges, ChangeDetectorRef } from '@angular/core';\nimport { TreeNode } from 'primeng/api';\nimport { Subscription } from 'rxjs';\nimport { PrimeTemplate } from 'primeng/api';\nimport { SortMeta } from 'primeng/api';\nimport { BlockableUI } from 'primeng/api';\nimport { FilterMetadata } from 'primeng/api';\nimport { CdkVirtualScrollViewport } from '@angular/cdk/scrolling';\nexport declare class TreeTableService {\n    private sortSource;\n    private selectionSource;\n    private contextMenuSource;\n    private uiUpdateSource;\n    private totalRecordsSource;\n    sortSource$: import(\"rxjs\").Observable<SortMeta | SortMeta[]>;\n    selectionSource$: import(\"rxjs\").Observable<unknown>;\n    contextMenuSource$: import(\"rxjs\").Observable<any>;\n    uiUpdateSource$: import(\"rxjs\").Observable<any>;\n    totalRecordsSource$: import(\"rxjs\").Observable<any>;\n    onSort(sortMeta: SortMeta | SortMeta[]): void;\n    onSelectionChange(): void;\n    onContextMenu(node: any): void;\n    onUIUpdate(value: any): void;\n    onTotalRecordsChange(value: number): void;\n}\nexport declare class TreeTable implements AfterContentInit, OnInit, OnDestroy, BlockableUI, OnChanges {\n    el: ElementRef;\n    zone: NgZone;\n    tableService: TreeTableService;\n    columns: any[];\n    style: any;\n    styleClass: string;\n    tableStyle: any;\n    tableStyleClass: string;\n    autoLayout: boolean;\n    lazy: boolean;\n    lazyLoadOnInit: boolean;\n    paginator: boolean;\n    rows: number;\n    first: number;\n    pageLinks: number;\n    rowsPerPageOptions: any[];\n    alwaysShowPaginator: boolean;\n    paginatorPosition: string;\n    paginatorDropdownAppendTo: any;\n    currentPageReportTemplate: string;\n    showCurrentPageReport: boolean;\n    showJumpToPageDropdown: boolean;\n    showPageLinks: boolean;\n    defaultSortOrder: number;\n    sortMode: string;\n    resetPageOnSort: boolean;\n    customSort: boolean;\n    selectionMode: string;\n    selectionChange: EventEmitter<any>;\n    contextMenuSelection: any;\n    contextMenuSelectionChange: EventEmitter<any>;\n    contextMenuSelectionMode: string;\n    dataKey: string;\n    metaKeySelection: boolean;\n    compareSelectionBy: string;\n    rowHover: boolean;\n    loading: boolean;\n    loadingIcon: string;\n    showLoader: boolean;\n    scrollable: boolean;\n    scrollHeight: string;\n    virtualScroll: boolean;\n    virtualScrollDelay: number;\n    virtualRowHeight: number;\n    minBufferPx: number;\n    maxBufferPx: number;\n    frozenWidth: string;\n    frozenColumns: any[];\n    resizableColumns: boolean;\n    columnResizeMode: string;\n    reorderableColumns: boolean;\n    contextMenu: any;\n    rowTrackBy: Function;\n    filters: {\n        [s: string]: FilterMetadata;\n    };\n    globalFilterFields: string[];\n    filterDelay: number;\n    filterMode: string;\n    filterLocale: string;\n    onFilter: EventEmitter<any>;\n    onNodeExpand: EventEmitter<any>;\n    onNodeCollapse: EventEmitter<any>;\n    onPage: EventEmitter<any>;\n    onSort: EventEmitter<any>;\n    onLazyLoad: EventEmitter<any>;\n    sortFunction: EventEmitter<any>;\n    onColResize: EventEmitter<any>;\n    onColReorder: EventEmitter<any>;\n    onNodeSelect: EventEmitter<any>;\n    onNodeUnselect: EventEmitter<any>;\n    onContextMenuSelect: EventEmitter<any>;\n    onHeaderCheckboxToggle: EventEmitter<any>;\n    onEditInit: EventEmitter<any>;\n    onEditComplete: EventEmitter<any>;\n    onEditCancel: EventEmitter<any>;\n    containerViewChild: ElementRef;\n    resizeHelperViewChild: ElementRef;\n    reorderIndicatorUpViewChild: ElementRef;\n    reorderIndicatorDownViewChild: ElementRef;\n    tableViewChild: ElementRef;\n    scrollableViewChild: any;\n    scrollableFrozenViewChild: any;\n    templates: QueryList<PrimeTemplate>;\n    _value: TreeNode[];\n    serializedValue: any[];\n    _totalRecords: number;\n    _multiSortMeta: SortMeta[];\n    _sortField: string;\n    _sortOrder: number;\n    filteredNodes: any[];\n    filterTimeout: any;\n    colGroupTemplate: TemplateRef<any>;\n    captionTemplate: TemplateRef<any>;\n    headerTemplate: TemplateRef<any>;\n    bodyTemplate: TemplateRef<any>;\n    loadingBodyTemplate: TemplateRef<any>;\n    footerTemplate: TemplateRef<any>;\n    summaryTemplate: TemplateRef<any>;\n    emptyMessageTemplate: TemplateRef<any>;\n    paginatorLeftTemplate: TemplateRef<any>;\n    paginatorRightTemplate: TemplateRef<any>;\n    frozenHeaderTemplate: TemplateRef<any>;\n    frozenBodyTemplate: TemplateRef<any>;\n    frozenFooterTemplate: TemplateRef<any>;\n    frozenColGroupTemplate: TemplateRef<any>;\n    lastResizerHelperX: number;\n    reorderIconWidth: number;\n    reorderIconHeight: number;\n    draggedColumn: any;\n    dropPosition: number;\n    preventSelectionSetterPropagation: boolean;\n    _selection: any;\n    selectionKeys: any;\n    rowTouched: boolean;\n    editingCell: Element;\n    editingCellClick: boolean;\n    documentEditListener: any;\n    initialized: boolean;\n    toggleRowIndex: number;\n    ngOnInit(): void;\n    ngAfterContentInit(): void;\n    constructor(el: ElementRef, zone: NgZone, tableService: TreeTableService);\n    ngOnChanges(simpleChange: SimpleChanges): void;\n    get value(): any[];\n    set value(val: any[]);\n    updateSerializedValue(): void;\n    serializeNodes(parent: any, nodes: any, level: any, visible: any): void;\n    serializePageNodes(): void;\n    get totalRecords(): number;\n    set totalRecords(val: number);\n    get sortField(): string;\n    set sortField(val: string);\n    get sortOrder(): number;\n    set sortOrder(val: number);\n    get multiSortMeta(): SortMeta[];\n    set multiSortMeta(val: SortMeta[]);\n    get selection(): any;\n    set selection(val: any);\n    updateSelectionKeys(): void;\n    onPageChange(event: any): void;\n    sort(event: any): void;\n    sortSingle(): void;\n    sortNodes(nodes: any): void;\n    sortMultiple(): void;\n    sortMultipleNodes(nodes: any): void;\n    multisortField(node1: any, node2: any, multiSortMeta: any, index: any): any;\n    getSortMeta(field: string): SortMeta;\n    isSorted(field: string): boolean;\n    createLazyLoadMetadata(): any;\n    resetScrollTop(): void;\n    scrollToVirtualIndex(index: number): void;\n    scrollTo(options: any): void;\n    isEmpty(): boolean;\n    getBlockableElement(): HTMLElement;\n    onColumnResizeBegin(event: any): void;\n    onColumnResize(event: any): void;\n    onColumnResizeEnd(event: any, column: any): void;\n    findParentScrollableView(column: any): any;\n    resizeColGroup(table: any, resizeColumnIndex: any, newColumnWidth: any, nextColumnWidth: any): void;\n    onColumnDragStart(event: any, columnElement: any): void;\n    onColumnDragEnter(event: any, dropHeader: any): void;\n    onColumnDragLeave(event: any): void;\n    onColumnDrop(event: any, dropColumn: any): void;\n    handleRowClick(event: any): void;\n    handleRowTouchEnd(event: any): void;\n    handleRowRightClick(event: any): void;\n    toggleNodeWithCheckbox(event: any): void;\n    toggleNodesWithCheckbox(event: Event, check: boolean): void;\n    propagateSelectionUp(node: TreeNode, select: boolean): void;\n    propagateSelectionDown(node: TreeNode, select: boolean): void;\n    isSelected(node: any): boolean;\n    findIndexInSelection(node: any): number;\n    isSingleSelectionMode(): boolean;\n    isMultipleSelectionMode(): boolean;\n    equals(node1: any, node2: any): boolean;\n    filter(value: any, field: any, matchMode: any): void;\n    filterGlobal(value: any, matchMode: any): void;\n    isFilterBlank(filter: any): boolean;\n    _filter(): void;\n    findFilteredNodes(node: any, paramsWithoutNode: any): boolean;\n    isFilterMatched(node: any, { filterField, filterValue, filterConstraint, isStrictMode }: {\n        filterField: any;\n        filterValue: any;\n        filterConstraint: any;\n        isStrictMode: any;\n    }): boolean;\n    isNodeLeaf(node: any): boolean;\n    hasFilter(): boolean;\n    reset(): void;\n    updateEditingCell(cell: any): void;\n    isEditingCellValid(): boolean;\n    bindDocumentEditListener(): void;\n    unbindDocumentEditListener(): void;\n    ngOnDestroy(): void;\n}\nexport declare class TTBody {\n    tt: TreeTable;\n    treeTableService: TreeTableService;\n    cd: ChangeDetectorRef;\n    columns: any[];\n    template: TemplateRef<any>;\n    frozen: boolean;\n    subscription: Subscription;\n    constructor(tt: TreeTable, treeTableService: TreeTableService, cd: ChangeDetectorRef);\n    ngOnDestroy(): void;\n}\nexport declare class TTScrollableView implements AfterViewInit, OnDestroy {\n    tt: TreeTable;\n    el: ElementRef;\n    zone: NgZone;\n    columns: any[];\n    frozen: boolean;\n    scrollHeaderViewChild: ElementRef;\n    scrollHeaderBoxViewChild: ElementRef;\n    scrollBodyViewChild: ElementRef;\n    scrollTableViewChild: ElementRef;\n    scrollLoadingTableViewChild: ElementRef;\n    scrollFooterViewChild: ElementRef;\n    scrollFooterBoxViewChild: ElementRef;\n    scrollableAlignerViewChild: ElementRef;\n    virtualScrollBody: CdkVirtualScrollViewport;\n    headerScrollListener: any;\n    bodyScrollListener: any;\n    footerScrollListener: any;\n    frozenSiblingBody: Element;\n    totalRecordsSubscription: Subscription;\n    _scrollHeight: string;\n    preventBodyScrollPropagation: boolean;\n    get scrollHeight(): string;\n    set scrollHeight(val: string);\n    constructor(tt: TreeTable, el: ElementRef, zone: NgZone);\n    ngAfterViewInit(): void;\n    bindEvents(): void;\n    unbindEvents(): void;\n    onHeaderScroll(): void;\n    onFooterScroll(): void;\n    onBodyScroll(event: any): void;\n    scrollToVirtualIndex(index: number): void;\n    scrollTo(options: any): void;\n    ngOnDestroy(): void;\n}\nexport declare class TTSortableColumn implements OnInit, OnDestroy {\n    tt: TreeTable;\n    field: string;\n    ttSortableColumnDisabled: boolean;\n    sorted: boolean;\n    subscription: Subscription;\n    constructor(tt: TreeTable);\n    ngOnInit(): void;\n    updateSortState(): void;\n    onClick(event: MouseEvent): void;\n    onEnterKey(event: MouseEvent): void;\n    isEnabled(): boolean;\n    ngOnDestroy(): void;\n}\nexport declare class TTSortIcon implements OnInit, OnDestroy {\n    tt: TreeTable;\n    cd: ChangeDetectorRef;\n    field: string;\n    ariaLabelDesc: string;\n    ariaLabelAsc: string;\n    subscription: Subscription;\n    sortOrder: number;\n    constructor(tt: TreeTable, cd: ChangeDetectorRef);\n    ngOnInit(): void;\n    onClick(event: any): void;\n    updateSortState(): void;\n    ngOnDestroy(): void;\n}\nexport declare class TTResizableColumn implements AfterViewInit, OnDestroy {\n    tt: TreeTable;\n    el: ElementRef;\n    zone: NgZone;\n    ttResizableColumnDisabled: boolean;\n    resizer: HTMLSpanElement;\n    resizerMouseDownListener: any;\n    documentMouseMoveListener: any;\n    documentMouseUpListener: any;\n    constructor(tt: TreeTable, el: ElementRef, zone: NgZone);\n    ngAfterViewInit(): void;\n    bindDocumentEvents(): void;\n    unbindDocumentEvents(): void;\n    onMouseDown(event: Event): void;\n    onDocumentMouseMove(event: Event): void;\n    onDocumentMouseUp(event: Event): void;\n    isEnabled(): boolean;\n    ngOnDestroy(): void;\n}\nexport declare class TTReorderableColumn implements AfterViewInit, OnDestroy {\n    tt: TreeTable;\n    el: ElementRef;\n    zone: NgZone;\n    ttReorderableColumnDisabled: boolean;\n    dragStartListener: any;\n    dragOverListener: any;\n    dragEnterListener: any;\n    dragLeaveListener: any;\n    mouseDownListener: any;\n    constructor(tt: TreeTable, el: ElementRef, zone: NgZone);\n    ngAfterViewInit(): void;\n    bindEvents(): void;\n    unbindEvents(): void;\n    onMouseDown(event: any): void;\n    onDragStart(event: any): void;\n    onDragOver(event: any): void;\n    onDragEnter(event: any): void;\n    onDragLeave(event: any): void;\n    onDrop(event: any): void;\n    isEnabled(): boolean;\n    ngOnDestroy(): void;\n}\nexport declare class TTSelectableRow implements OnInit, OnDestroy {\n    tt: TreeTable;\n    tableService: TreeTableService;\n    rowNode: any;\n    ttSelectableRowDisabled: boolean;\n    selected: boolean;\n    subscription: Subscription;\n    constructor(tt: TreeTable, tableService: TreeTableService);\n    ngOnInit(): void;\n    onClick(event: Event): void;\n    onEnterKey(event: KeyboardEvent): void;\n    onTouchEnd(event: Event): void;\n    isEnabled(): boolean;\n    ngOnDestroy(): void;\n}\nexport declare class TTSelectableRowDblClick implements OnInit, OnDestroy {\n    tt: TreeTable;\n    tableService: TreeTableService;\n    rowNode: any;\n    ttSelectableRowDisabled: boolean;\n    selected: boolean;\n    subscription: Subscription;\n    constructor(tt: TreeTable, tableService: TreeTableService);\n    ngOnInit(): void;\n    onClick(event: Event): void;\n    isEnabled(): boolean;\n    ngOnDestroy(): void;\n}\nexport declare class TTContextMenuRow {\n    tt: TreeTable;\n    tableService: TreeTableService;\n    private el;\n    rowNode: any;\n    ttContextMenuRowDisabled: boolean;\n    selected: boolean;\n    subscription: Subscription;\n    constructor(tt: TreeTable, tableService: TreeTableService, el: ElementRef);\n    onContextMenu(event: Event): void;\n    isEnabled(): boolean;\n    ngOnDestroy(): void;\n}\nexport declare class TTCheckbox {\n    tt: TreeTable;\n    tableService: TreeTableService;\n    cd: ChangeDetectorRef;\n    disabled: boolean;\n    rowNode: any;\n    boxViewChild: ElementRef;\n    checked: boolean;\n    subscription: Subscription;\n    constructor(tt: TreeTable, tableService: TreeTableService, cd: ChangeDetectorRef);\n    ngOnInit(): void;\n    onClick(event: Event): void;\n    onFocus(): void;\n    onBlur(): void;\n    ngOnDestroy(): void;\n}\nexport declare class TTHeaderCheckbox {\n    tt: TreeTable;\n    tableService: TreeTableService;\n    private cd;\n    boxViewChild: ElementRef;\n    checked: boolean;\n    disabled: boolean;\n    selectionChangeSubscription: Subscription;\n    valueChangeSubscription: Subscription;\n    constructor(tt: TreeTable, tableService: TreeTableService, cd: ChangeDetectorRef);\n    ngOnInit(): void;\n    onClick(event: Event, checked: any): void;\n    onFocus(): void;\n    onBlur(): void;\n    ngOnDestroy(): void;\n    updateCheckedState(): boolean;\n}\nexport declare class TTEditableColumn implements AfterViewInit {\n    tt: TreeTable;\n    el: ElementRef;\n    zone: NgZone;\n    data: any;\n    field: any;\n    ttEditableColumnDisabled: boolean;\n    constructor(tt: TreeTable, el: ElementRef, zone: NgZone);\n    ngAfterViewInit(): void;\n    onClick(event: MouseEvent): void;\n    openCell(): void;\n    closeEditingCell(): void;\n    onKeyDown(event: KeyboardEvent): void;\n    findCell(element: any): any;\n    moveToPreviousCell(event: KeyboardEvent): void;\n    moveToNextCell(event: KeyboardEvent): void;\n    findPreviousEditableColumn(cell: Element): any;\n    findNextEditableColumn(cell: Element): any;\n    isEnabled(): boolean;\n}\nexport declare class TreeTableCellEditor implements AfterContentInit {\n    tt: TreeTable;\n    editableColumn: TTEditableColumn;\n    templates: QueryList<PrimeTemplate>;\n    inputTemplate: TemplateRef<any>;\n    outputTemplate: TemplateRef<any>;\n    constructor(tt: TreeTable, editableColumn: TTEditableColumn);\n    ngAfterContentInit(): void;\n}\nexport declare class TTRow {\n    tt: TreeTable;\n    el: ElementRef;\n    zone: NgZone;\n    rowNode: any;\n    constructor(tt: TreeTable, el: ElementRef, zone: NgZone);\n    onKeyDown(event: KeyboardEvent): void;\n    restoreFocus(): void;\n}\nexport declare class TreeTableToggler {\n    tt: TreeTable;\n    rowNode: any;\n    constructor(tt: TreeTable);\n    onClick(event: Event): void;\n}\nexport declare class TreeTableModule {\n}\n"]}