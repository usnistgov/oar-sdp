!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/core"),require("@angular/common"),require("primeng/api"),require("@angular/animations")):"function"==typeof define&&define.amd?define("primeng/panel",["exports","@angular/core","@angular/common","primeng/api","@angular/animations"],t):t(((e=e||self).primeng=e.primeng||{},e.primeng.panel={}),e.ng.core,e.ng.common,e.primeng.api,e.ng.animations)}(this,(function(e,t,n,i,o){"use strict";var a=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,l=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(e,t,n,i);else for(var r=e.length-1;r>=0;r--)(o=e[r])&&(l=(a<3?o(l):a>3?o(t,n,l):o(t,n))||l);return a>3&&l&&Object.defineProperty(t,n,l),l},l=0,r=function(){function e(e){this.el=e,this.collapsed=!1,this.expandIcon="pi pi-plus",this.collapseIcon="pi pi-minus",this.showHeader=!0,this.toggler="icon",this.collapsedChange=new t.EventEmitter,this.onBeforeToggle=new t.EventEmitter,this.onAfterToggle=new t.EventEmitter,this.transitionOptions="400ms cubic-bezier(0.86, 0, 0.07, 1)",this.id="ui-panel-"+l++}return e.prototype.onHeaderClick=function(e){"header"===this.toggler&&this.toggle(e)},e.prototype.onIconClick=function(e){"icon"===this.toggler&&this.toggle(e)},e.prototype.toggle=function(e){if(this.animating)return!1;this.animating=!0,this.onBeforeToggle.emit({originalEvent:e,collapsed:this.collapsed}),this.toggleable&&(this.collapsed?this.expand(e):this.collapse(e)),e.preventDefault()},e.prototype.expand=function(e){this.collapsed=!1,this.collapsedChange.emit(this.collapsed)},e.prototype.collapse=function(e){this.collapsed=!0,this.collapsedChange.emit(this.collapsed)},e.prototype.getBlockableElement=function(){return this.el.nativeElement.children[0]},e.prototype.onToggleDone=function(e){this.animating=!1,this.onAfterToggle.emit({originalEvent:e,collapsed:this.collapsed})},e.ctorParameters=function(){return[{type:t.ElementRef}]},a([t.Input()],e.prototype,"toggleable",void 0),a([t.Input()],e.prototype,"header",void 0),a([t.Input()],e.prototype,"collapsed",void 0),a([t.Input()],e.prototype,"style",void 0),a([t.Input()],e.prototype,"styleClass",void 0),a([t.Input()],e.prototype,"expandIcon",void 0),a([t.Input()],e.prototype,"collapseIcon",void 0),a([t.Input()],e.prototype,"showHeader",void 0),a([t.Input()],e.prototype,"toggler",void 0),a([t.Output()],e.prototype,"collapsedChange",void 0),a([t.Output()],e.prototype,"onBeforeToggle",void 0),a([t.Output()],e.prototype,"onAfterToggle",void 0),a([t.Input()],e.prototype,"transitionOptions",void 0),a([t.ContentChild(i.Footer)],e.prototype,"footerFacet",void 0),e=a([t.Component({selector:"p-panel",template:'\n        <div [attr.id]="id" [ngClass]="\'ui-panel ui-widget ui-widget-content ui-corner-all\'" [ngStyle]="style" [class]="styleClass">\n            <div [ngClass]="{\'ui-panel-titlebar ui-widget-header ui-helper-clearfix ui-corner-all\': true, \'ui-panel-titlebar-clickable\': (toggleable && toggler === \'header\')}" \n                *ngIf="showHeader" (click)="onHeaderClick($event)" [attr.id]="id + \'-titlebar\'">\n                <span class="ui-panel-title" *ngIf="header" [attr.id]="id + \'_header\'">{{header}}</span>\n                <ng-content select="p-header"></ng-content>\n                <a *ngIf="toggleable" [attr.id]="id + \'-label\'" class="ui-panel-titlebar-icon ui-panel-titlebar-toggler ui-corner-all ui-state-default" tabindex="0"\n                    (click)="onIconClick($event)" (keydown.enter)="onIconClick($event)" [attr.aria-controls]="id + \'-content\'" role="tab" [attr.aria-expanded]="!collapsed">\n                    <span [class]="collapsed ? expandIcon : collapseIcon"></span>\n                </a>\n            </div>\n            <div [attr.id]="id + \'-content\'" class="ui-panel-content-wrapper" [@panelContent]="collapsed ? {value: \'hidden\', params: {transitionParams: animating ? transitionOptions : \'0ms\', height: \'0\', opacity:\'0\'}} : {value: \'visible\', params: {transitionParams: animating ? transitionOptions : \'0ms\', height: \'*\', opacity: \'1\'}}" (@panelContent.done)="onToggleDone($event)"\n                [ngClass]="{\'ui-panel-content-wrapper-overflown\': collapsed||animating}"\n                role="region" [attr.aria-hidden]="collapsed" [attr.aria-labelledby]="id  + \'-titlebar\'">\n                <div class="ui-panel-content ui-widget-content">\n                    <ng-content></ng-content>\n                </div>\n                \n                <div class="ui-panel-footer ui-widget-content" *ngIf="footerFacet">\n                    <ng-content select="p-footer"></ng-content>\n                </div>\n            </div>\n        </div>\n    ',animations:[o.trigger("panelContent",[o.state("hidden",o.style({height:"0",opacity:0})),o.state("void",o.style({height:"{{height}}",opacity:"{{opacity}}"}),{params:{height:"0",opacity:"0"}}),o.state("visible",o.style({height:"*",opacity:1})),o.transition("visible <=> hidden",o.animate("{{transitionParams}}")),o.transition("void => hidden",o.animate("{{transitionParams}}")),o.transition("void => visible",o.animate("{{transitionParams}}"))])],changeDetection:t.ChangeDetectionStrategy.Default})],e)}(),p=function(){function e(){}return e=a([t.NgModule({imports:[n.CommonModule],exports:[r,i.SharedModule],declarations:[r]})],e)}();e.Panel=r,e.PanelModule=p,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=primeng-panel.umd.min.js.map