{"version":3,"sources":["ng://primeng/tieredmenu/tieredmenu.ts"],"names":["TieredMenuSub","tieredMenu","cf","renderer","this","autoZIndex","baseZIndex","Object","defineProperty","prototype","_parentActive","value","activeItem","ngAfterViewInit","root","popup","bindDocumentClickListener","onItemMouseEnter","event","item","menuitem","disabled","nextElement","children","nextElementSibling","sublist","style","zIndex","String","DomHandler","zindex","top","left","getOuterWidth","itemClick","preventDefault","url","command","originalEvent","rootItemClick","items","hide","listClick","_this","documentClickListener","listen","parentActive","unbindDocumentClickListener","ngOnDestroy","Inject","args","forwardRef","TieredMenu","ChangeDetectorRef","Renderer2","__decorate","Input","Component","selector","template","__param","el","showTransitionOptions","hideTransitionOptions","toggle","visible","show","preventDocumentDefault","target","currentTarget","onOverlayAnimationStart","toState","container","element","moveOnTop","appendOverlay","absolutePosition","bindDocumentResizeListener","onOverlayHide","appendTo","document","body","appendChild","restoreOverlayAppend","nativeElement","onWindowResize","documentResizeListener","bind","window","addEventListener","unbindDocumentResizeListener","removeEventListener","ElementRef","animations","trigger","state","transform","opacity","transition","animate","changeDetection","ChangeDetectionStrategy","Default","TieredMenuModule","NgModule","imports","CommonModule","RouterModule","exports","declarations"],"mappings":"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","sourcesContent":["import {NgModule,Component,ElementRef,OnDestroy,Input,Renderer2,Inject,forwardRef,ChangeDetectorRef,AfterViewInit,ChangeDetectionStrategy} from '@angular/core';\nimport {trigger,state,style,transition,animate,AnimationEvent} from '@angular/animations';\nimport {CommonModule} from '@angular/common';\nimport {DomHandler} from 'primeng/dom';\nimport {MenuItem} from 'primeng/api';\nimport {RouterModule} from '@angular/router';\n\n@Component({\n    selector: 'p-tieredMenuSub',\n    template: `\n        <ul [ngClass]=\"{'ui-widget-content ui-corner-all ui-shadow ui-submenu-list': !root}\" (click)=\"listClick($event)\" role=\"menubar\">\n            <ng-template ngFor let-child [ngForOf]=\"(root ? item : item.items)\">\n                <li *ngIf=\"child.separator\" class=\"ui-menu-separator ui-widget-content\" [ngClass]=\"{'ui-helper-hidden': child.visible === false}\" role=\"separator\">\n                <li *ngIf=\"!child.separator\" #listItem [ngClass]=\"{'ui-menuitem ui-widget ui-corner-all':true,'ui-menuitem-active':listItem==activeItem,'ui-helper-hidden': child.visible === false}\"\n                    [class]=\"child.styleClass\" [ngStyle]=\"child.style\" role=\"none\"\n                    (mouseenter)=\"onItemMouseEnter($event, listItem, child)\">\n                    <a *ngIf=\"!child.routerLink\" [attr.href]=\"child.url\" class=\"ui-menuitem-link ui-corner-all\" [attr.target]=\"child.target\" [attr.tabindex]=\"child.disabled ? null : '0'\" [attr.title]=\"child.title\" [attr.id]=\"child.id\" \n                        [ngClass]=\"{'ui-state-disabled':child.disabled}\" (click)=\"itemClick($event, listItem, child)\" role=\"menuitem\" [attr.aria-haspopup]=\"item.items != null\" [attr.aria-expanded]=\"item === activeItem\">\n                        <span class=\"ui-menuitem-icon\" *ngIf=\"child.icon\" [ngClass]=\"child.icon\"></span>\n                        <span class=\"ui-menuitem-text\">{{child.label}}</span>\n                        <span class=\"ui-submenu-icon pi pi-fw pi-caret-right\" *ngIf=\"child.items\"></span>\n                    </a>\n                    <a *ngIf=\"child.routerLink\" [routerLink]=\"child.routerLink\" role=\"menuitem\" [queryParams]=\"child.queryParams\" [routerLinkActive]=\"'ui-menuitem-link-active'\" role=\"menuitem\" [attr.tabindex]=\"child.disabled ? null : '0'\"\n                        [routerLinkActiveOptions]=\"child.routerLinkActiveOptions||{exact:false}\"\n                        class=\"ui-menuitem-link ui-corner-all\" [attr.target]=\"child.target\" [attr.title]=\"child.title\" [attr.id]=\"child.id\"\n                        [ngClass]=\"{'ui-state-disabled':child.disabled}\" (click)=\"itemClick($event, listItem, child)\"\n                        [fragment]=\"child.fragment\" [queryParamsHandling]=\"child.queryParamsHandling\" [preserveFragment]=\"child.preserveFragment\" [skipLocationChange]=\"child.skipLocationChange\" [replaceUrl]=\"child.replaceUrl\" [state]=\"child.state\">\n                        <span class=\"ui-menuitem-icon\" *ngIf=\"child.icon\" [ngClass]=\"child.icon\"></span>\n                        <span class=\"ui-menuitem-text\">{{child.label}}</span>\n                        <span class=\"ui-submenu-icon pi pi-fw pi-caret-right\" *ngIf=\"child.items\"></span>\n                    </a>\n                    <p-tieredMenuSub class=\"ui-submenu\" [item]=\"child\" *ngIf=\"child.items\" [baseZIndex]=\"baseZIndex\" [parentActive]=\"listItem==activeItem\" [autoZIndex]=\"autoZIndex\"></p-tieredMenuSub>\n                </li>\n            </ng-template>\n        </ul>\n    `\n})\nexport class TieredMenuSub implements AfterViewInit, OnDestroy {\n\n    @Input() item: MenuItem;\n    \n    @Input() root: boolean;\n\n    @Input() autoZIndex: boolean = true;\n    \n    @Input() baseZIndex: number = 0;\n\n    @Input() get parentActive(): boolean {\n        return this._parentActive;\n    }\n    set parentActive(value) {\n        this._parentActive = value;\n\n        if (!value) {\n            this.activeItem = null;\n        }\n    }\n\n    tieredMenu: TieredMenu;\n\n    _parentActive: boolean;\n\n    rootItemClick: boolean;\n\n    documentClickListener: any;\n\n    ngAfterViewInit() {\n        if (this.root && !this.tieredMenu.popup) {\n            this.bindDocumentClickListener();\n        }\n    }\n    \n    constructor(@Inject(forwardRef(() => TieredMenu)) tieredMenu, private cf: ChangeDetectorRef, public renderer: Renderer2) {\n        this.tieredMenu = tieredMenu as TieredMenu;\n    }\n\n    activeItem: HTMLLIElement;\n\n    onItemMouseEnter(event: Event, item: HTMLLIElement, menuitem: MenuItem) {\n        if (this.tieredMenu.popup || (!this.root || this.activeItem)) {\n            if (menuitem.disabled) {\n                return;\n            }\n\n            this.activeItem = item;\n            let nextElement:  HTMLElement =  <HTMLElement> item.children[0].nextElementSibling;\n            if (nextElement) {\n                let sublist:  HTMLElement = <HTMLElement> nextElement.children[0];\n                if (this.autoZIndex) {\n                    sublist.style.zIndex = String(this.baseZIndex + (++DomHandler.zindex));\n                }\n                sublist.style.zIndex = String(++DomHandler.zindex);\n                            \n                sublist.style.top = '0px';\n                sublist.style.left = DomHandler.getOuterWidth(item.children[0]) + 'px';\n            }\n        }\n    }\n    \n    itemClick(event: Event, item: HTMLLIElement, menuitem: MenuItem)Â {\n        if (menuitem.disabled) {\n            event.preventDefault();\n            return true;\n        }\n        \n        if (!menuitem.url) {\n            event.preventDefault();\n        }\n        \n        if (menuitem.command) {            \n            menuitem.command({\n                originalEvent: event,\n                item: menuitem\n            });\n        }\n\n        if (this.root && !this.activeItem && !this.tieredMenu.popup ) {\n            this.activeItem = item;\n            let nextElement:  HTMLElement =  <HTMLElement> item.children[0].nextElementSibling;\n            if (nextElement) {\n                let sublist:  HTMLElement = <HTMLElement> nextElement.children[0];\n                if (this.autoZIndex) {\n                    sublist.style.zIndex = String(this.baseZIndex + (++DomHandler.zindex));\n                }\n                sublist.style.zIndex = String(++DomHandler.zindex);\n                            \n                sublist.style.top = '0px';\n                sublist.style.left = DomHandler.getOuterWidth(item.children[0]) + 'px';\n\n                this.rootItemClick = true;\n            }\n        }\n\n        if (!menuitem.items && this.tieredMenu.popup) {\n            this.tieredMenu.hide();\n        }\n    }\n    \n    listClick(event: Event) {\n        if (!this.rootItemClick) {\n            this.activeItem = null;\n        }\n    }\n\n    bindDocumentClickListener() {\n        if (!this.documentClickListener) {\n            this.documentClickListener = this.renderer.listen('document', 'click', () => {\n                if (!this.rootItemClick) {\n                    this.parentActive = false;\n                    this.activeItem = null;\n                }\n\n                this.rootItemClick = false;\n            });\n        }\n    }\n\n    unbindDocumentClickListener() {\n        if (this.documentClickListener) {\n            this.documentClickListener();\n            this.documentClickListener = null;\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.root && !this.tieredMenu.popup) {\n            this.unbindDocumentClickListener();\n        }\n    }\n}\n\n@Component({\n    selector: 'p-tieredMenu',\n    template: `\n        <div [ngClass]=\"{'ui-tieredmenu ui-widget ui-widget-content ui-corner-all':true, 'ui-tieredmenu-dynamic ui-shadow':popup}\" [class]=\"styleClass\" [ngStyle]=\"style\"\n            [@overlayAnimation]=\"{value: 'visible', params: {showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions}}\" [@.disabled]=\"popup !== true\" \n            (@overlayAnimation.start)=\"onOverlayAnimationStart($event)\" (click)=\"preventDocumentDefault=true\" *ngIf=\"!popup || visible\">\n            <p-tieredMenuSub [item]=\"model\" root=\"root\" [parentActive]=\"parentActive\" [baseZIndex]=\"baseZIndex\" [autoZIndex]=\"autoZIndex\"></p-tieredMenuSub>\n        </div>\n    `,\n    animations: [\n        trigger('overlayAnimation', [\n            state('void', style({\n                transform: 'translateY(5%)',\n                opacity: 0\n            })),\n            state('visible', style({\n                transform: 'translateY(0)',\n                opacity: 1\n            })),\n            transition('void => visible', animate('{{showTransitionParams}}')),\n            transition('visible => void', animate('{{hideTransitionParams}}'))\n        ])\n    ],\n    changeDetection: ChangeDetectionStrategy.Default\n})\nexport class TieredMenu implements OnDestroy {\n\n    @Input() model: MenuItem[];\n\n    @Input() popup: boolean;\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n    \n    @Input() appendTo: any;\n\n    @Input() autoZIndex: boolean = true;\n    \n    @Input() baseZIndex: number = 0;\n\n    @Input() showTransitionOptions: string = '225ms ease-out';\n\n    @Input() hideTransitionOptions: string = '195ms ease-in';\n\n    parentActive: boolean;\n\n    container: HTMLDivElement;\n    \n    documentClickListener: any;\n\n    documentResizeListener: any;\n    \n    preventDocumentDefault: boolean;\n\n    target: any;\n\n    visible: boolean;\n    \n    constructor(public el: ElementRef, public renderer: Renderer2) {}\n    \n    toggle(event) {\n        if (this.visible)\n            this.hide();\n        else\n            this.show(event);\n\n        this.preventDocumentDefault = true;\n    }\n    \n    show(event) {\n        this.target = event.currentTarget;\n        this.visible = true;\n        this.parentActive = true;\n        this.preventDocumentDefault = true;\n    }\n\n    onOverlayAnimationStart(event: AnimationEvent) {\n        switch(event.toState) {\n            case 'visible':\n                if (this.popup) {\n                    this.container = event.element;\n                    this.moveOnTop();\n                    this.appendOverlay();\n                    DomHandler.absolutePosition(this.container, this.target);\n                    this.bindDocumentClickListener();\n                    this.bindDocumentResizeListener();\n                }\n            break;\n\n            case 'void':\n                this.onOverlayHide();\n            break;\n        }\n    }\n    \n    appendOverlay() {\n        if (this.appendTo) {\n            if (this.appendTo === 'body')\n                document.body.appendChild(this.container);\n            else\n                DomHandler.appendChild(this.container, this.appendTo);\n        }\n    }\n\n    restoreOverlayAppend() {\n        if (this.container && this.appendTo) {\n            this.el.nativeElement.appendChild(this.container);\n        }\n    }\n    \n    moveOnTop() {\n        if (this.autoZIndex) {\n            this.container.style.zIndex = String(this.baseZIndex + (++DomHandler.zindex));\n        }\n    }\n\n    hide() {\n        this.visible = false;\n        this.parentActive = false;\n    }\n\n    onWindowResize() {\n        this.hide();\n    }\n    \n    bindDocumentClickListener() {\n        if (!this.documentClickListener) {\n            this.documentClickListener = this.renderer.listen('document', 'click', () => {\n                if (!this.preventDocumentDefault && this.popup) {\n                    this.hide();\n                }\n\n                this.preventDocumentDefault = false;\n            });\n        }\n    }\n\n    unbindDocumentClickListener() {\n        if (this.documentClickListener) {\n            this.documentClickListener();\n            this.documentClickListener = null;\n        }\n    }\n\n    bindDocumentResizeListener() {\n        this.documentResizeListener = this.onWindowResize.bind(this);\n        window.addEventListener('resize', this.documentResizeListener);\n    }\n    \n    unbindDocumentResizeListener() {\n        if (this.documentResizeListener) {\n            window.removeEventListener('resize', this.documentResizeListener);\n            this.documentResizeListener = null;\n        }\n    }\n\n    onOverlayHide() {\n        this.unbindDocumentClickListener();\n        this.unbindDocumentResizeListener();\n        this.preventDocumentDefault = false;\n        this.target = null;\n    }\n    \n    ngOnDestroy() {\n        if (this.popup) {\n            this.restoreOverlayAppend();\n            this.onOverlayHide();\n        }\n    }\n\n}\n\n@NgModule({\n    imports: [CommonModule,RouterModule],\n    exports: [TieredMenu,RouterModule],\n    declarations: [TieredMenu,TieredMenuSub]\n})\nexport class TieredMenuModule { }\n"]}