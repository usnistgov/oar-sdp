{"version":3,"sources":["../../src/app/components/tieredmenu/tieredmenu.ts"],"names":["TieredMenuSub","el","renderer","cd","this","autoZIndex","baseZIndex","leafClick","EventEmitter","menuHoverActive","Object","defineProperty","prototype","_parentActive","value","root","activeItem","onItemMouseEnter","event","item","disabled","mobileActive","preventDefault","onItemClick","url","routerLink","command","originalEvent","items","unbindDocumentClickListener","bindDocumentClickListener","onLeafClick","emit","_this","documentClickListener","nativeElement","contains","target","markForCheck","document","addEventListener","removeEventListener","ngOnDestroy","Component","args","selector","template","encapsulation","ViewEncapsulation","None","ElementRef","Renderer2","ChangeDetectorRef","Input","Output","TieredMenu","showTransitionOptions","hideTransitionOptions","toggle","visible","hide","show","preventDocumentDefault","currentTarget","parentActive","onOverlayAnimationStart","toState","popup","container","element","moveOnTop","appendOverlay","DomHandler","absolutePosition","bindDocumentResizeListener","bindScrollListener","onOverlayHide","appendTo","body","appendChild","restoreOverlayAppend","style","zIndex","String","zindex","onWindowResize","documentTarget","ownerDocument","listen","documentResizeListener","bind","window","unbindDocumentResizeListener","scrollHandler","ConnectedOverlayScrollHandler","unbindScrollListener","destroy","animations","trigger","transition","opacity","transform","animate","changeDetection","ChangeDetectionStrategy","OnPush","NgModule","imports","CommonModule","RouterModule","RippleModule","exports","declarations"],"mappings":"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","sourcesContent":["import { NgModule, Component, ElementRef, Input, Renderer2, OnDestroy,ChangeDetectorRef, ChangeDetectionStrategy, ViewEncapsulation, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ConnectedOverlayScrollHandler, DomHandler } from 'primeng/dom';\nimport { MenuItem } from 'primeng/api';\nimport { RouterModule } from '@angular/router';\nimport { RippleModule } from 'primeng/ripple';  \nimport { animate, style, transition, trigger, AnimationEvent } from '@angular/animations';\n\n@Component({\n    selector: 'p-tieredMenuSub',\n    template: `\n        <ul [ngClass]=\"{'p-submenu-list': !root}\">\n            <ng-template ngFor let-child [ngForOf]=\"(root ? item : item.items)\">\n                <li *ngIf=\"child.separator\" class=\"p-menu-separator\" [ngClass]=\"{'p-hidden': child.visible === false}\">\n                <li *ngIf=\"!child.separator\" #listItem [ngClass]=\"{'p-menuitem':true, 'p-menuitem-active': child === activeItem, 'p-hidden': child.visible === false}\" (mouseenter)=\"onItemMouseEnter($event,child)\">\n                    <a *ngIf=\"!child.routerLink\" [attr.href]=\"child.url\" [attr.data-automationid]=\"child.automationId\" [attr.target]=\"child.target\" [attr.title]=\"child.title\" [attr.id]=\"child.id\" (click)=\"onItemClick($event, child)\"\n                         [ngClass]=\"{'p-menuitem-link':true,'p-disabled':child.disabled}\" [ngStyle]=\"child.style\" [class]=\"child.styleClass\" \n                         [attr.tabindex]=\"child.disabled ? null : '0'\" [attr.aria-haspopup]=\"item.items != null\" [attr.aria-expanded]=\"item === activeItem\" pRipple>\n                        <span class=\"p-menuitem-icon\" *ngIf=\"child.icon\" [ngClass]=\"child.icon\"></span>\n                        <span class=\"p-menuitem-text\" *ngIf=\"child.escape !== false; else htmlLabel\">{{child.label}}</span>\n                        <ng-template #htmlLabel><span class=\"p-menuitem-text\" [innerHTML]=\"child.label\"></span></ng-template>\n                        <span class=\"p-submenu-icon pi pi-angle-right\" *ngIf=\"child.items\"></span>\n                    </a>\n                    <a *ngIf=\"child.routerLink\" [routerLink]=\"child.routerLink\" [attr.data-automationid]=\"child.automationId\" [queryParams]=\"child.queryParams\" [routerLinkActive]=\"'p-menuitem-link-active'\" [routerLinkActiveOptions]=\"child.routerLinkActiveOptions||{exact:false}\"\n                        [attr.target]=\"child.target\" [attr.title]=\"child.title\" [attr.id]=\"child.id\" [attr.tabindex]=\"child.disabled ? null : '0'\" role=\"menuitem\"\n                        (click)=\"onItemClick($event, child)\" [ngClass]=\"{'p-menuitem-link':true,'p-disabled':child.disabled}\" [ngStyle]=\"child.style\" [class]=\"child.styleClass\"\n                        [fragment]=\"child.fragment\" [queryParamsHandling]=\"child.queryParamsHandling\" [preserveFragment]=\"child.preserveFragment\" [skipLocationChange]=\"child.skipLocationChange\" [replaceUrl]=\"child.replaceUrl\" [state]=\"child.state\" pRipple>\n                        <span class=\"p-menuitem-icon\" *ngIf=\"child.icon\" [ngClass]=\"child.icon\"></span>\n                        <span class=\"p-menuitem-text\" *ngIf=\"child.escape !== false; else htmlRouteLabel\">{{child.label}}</span>\n                        <ng-template #htmlRouteLabel><span class=\"p-menuitem-text\" [innerHTML]=\"child.label\"></span></ng-template>\n                        <span class=\"p-submenu-icon pi pi-angle-right\" *ngIf=\"child.items\"></span>\n                    </a>\n                    <p-tieredMenuSub [parentActive]=\"child === activeItem\" [item]=\"child\" *ngIf=\"child.items\" [mobileActive]=\"mobileActive\" [autoDisplay]=\"true\" (leafClick)=\"onLeafClick()\"></p-tieredMenuSub>\n                </li>\n            </ng-template>\n        </ul>\n    `,\n    encapsulation: ViewEncapsulation.None\n})\nexport class TieredMenuSub implements OnDestroy {\n\n    @Input() item: MenuItem;\n\n    @Input() root: boolean;\n\n    @Input() autoDisplay: boolean;\n\n    @Input() autoZIndex: boolean = true;\n\n    @Input() baseZIndex: number = 0;\n\n    @Input() mobileActive: boolean;\n\n    @Input() get parentActive():boolean \n    {\n        return this._parentActive;\n    }\n    set parentActive(value) {\n        if (!this.root) {\n            this._parentActive = value;\n\n            if (!value)\n                this.activeItem = null;\n        }\n    }\n\n    @Output() leafClick: EventEmitter<any> = new EventEmitter();\n\n    _parentActive: boolean;\n\n    documentClickListener: any;\n\n    menuHoverActive: boolean = false;\n\n    activeItem: any;\n\n    constructor(public el: ElementRef, public renderer: Renderer2, private cd: ChangeDetectorRef) { }\n\n    onItemMouseEnter(event, item) {\n        if (item.disabled || this.mobileActive) {\n            event.preventDefault();\n            return;\n        }\n\n        if (this.root) {\n            if (this.activeItem) {\n                this.activeItem = item;\n            }\n        }\n        else {\n            this.activeItem = item;\n        }\n    }\n\n    onItemClick(event, item) {\n        if (item.disabled) {\n            event.preventDefault();\n            return;\n        }\n\n        if (!item.url && !item.routerLink) {\n            event.preventDefault();\n        }\n\n        if (item.command) {\n            item.command({\n                originalEvent: event,\n                item: item\n            });\n        }\n\n        if (item.items) {\n            if (this.activeItem && item === this.activeItem) {\n                this.activeItem = null;\n                this.unbindDocumentClickListener();\n            }\n            else {\n                this.activeItem = item;\n                if (this.root) {\n                    this.bindDocumentClickListener();\n                }\n            }\n        }\n\n        if (!item.items) {\n            this.onLeafClick();\n        }\n    }\n\n    onLeafClick() {\n        this.activeItem = null;\n        if (this.root) {\n            this.unbindDocumentClickListener();\n        }\n\n        this.leafClick.emit();\n    }\n\n    bindDocumentClickListener() {\n        if (!this.documentClickListener) {\n            this.documentClickListener = (event) => {\n                if (this.el && !this.el.nativeElement.contains(event.target)) {\n                    this.activeItem = null;\n                    this.cd.markForCheck();\n                    this.unbindDocumentClickListener();\n                }\n            };\n\n            document.addEventListener('click', this.documentClickListener);\n        }\n    }\n\n    unbindDocumentClickListener() {\n        if (this.documentClickListener) {\n            document.removeEventListener('click', this.documentClickListener);\n            this.documentClickListener = null;\n        }\n    }\n\n    ngOnDestroy() {\n        this.unbindDocumentClickListener();\n    }\n}\n\n@Component({\n    selector: 'p-tieredMenu',\n    template: `\n        <div [ngClass]=\"{'p-tieredmenu p-component':true, 'p-tieredmenu-overlay':popup}\" [class]=\"styleClass\" [ngStyle]=\"style\"\n            [@overlayAnimation]=\"{value: 'visible', params: {showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions}}\" [@.disabled]=\"popup !== true\"\n            (@overlayAnimation.start)=\"onOverlayAnimationStart($event)\" (click)=\"preventDocumentDefault=true\" *ngIf=\"!popup || visible\">\n            <p-tieredMenuSub [item]=\"model\" root=\"root\" [parentActive]=\"parentActive\" [baseZIndex]=\"baseZIndex\" [autoZIndex]=\"autoZIndex\" (leafClick)=\"onLeafClick()\"></p-tieredMenuSub>\n        </div>\n    `,\n    animations: [\n        trigger('overlayAnimation', [\n            transition(':enter', [\n                style({opacity: 0, transform: 'scaleY(0.8)'}),\n                animate('{{showTransitionParams}}')\n              ]),\n              transition(':leave', [\n                animate('{{hideTransitionParams}}', style({ opacity: 0 }))\n              ])\n        ])\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['./tieredmenu.css']\n})\nexport class TieredMenu implements OnDestroy {\n\n    @Input() model: MenuItem[];\n\n    @Input() popup: boolean;\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() appendTo: any;\n\n    @Input() autoZIndex: boolean = true;\n\n    @Input() baseZIndex: number = 0;\n\n    @Input() showTransitionOptions: string = '.12s cubic-bezier(0, 0, 0.2, 1)';\n\n    @Input() hideTransitionOptions: string = '.1s linear';\n\n    parentActive: boolean;\n\n    container: HTMLDivElement;\n\n    documentClickListener: any;\n\n    documentResizeListener: any;\n\n    preventDocumentDefault: boolean;\n\n    scrollHandler: any;\n\n    target: any;\n\n    visible: boolean;\n\n    constructor(public el: ElementRef, public renderer: Renderer2, public cd: ChangeDetectorRef) {}\n\n    toggle(event) {\n        if (this.visible)\n            this.hide();\n        else\n            this.show(event);\n\n        this.preventDocumentDefault = true;\n    }\n\n    show(event) {\n        this.target = event.currentTarget;\n        this.visible = true;\n        this.parentActive = true;\n        this.preventDocumentDefault = true;\n        this.cd.markForCheck();\n    }\n\n    onOverlayAnimationStart(event: AnimationEvent) {\n        switch(event.toState) {\n            case 'visible':\n                if (this.popup) {\n                    this.container = event.element;\n                    this.moveOnTop();\n                    this.appendOverlay();\n                    DomHandler.absolutePosition(this.container, this.target);\n                    this.bindDocumentClickListener();\n                    this.bindDocumentResizeListener();\n                    this.bindScrollListener();\n                }\n            break;\n\n            case 'void':\n                this.onOverlayHide();\n            break;\n        }\n    }\n\n    appendOverlay() {\n        if (this.appendTo) {\n            if (this.appendTo === 'body')\n                document.body.appendChild(this.container);\n            else\n                DomHandler.appendChild(this.container, this.appendTo);\n        }\n    }\n\n    restoreOverlayAppend() {\n        if (this.container && this.appendTo) {\n            this.el.nativeElement.appendChild(this.container);\n        }\n    }\n\n    moveOnTop() {\n        if (this.autoZIndex) {\n            this.container.style.zIndex = String(this.baseZIndex + (++DomHandler.zindex));\n        }\n    }\n\n    hide() {\n        this.visible = false;\n        this.parentActive = false;\n        this.cd.markForCheck();\n    }\n\n    onWindowResize() {\n        this.hide();\n    }\n\n    onLeafClick() {\n        this.unbindDocumentClickListener();\n    }\n\n    bindDocumentClickListener() {\n        if (!this.documentClickListener) {\n            const documentTarget: any = this.el ? this.el.nativeElement.ownerDocument : 'document';\n\n            this.documentClickListener = this.renderer.listen(documentTarget, 'click', () => {\n                if (!this.preventDocumentDefault && this.popup) {\n                    this.hide();\n                }\n\n                this.preventDocumentDefault = false;\n            });\n        }\n    }\n\n    unbindDocumentClickListener() {\n        if (this.documentClickListener) {\n            this.documentClickListener();\n            this.documentClickListener = null;\n        }\n    }\n\n    bindDocumentResizeListener() {\n        this.documentResizeListener = this.onWindowResize.bind(this);\n        window.addEventListener('resize', this.documentResizeListener);\n    }\n\n    unbindDocumentResizeListener() {\n        if (this.documentResizeListener) {\n            window.removeEventListener('resize', this.documentResizeListener);\n            this.documentResizeListener = null;\n        }\n    }\n\n    bindScrollListener() {\n        if (!this.scrollHandler) {\n            this.scrollHandler = new ConnectedOverlayScrollHandler(this.target, () => {\n                if (this.visible) {\n                    this.hide();\n                }\n            });\n        }\n\n        this.scrollHandler.bindScrollListener();\n    }\n\n    unbindScrollListener() {\n        if (this.scrollHandler) {\n            this.scrollHandler.unbindScrollListener();\n        }\n    }\n\n    onOverlayHide() {\n        this.unbindDocumentClickListener();\n        this.unbindDocumentResizeListener();\n        this.unbindScrollListener();\n        this.preventDocumentDefault = false;\n        this.target = null;\n    }\n\n    ngOnDestroy() {\n        if (this.popup) {\n            if (this.scrollHandler) {\n                this.scrollHandler.destroy();\n                this.scrollHandler = null;\n            }\n\n            this.restoreOverlayAppend();\n            this.onOverlayHide();\n        }\n    }\n\n}\n\n@NgModule({\n    imports: [CommonModule,RouterModule,RippleModule],\n    exports: [TieredMenu,RouterModule],\n    declarations: [TieredMenu,TieredMenuSub]\n})\nexport class TieredMenuModule { }\n"]}