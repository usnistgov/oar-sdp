{"version":3,"sources":["ng://primeng/tree/tree.ts"],"names":["UITreeNode","tree","this","prototype","ngOnInit","node","parent","parentNode","syncNodeOption","value","getNodeWithKey","key","getIcon","icon","expanded","children","length","expandedIcon","collapsedIcon","UITreeNode_1","ICON_CLASS","isLeaf","isNodeLeaf","toggle","event","collapse","expand","virtualScroll","updateSerializedValue","onNodeExpand","emit","originalEvent","onNodeCollapse","onNodeClick","onNodeKeydown","which","onNodeTouchEnd","onNodeRightClick","isSelected","onDropPoint","position","_this","preventDefault","dragNode","dragNodeIndex","dragNodeScope","isValidDropPointIndex","dragNodeTree","index","allowDrop","dropParams_1","__assign","createDropPointEventMetadata","validateDrop","onNodeDrop","dropNode","dropIndex","accept","processPointDrop","draghoverPrev","draghoverNext","newNodeList","dragNodeSubNodes","splice","push","dragDropService","stopDrag","subNodes","onDropPointDragOver","dataTransfer","dropEffect","onDropPointDragEnter","onDropPointDragLeave","onDragStart","draggableNodes","draggable","setData","startDrag","scope","draggableScope","onDragStop","onDropNodeDragOver","droppableNodes","stopPropagation","onDropNode","droppable","dropParams_2","createDropNodeEventMetadata","processNodeDrop","draghoverNode","onDropNodeDragEnter","onDropNodeDragLeave","rect","currentTarget","getBoundingClientRect","x","left","width","y","Math","floor","top","height","onKeyDown","nodeElement","target","parentElement","nodeName","listElement","focusNode","nextNodeElement","nextElementSibling","nextSiblingAncestor","findNextSiblingOfAncestor","previousElementSibling","findLastVisibleDescendant","parentNodeElement","getParentNodeElement","childrenListElement","Array","from","find","el","DomHandler","hasClass","lastChildElement","tagName","element","focus","Inject","args","forwardRef","Tree","__decorate","Input","Component","selector","template","__param","selectionChange","EventEmitter","onNodeSelect","onNodeUnselect","onNodeContextMenuSelect","layout","metaKeySelection","propagateSelectionUp","propagateSelectionDown","loadingIcon","emptyMessage","filterBy","filterMode","trackBy","item","onFilter","dragStartSubscription","dragStart$","subscribe","dragStopSubscription","dragStop$","dragHover","ngOnChanges","simpleChange","Object","defineProperty","ngAfterContentInit","templates","templateMap","forEach","name","serializedValue","serializeNodes","getRootNode","nodes","level","visible","nodes_1","__values","nodes_1_1","next","done","rowNode","eventTarget","selectionMode","selectable","hasFilteredNodes","index_1","findIndexInSelection","selected","isCheckboxSelectionMode","propagateDown","selection","filter","val","i","propagateUp","__spread","nodeTouched","metaKey","ctrlKey","isSingleSelectionMode","isMultipleSelectionMode","contextMenu","className","indexOf","show","selectedNode","parentNodes","option","_node","filteredNodes","nodes_2","nodes_2_1","matchedNode","select","selectedCount","childPartialSelected","_b","_c","child","partialSelected","index_2","leaf","getTemplateForNode","type","onDragOver","onDrop","onDragEnter","onDragLeave","isValidDragScope","allow","parent_1","dragScope","dropScope","droppableScope","dropScope_1","dropScope_1_1","s","dragScope_1","e_6","dragScope_1_1","_filter","filterValue","searchFields","split","filterText","ObjectUtils","removeAccents","toLocaleLowerCase","filterLocale","isStrictMode","copyNode","paramsWithoutNode","findFilteredNodes","isFilterMatched","filteredValue","matched","childNodes","childNodes_1","childNodes_1_1","childNode","copyChildNode","_a","searchFields_1","searchFields_1_1","field","String","resolveFieldData","getBlockableElement","nativeElement","ngOnDestroy","unsubscribe","ElementRef","TreeDragDropService","decorators","Optional","Output","ContentChildren","PrimeTemplate","changeDetection","ChangeDetectionStrategy","Default","TreeModule","NgModule","imports","CommonModule","ScrollingModule","exports","SharedModule","declarations"],"mappings":"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","sourcesContent":["import {NgModule,Component,Input,AfterContentInit,OnDestroy,Output,EventEmitter,OnInit,OnChanges,\n    ContentChildren,QueryList,TemplateRef,Inject,ElementRef,forwardRef,ChangeDetectionStrategy,SimpleChanges} from '@angular/core';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {Optional} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {TreeNode} from 'primeng/api';\nimport {SharedModule} from 'primeng/api';\nimport {PrimeTemplate} from 'primeng/api';\nimport {TreeDragDropService} from 'primeng/api';\nimport {Subscription} from 'rxjs';\nimport {BlockableUI} from 'primeng/api';\nimport {ObjectUtils} from 'primeng/utils';\nimport {DomHandler} from 'primeng/dom';\n\n@Component({\n    selector: 'p-treeNode',\n    template: `\n        <ng-template [ngIf]=\"node\">\n            <li *ngIf=\"tree.droppableNodes\" class=\"ui-treenode-droppoint\" [ngClass]=\"{'ui-treenode-droppoint-active ui-state-highlight':draghoverPrev}\"\n            (drop)=\"onDropPoint($event,-1)\" (dragover)=\"onDropPointDragOver($event)\" (dragenter)=\"onDropPointDragEnter($event,-1)\" (dragleave)=\"onDropPointDragLeave($event)\"></li>\n            <li *ngIf=\"!tree.horizontal\" role=\"treeitem\" [ngClass]=\"['ui-treenode',node.styleClass||'', isLeaf() ? 'ui-treenode-leaf': '']\">\n                <div class=\"ui-treenode-content\" [style.paddingLeft]=\"(level * 1.5)  + 'em'\" (click)=\"onNodeClick($event)\" (contextmenu)=\"onNodeRightClick($event)\" (touchend)=\"onNodeTouchEnd()\"\n                    (drop)=\"onDropNode($event)\" (dragover)=\"onDropNodeDragOver($event)\" (dragenter)=\"onDropNodeDragEnter($event)\" (dragleave)=\"onDropNodeDragLeave($event)\"\n                    [draggable]=\"tree.draggableNodes\" (dragstart)=\"onDragStart($event)\" (dragend)=\"onDragStop($event)\" [attr.tabindex]=\"0\"\n                    [ngClass]=\"{'ui-treenode-selectable':tree.selectionMode && node.selectable !== false,'ui-treenode-dragover':draghoverNode, 'ui-treenode-content-selected':isSelected()}\"\n                    (keydown)=\"onKeyDown($event)\" [attr.aria-posinset]=\"this.index + 1\" [attr.aria-expanded]=\"this.node.expanded\" [attr.aria-selected]=\"isSelected()\" [attr.aria-label]=\"node.label\">\n                    <span *ngIf=\"!isLeaf()\" class=\"ui-tree-toggler pi ui-unselectable-text\" [ngClass]=\"{'pi-caret-right':!node.expanded,'pi-caret-down':node.expanded}\" (click)=\"toggle($event)\"></span\n                    ><div class=\"ui-chkbox\" *ngIf=\"tree.selectionMode == 'checkbox'\" [attr.aria-checked]=\"isSelected()\"><div class=\"ui-chkbox-box ui-widget ui-corner-all ui-state-default\" [ngClass]=\"{'ui-state-disabled': node.selectable === false}\">\n                        <span class=\"ui-chkbox-icon ui-clickable pi\"\n                            [ngClass]=\"{'pi-check':isSelected(),'pi-minus':node.partialSelected}\"></span></div></div\n                    ><span [class]=\"getIcon()\" *ngIf=\"node.icon||node.expandedIcon||node.collapsedIcon\"></span\n                    ><span class=\"ui-treenode-label ui-corner-all\"\n                        [ngClass]=\"{'ui-state-highlight':isSelected()}\">\n                            <span *ngIf=\"!tree.getTemplateForNode(node)\">{{node.label}}</span>\n                            <span *ngIf=\"tree.getTemplateForNode(node)\">\n                                <ng-container *ngTemplateOutlet=\"tree.getTemplateForNode(node); context: {$implicit: node}\"></ng-container>\n                            </span>\n                    </span>\n                </div>\n                <ul class=\"ui-treenode-children\" style=\"display: none;\" *ngIf=\"!tree.virtualScroll && node.children && node.expanded\" [style.display]=\"node.expanded ? 'block' : 'none'\" role=\"group\">\n                    <p-treeNode *ngFor=\"let childNode of node.children;let firstChild=first;let lastChild=last; let index=index; trackBy: tree.trackBy\" [node]=\"childNode\" [parentNode]=\"node\"\n                        [firstChild]=\"firstChild\" [lastChild]=\"lastChild\" [index]=\"index\" [style.height.px]=\"tree.virtualNodeHeight\" [level]=\"level + 1\"></p-treeNode>\n                </ul>\n            </li>\n            <li *ngIf=\"tree.droppableNodes&&lastChild\" class=\"ui-treenode-droppoint\" [ngClass]=\"{'ui-treenode-droppoint-active ui-state-highlight':draghoverNext}\"\n            (drop)=\"onDropPoint($event,1)\" (dragover)=\"onDropPointDragOver($event)\" (dragenter)=\"onDropPointDragEnter($event,1)\" (dragleave)=\"onDropPointDragLeave($event)\"></li>\n            <table *ngIf=\"tree.horizontal\" [class]=\"node.styleClass\">\n                <tbody>\n                    <tr>\n                        <td class=\"ui-treenode-connector\" *ngIf=\"!root\">\n                            <table class=\"ui-treenode-connector-table\">\n                                <tbody>\n                                    <tr>\n                                        <td [ngClass]=\"{'ui-treenode-connector-line':!firstChild}\"></td>\n                                    </tr>\n                                    <tr>\n                                        <td [ngClass]=\"{'ui-treenode-connector-line':!lastChild}\"></td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </td>\n                        <td class=\"ui-treenode\" [ngClass]=\"{'ui-treenode-collapsed':!node.expanded}\">\n                            <div class=\"ui-treenode-content ui-state-default ui-corner-all\" tabindex=\"0\"\n                                [ngClass]=\"{'ui-treenode-selectable':tree.selectionMode,'ui-state-highlight':isSelected()}\" (click)=\"onNodeClick($event)\" (contextmenu)=\"onNodeRightClick($event)\"\n                                (touchend)=\"onNodeTouchEnd()\" (keydown)=\"onNodeKeydown($event)\">\n                                <span class=\"ui-tree-toggler pi pi-fw ui-unselectable-text\" [ngClass]=\"{'pi-plus':!node.expanded,'pi-minus':node.expanded}\" *ngIf=\"!isLeaf()\"\n                                        (click)=\"toggle($event)\"></span\n                                ><span [class]=\"getIcon()\" *ngIf=\"node.icon||node.expandedIcon||node.collapsedIcon\"></span\n                                ><span class=\"ui-treenode-label ui-corner-all\">\n                                        <span *ngIf=\"!tree.getTemplateForNode(node)\">{{node.label}}</span>\n                                        <span *ngIf=\"tree.getTemplateForNode(node)\">\n                                        <ng-container *ngTemplateOutlet=\"tree.getTemplateForNode(node); context: {$implicit: node}\"></ng-container>\n                                        </span>\n                                </span>\n                            </div>\n                        </td>\n                        <td class=\"ui-treenode-children-container\" *ngIf=\"node.children && node.expanded\" [style.display]=\"node.expanded ? 'table-cell' : 'none'\">\n                            <div class=\"ui-treenode-children\">\n                                <p-treeNode *ngFor=\"let childNode of node.children;let firstChild=first;let lastChild=last; trackBy: tree.trackBy\" [node]=\"childNode\"\n                                        [firstChild]=\"firstChild\" [lastChild]=\"lastChild\"></p-treeNode>\n                            </div>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </ng-template>\n    `\n})\nexport class UITreeNode implements OnInit {\n\n    static ICON_CLASS: string = 'ui-treenode-icon ';\n\n    @Input() rowNode: any;\n\n    @Input() node: TreeNode;\n\n    @Input() parentNode: TreeNode;\n\n    @Input() root: boolean;\n\n    @Input() index: number;\n\n    @Input() firstChild: boolean;\n\n    @Input() lastChild: boolean;\n\n    @Input() level: number;\n\n    tree: Tree;\n\n    constructor(@Inject(forwardRef(() => Tree)) tree) {\n        this.tree = tree as Tree;\n    }\n\n    draghoverPrev: boolean;\n\n    draghoverNext: boolean;\n\n    draghoverNode: boolean\n\n    ngOnInit() {\n        this.node.parent = this.parentNode;\n\n        if (this.parentNode) {\n            this.tree.syncNodeOption(this.node, this.tree.value, 'parent', this.tree.getNodeWithKey(this.parentNode.key, this.tree.value));\n        }\n    }\n\n    getIcon() {\n        let icon: string;\n\n        if (this.node.icon)\n            icon = this.node.icon;\n        else\n            icon = this.node.expanded && this.node.children && this.node.children.length ? this.node.expandedIcon : this.node.collapsedIcon;\n\n        return UITreeNode.ICON_CLASS + ' ' + icon;\n    }\n\n    isLeaf() {\n        return this.tree.isNodeLeaf(this.node);\n    }\n\n    toggle(event: Event) {\n        if (this.node.expanded)\n            this.collapse(event);\n        else\n            this.expand(event);\n    }\n\n    expand(event: Event) {\n        this.node.expanded = true;\n        if (this.tree.virtualScroll) {\n            this.tree.updateSerializedValue();\n        }\n        this.tree.onNodeExpand.emit({originalEvent: event, node: this.node});\n    }\n\n    collapse(event: Event) {\n        this.node.expanded = false;\n        if (this.tree.virtualScroll) {\n            this.tree.updateSerializedValue();\n        }\n        this.tree.onNodeCollapse.emit({originalEvent: event, node: this.node});\n    }\n\n    onNodeClick(event: MouseEvent) {\n        this.tree.onNodeClick(event, this.node);\n    }\n\n    onNodeKeydown(event: KeyboardEvent) {\n        if (event.which === 13) {\n            this.tree.onNodeClick(event, this.node);\n        }\n    }\n\n    onNodeTouchEnd() {\n        this.tree.onNodeTouchEnd();\n    }\n\n    onNodeRightClick(event: MouseEvent) {\n        this.tree.onNodeRightClick(event, this.node);\n    }\n\n    isSelected() {\n        return this.tree.isSelected(this.node);\n    }\n\n    onDropPoint(event: Event, position: number) {\n        event.preventDefault();\n        let dragNode = this.tree.dragNode;\n        let dragNodeIndex = this.tree.dragNodeIndex;\n        let dragNodeScope = this.tree.dragNodeScope;\n        let isValidDropPointIndex = this.tree.dragNodeTree === this.tree ? (position === 1 || dragNodeIndex !== this.index - 1) : true;\n\n        if (this.tree.allowDrop(dragNode, this.node, dragNodeScope) && isValidDropPointIndex) {\n            let dropParams = {...this.createDropPointEventMetadata(position)};\n\n            if (this.tree.validateDrop) {\n                this.tree.onNodeDrop.emit({\n                    originalEvent: event,\n                    dragNode: dragNode,\n                    dropNode: this.node,\n                    dropIndex: this.index,\n                    accept: () => {\n                        this.processPointDrop(dropParams);\n                    }\n                });\n            }\n            else {\n                this.processPointDrop(dropParams);\n                this.tree.onNodeDrop.emit({\n                    originalEvent: event,\n                    dragNode: dragNode,\n                    dropNode: this.node,\n                    dropIndex: this.index\n                });\n            }\n        }\n\n        this.draghoverPrev = false;\n        this.draghoverNext = false;\n    }\n\n    processPointDrop(event) {\n        let newNodeList = event.dropNode.parent ? event.dropNode.parent.children : this.tree.value;\n        event.dragNodeSubNodes.splice(event.dragNodeIndex, 1);\n        let dropIndex = this.index;\n\n        if (event.position < 0) {\n            dropIndex = (event.dragNodeSubNodes === newNodeList) ? ((event.dragNodeIndex > event.index) ? event.index : event.index - 1) : event.index;\n            newNodeList.splice(dropIndex, 0, event.dragNode);\n        }\n        else {\n            dropIndex = newNodeList.length;\n            newNodeList.push(event.dragNode);\n        }\n\n        this.tree.dragDropService.stopDrag({\n            node: event.dragNode,\n            subNodes: event.dropNode.parent ? event.dropNode.parent.children : this.tree.value,\n            index: event.dragNodeIndex\n        });\n    }\n\n    createDropPointEventMetadata(position) {\n        return {\n            dragNode: this.tree.dragNode,\n            dragNodeIndex:  this.tree.dragNodeIndex,\n            dragNodeSubNodes: this.tree.dragNodeSubNodes,\n            dropNode: this.node,\n            index: this.index,\n            position: position\n        };\n    }\n\n    onDropPointDragOver(event) {\n        event.dataTransfer.dropEffect = 'move';\n        event.preventDefault();\n    }\n\n    onDropPointDragEnter(event: Event, position: number) {\n        if (this.tree.allowDrop(this.tree.dragNode, this.node, this.tree.dragNodeScope)) {\n            if (position < 0)\n                this.draghoverPrev = true;\n            else\n                this.draghoverNext = true;\n        }\n    }\n\n    onDropPointDragLeave(event: Event) {\n        this.draghoverPrev = false;\n        this.draghoverNext = false;\n    }\n\n    onDragStart(event) {\n        if (this.tree.draggableNodes && this.node.draggable !== false) {\n            event.dataTransfer.setData(\"text\", \"data\");\n\n            this.tree.dragDropService.startDrag({\n                tree: this,\n                node: this.node,\n                subNodes: this.node.parent ? this.node.parent.children : this.tree.value,\n                index: this.index,\n                scope: this.tree.draggableScope\n            });\n        }\n        else {\n            event.preventDefault();\n        }\n    }\n\n    onDragStop(event) {\n        this.tree.dragDropService.stopDrag({\n            node: this.node,\n            subNodes: this.node.parent ? this.node.parent.children : this.tree.value,\n            index: this.index\n        });\n    }\n\n    onDropNodeDragOver(event) {\n        event.dataTransfer.dropEffect = 'move';\n        if (this.tree.droppableNodes) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n\n    onDropNode(event) {\n        if (this.tree.droppableNodes && this.node.droppable !== false) {\n            event.preventDefault();\n            event.stopPropagation();\n            let dragNode = this.tree.dragNode;\n\n            if (this.tree.allowDrop(dragNode, this.node, this.tree.dragNodeScope)) {\n                let dropParams = {...this.createDropNodeEventMetadata()};\n\n                if (this.tree.validateDrop) {\n                    this.tree.onNodeDrop.emit({\n                        originalEvent: event,\n                        dragNode: dragNode,\n                        dropNode: this.node,\n                        index: this.index,\n                        accept: () => {\n                            this.processNodeDrop(dropParams);\n                        }\n                    });\n                }\n                else {\n                    this.processNodeDrop(dropParams);\n                    this.tree.onNodeDrop.emit({\n                        originalEvent: event,\n                        dragNode: dragNode,\n                        dropNode: this.node,\n                        index: this.index\n                    });\n                }\n            }\n        }\n\n        this.draghoverNode = false;\n    }\n\n    createDropNodeEventMetadata() {\n        return {\n            dragNode: this.tree.dragNode,\n            dragNodeIndex:  this.tree.dragNodeIndex,\n            dragNodeSubNodes: this.tree.dragNodeSubNodes,\n            dropNode: this.node\n        };\n    }\n\n    processNodeDrop(event) {\n        let dragNodeIndex = event.dragNodeIndex;\n        event.dragNodeSubNodes.splice(dragNodeIndex, 1);\n\n        if (event.dropNode.children)\n            event.dropNode.children.push(event.dragNode);\n        else\n            event.dropNode.children = [event.dragNode];\n\n        this.tree.dragDropService.stopDrag({\n            node: event.dragNode,\n            subNodes: event.dropNode.parent ? event.dropNode.parent.children : this.tree.value,\n            index: dragNodeIndex\n        });\n\n\n    }\n\n    onDropNodeDragEnter(event) {\n        if (this.tree.droppableNodes && this.node.droppable !== false && this.tree.allowDrop(this.tree.dragNode, this.node, this.tree.dragNodeScope)) {\n            this.draghoverNode = true;\n        }\n    }\n\n    onDropNodeDragLeave(event) {\n        if (this.tree.droppableNodes) {\n            let rect = event.currentTarget.getBoundingClientRect();\n            if (event.x > rect.left + rect.width || event.x < rect.left || event.y >= Math.floor(rect.top + rect.height) || event.y < rect.top) {\n               this.draghoverNode = false;\n            }\n        }\n    }\n\n    onKeyDown(event: KeyboardEvent) {\n        const nodeElement = (<HTMLDivElement> event.target).parentElement.parentElement;\n\n        if (nodeElement.nodeName !== 'P-TREENODE') {\n            return;\n        }\n\n        switch (event.which) {\n            //down arrow\n            case 40:\n                const listElement = (this.tree.droppableNodes) ? nodeElement.children[1].children[1] : nodeElement.children[0].children[1];\n                if (listElement && listElement.children.length > 0) {\n                    this.focusNode(listElement.children[0]);\n                }\n                else {\n                    const nextNodeElement = nodeElement.nextElementSibling;\n                    if (nextNodeElement) {\n                        this.focusNode(nextNodeElement);\n                    }\n                    else {\n                        let nextSiblingAncestor = this.findNextSiblingOfAncestor(nodeElement);\n                        if (nextSiblingAncestor) {\n                            this.focusNode(nextSiblingAncestor);\n                        }\n                    }\n                }\n\n                event.preventDefault();\n            break;\n\n            //up arrow\n            case 38:\n                if (nodeElement.previousElementSibling) {\n                    this.focusNode(this.findLastVisibleDescendant(nodeElement.previousElementSibling));\n                }\n                else {\n                    let parentNodeElement = this.getParentNodeElement(nodeElement);\n                    if (parentNodeElement) {\n                        this.focusNode(parentNodeElement);\n                    }\n                }\n\n                event.preventDefault();\n            break;\n\n            //right arrow\n            case 39:\n                if (!this.node.expanded && !this.tree.isNodeLeaf(this.node)) {\n                    this.expand(event);\n                }\n\n                event.preventDefault();\n            break;\n\n            //left arrow\n            case 37:\n                if (this.node.expanded) {\n                    this.collapse(event);\n                }\n                else {\n                    let parentNodeElement = this.getParentNodeElement(nodeElement);\n                    if (parentNodeElement) {\n                        this.focusNode(parentNodeElement);\n                    }\n                }\n\n                event.preventDefault();\n            break;\n\n            //enter\n            case 13:\n                this.tree.onNodeClick(event, this.node);\n                event.preventDefault();\n            break;\n\n            default:\n                //no op\n            break;\n        }\n    }\n\n    findNextSiblingOfAncestor(nodeElement) {\n        let parentNodeElement = this.getParentNodeElement(nodeElement);\n        if (parentNodeElement) {\n            if (parentNodeElement.nextElementSibling)\n                return parentNodeElement.nextElementSibling;\n            else\n                return this.findNextSiblingOfAncestor(parentNodeElement);\n        }\n        else {\n            return null;\n        }\n    }\n\n    findLastVisibleDescendant(nodeElement) {\n        const listElement = <HTMLElement> Array.from(nodeElement.children).find(el => DomHandler.hasClass(el, 'ui-treenode'));\n        const childrenListElement = listElement.children[1];\n        if (childrenListElement && childrenListElement.children.length > 0) {\n            const lastChildElement = childrenListElement.children[childrenListElement.children.length - 1];\n\n            return this.findLastVisibleDescendant(lastChildElement);\n        }\n        else {\n            return nodeElement;\n        }\n    }\n\n    getParentNodeElement(nodeElement) {\n        const parentNodeElement = nodeElement.parentElement.parentElement.parentElement;\n\n        return parentNodeElement.tagName === 'P-TREENODE' ? parentNodeElement : null;\n    }\n\n    focusNode(element) {\n        if (this.tree.droppableNodes)\n            element.children[1].children[0].focus();\n        else\n            element.children[0].children[0].focus();\n    }\n}\n\n@Component({\n    selector: 'p-tree',\n    template: `\n        <div [ngClass]=\"{'ui-tree ui-widget ui-widget-content ui-corner-all':true,'ui-tree-selectable':selectionMode,\n                'ui-treenode-dragover':dragHover,'ui-tree-loading': loading, 'ui-tree-flex-scrollable': scrollHeight === 'flex'}\" \n            [ngStyle]=\"style\" [class]=\"styleClass\" *ngIf=\"!horizontal\"\n            (drop)=\"onDrop($event)\" (dragover)=\"onDragOver($event)\" (dragenter)=\"onDragEnter($event)\" (dragleave)=\"onDragLeave($event)\">\n            <div class=\"ui-tree-loading-mask ui-widget-overlay\" *ngIf=\"loading\"></div>\n            <div class=\"ui-tree-loading-content\" *ngIf=\"loading\">\n                <i [class]=\"'ui-tree-loading-icon pi-spin ' + loadingIcon\"></i>\n            </div>\n            <div *ngIf=\"filter\" class=\"ui-tree-filter-container\">\n                <input #filter type=\"text\" autocomplete=\"off\" class=\"ui-tree-filter ui-inputtext ui-widget ui-state-default ui-corner-all\" [attr.placeholder]=\"filterPlaceholder\"\n                    (keydown.enter)=\"$event.preventDefault()\" (input)=\"_filter($event)\">\n                    <span class=\"ui-tree-filter-icon pi pi-search\"></span>\n            </div>\n            <ng-container *ngIf=\"!virtualScroll; else virtualScrollList\">\n                <div class=\"ui-tree-wrapper\" [style.max-height]=\"scrollHeight\">\n                    <ul class=\"ui-tree-container\" *ngIf=\"getRootNode()\" role=\"tree\" [attr.aria-label]=\"ariaLabel\" [attr.aria-labelledby]=\"ariaLabelledBy\">\n                        <p-treeNode *ngFor=\"let node of getRootNode(); let firstChild=first;let lastChild=last; let index=index; trackBy: trackBy\" [node]=\"node\"\n                                    [firstChild]=\"firstChild\" [lastChild]=\"lastChild\" [index]=\"index\" [level]=\"0\"></p-treeNode>\n                    </ul>\n                </div>\n            </ng-container>\n            <ng-template #virtualScrollList>\n                <cdk-virtual-scroll-viewport class=\"ui-tree-wrapper\" [style.height]=\"scrollHeight\" [itemSize]=\"virtualNodeHeight\" [minBufferPx]=\"minBufferPx\" [maxBufferPx]=\"maxBufferPx\">\n                    <ul class=\"ui-tree-container\" *ngIf=\"getRootNode()\" role=\"tree\" [attr.aria-label]=\"ariaLabel\" [attr.aria-labelledby]=\"ariaLabelledBy\">\n                        <p-treeNode *cdkVirtualFor=\"let rowNode of serializedValue; let firstChild=first; let lastChild=last; let index=index; trackBy: trackBy\"  [level]=\"rowNode.level\"\n                                    [rowNode]=\"rowNode\" [node]=\"rowNode.node\" [firstChild]=\"firstChild\" [lastChild]=\"lastChild\" [index]=\"index\" [style.height.px]=\"virtualNodeHeight\"></p-treeNode>\n                    </ul>\n                </cdk-virtual-scroll-viewport>\n            </ng-template>\n            <div class=\"ui-tree-empty-message\" *ngIf=\"!loading && (value == null || value.length === 0)\">{{emptyMessage}}</div>\n        </div>\n        <div [ngClass]=\"{'ui-tree ui-tree-horizontal ui-widget ui-widget-content ui-corner-all':true,'ui-tree-selectable':selectionMode}\"  [ngStyle]=\"style\" [class]=\"styleClass\" *ngIf=\"horizontal\">\n            <div class=\"ui-tree-loading ui-widget-overlay\" *ngIf=\"loading\"></div>\n            <div class=\"ui-tree-loading-content\" *ngIf=\"loading\">\n                <i [class]=\"'ui-tree-loading-icon pi-spin ' + loadingIcon\"></i>\n            </div>\n            <table *ngIf=\"value&&value[0]\">\n                <p-treeNode [node]=\"value[0]\" [root]=\"true\"></p-treeNode>\n            </table>\n            <div class=\"ui-tree-empty-message\" *ngIf=\"!loading && (value == null || value.length === 0)\">{{emptyMessage}}</div>\n        </div>\n    `,\n    changeDetection: ChangeDetectionStrategy.Default\n})\nexport class Tree implements OnInit,AfterContentInit,OnChanges,OnDestroy,BlockableUI {\n\n    @Input() value: TreeNode[];\n\n    @Input() selectionMode: string;\n\n    @Input() selection: any;\n\n    @Output() selectionChange: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeSelect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeUnselect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeExpand: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeCollapse: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeContextMenuSelect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeDrop: EventEmitter<any> = new EventEmitter();\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() contextMenu: any;\n\n    @Input() layout: string = 'vertical';\n\n    @Input() draggableScope: any;\n\n    @Input() droppableScope: any;\n\n    @Input() draggableNodes: boolean;\n\n    @Input() droppableNodes: boolean;\n\n    @Input() metaKeySelection: boolean = true;\n\n    @Input() propagateSelectionUp: boolean = true;\n\n    @Input() propagateSelectionDown: boolean = true;\n\n    @Input() loading: boolean;\n\n    @Input() loadingIcon: string = 'pi pi-spinner';\n\n    @Input() emptyMessage: string = 'No records found';\n\n    @Input() ariaLabel: string;\n\n    @Input() ariaLabelledBy: string;\n\n    @Input() validateDrop: boolean;\n\n    @Input() filter: boolean;\n\n    @Input() filterBy: string = 'label';\n\n    @Input() filterMode: string = 'lenient';\n\n    @Input() filterPlaceholder: string;\n\n    @Input() filterLocale: string;\n\n    @Input() scrollHeight: string;\n\n    @Input() virtualScroll: boolean;\n\n    @Input() virtualNodeHeight: string;\n\n    @Input() minBufferPx: number;\n\n    @Input() maxBufferPx: number;\n\n    @Input() trackBy: Function = (index: number, item: any) => item;\n\n    @Output() onFilter: EventEmitter<any> = new EventEmitter();\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\n\n    serializedValue: any[];\n\n    public templateMap: any;\n\n    public nodeTouched: boolean;\n\n    public dragNodeTree: Tree;\n\n    public dragNode: TreeNode;\n\n    public dragNodeSubNodes: TreeNode[];\n\n    public dragNodeIndex: number;\n\n    public dragNodeScope: any;\n\n    public dragHover: boolean;\n\n    public dragStartSubscription: Subscription;\n\n    public dragStopSubscription: Subscription;\n\n    public filteredNodes: TreeNode[];\n\n    constructor(public el: ElementRef, @Optional() public dragDropService: TreeDragDropService) {}\n\n    ngOnInit() {\n        if (this.droppableNodes) {\n            this.dragStartSubscription = this.dragDropService.dragStart$.subscribe(\n              event => {\n                this.dragNodeTree = event.tree;\n                this.dragNode = event.node;\n                this.dragNodeSubNodes = event.subNodes;\n                this.dragNodeIndex = event.index;\n                this.dragNodeScope = event.scope;\n            });\n\n            this.dragStopSubscription = this.dragDropService.dragStop$.subscribe(\n              event => {\n                this.dragNodeTree = null;\n                this.dragNode = null;\n                this.dragNodeSubNodes = null;\n                this.dragNodeIndex = null;\n                this.dragNodeScope = null;\n                this.dragHover = false;\n            });\n        }\n    }\n\n    ngOnChanges(simpleChange: SimpleChanges) {\n        if (simpleChange.value) {\n            this.updateSerializedValue();\n        }\n    }\n\n    get horizontal(): boolean {\n        return this.layout == 'horizontal';\n    }\n\n    ngAfterContentInit() {\n        if (this.templates.length) {\n            this.templateMap = {};\n        }\n\n        this.templates.forEach((item) => {\n            this.templateMap[item.name] = item.template;\n        });\n    }\n\n    updateSerializedValue() {\n        this.serializedValue = [];\n        this.serializeNodes(null, this.getRootNode(), 0, true);\n    }\n\n    serializeNodes(parent, nodes, level, visible) {\n        if (nodes && nodes.length) {\n            for(let node of nodes) {\n                node.parent = parent;\n                const rowNode = {\n                    node: node,\n                    parent: parent,\n                    level: level,\n                    visible: visible && (parent ? parent.expanded : true)\n                };\n                this.serializedValue.push(rowNode);\n\n                if (rowNode.visible && node.expanded) {\n                    this.serializeNodes(node, node.children, level + 1, rowNode.visible);\n                }\n            }\n        }\n    }\n\n    onNodeClick(event, node: TreeNode) {\n        let eventTarget = (<Element> event.target);\n\n        if (DomHandler.hasClass(eventTarget, 'ui-tree-toggler')) {\n            return;\n        }\n        else if (this.selectionMode) {\n            if (node.selectable === false) {\n                return;\n            }\n\n            if (this.hasFilteredNodes()) {\n                node = this.getNodeWithKey(node.key, this.value);\n\n                if (!node) {\n                    return;\n                }\n            }\n\n            let index = this.findIndexInSelection(node);\n            let selected = (index >= 0);\n\n            if (this.isCheckboxSelectionMode()) {\n                if (selected) {\n                    if (this.propagateSelectionDown)\n                        this.propagateDown(node, false);\n                    else\n                        this.selection = this.selection.filter((val,i) => i!=index);\n\n                    if (this.propagateSelectionUp && node.parent) {\n                        this.propagateUp(node.parent, false);\n                    }\n\n                    this.selectionChange.emit(this.selection);\n                    this.onNodeUnselect.emit({originalEvent: event, node: node});\n                }\n                else {\n                    if (this.propagateSelectionDown)\n                        this.propagateDown(node, true);\n                    else\n                        this.selection = [...this.selection||[],node];\n\n                    if (this.propagateSelectionUp && node.parent) {\n                        this.propagateUp(node.parent, true);\n                    }\n\n                    this.selectionChange.emit(this.selection);\n                    this.onNodeSelect.emit({originalEvent: event, node: node});\n                }\n            }\n            else {\n                let metaSelection = this.nodeTouched ? false : this.metaKeySelection;\n\n                if (metaSelection) {\n                    let metaKey = (event.metaKey||event.ctrlKey);\n\n                    if (selected && metaKey) {\n                        if (this.isSingleSelectionMode()) {\n                            this.selectionChange.emit(null);\n                        }\n                        else {\n                            this.selection = this.selection.filter((val,i) => i!=index);\n                            this.selectionChange.emit(this.selection);\n                        }\n\n                        this.onNodeUnselect.emit({originalEvent: event, node: node});\n                    }\n                    else {\n                        if (this.isSingleSelectionMode()) {\n                            this.selectionChange.emit(node);\n                        }\n                        else if (this.isMultipleSelectionMode()) {\n                            this.selection = (!metaKey) ? [] : this.selection||[];\n                            this.selection = [...this.selection,node];\n                            this.selectionChange.emit(this.selection);\n                        }\n\n                        this.onNodeSelect.emit({originalEvent: event, node: node});\n                    }\n                }\n                else {\n                    if (this.isSingleSelectionMode()) {\n                        if (selected) {\n                            this.selection = null;\n                            this.onNodeUnselect.emit({originalEvent: event, node: node});\n                        }\n                        else {\n                            this.selection = node;\n                            this.onNodeSelect.emit({originalEvent: event, node: node});\n                        }\n                    }\n                    else {\n                        if (selected) {\n                            this.selection = this.selection.filter((val,i) => i!=index);\n                            this.onNodeUnselect.emit({originalEvent: event, node: node});\n                        }\n                        else {\n                            this.selection = [...this.selection||[],node];\n                            this.onNodeSelect.emit({originalEvent: event, node: node});\n                        }\n                    }\n\n                    this.selectionChange.emit(this.selection);\n                }\n            }\n        }\n\n        this.nodeTouched = false;\n    }\n\n    onNodeTouchEnd() {\n        this.nodeTouched = true;\n    }\n\n    onNodeRightClick(event: MouseEvent, node: TreeNode) {\n        if (this.contextMenu) {\n            let eventTarget = (<Element> event.target);\n\n            if (eventTarget.className && eventTarget.className.indexOf('ui-tree-toggler') === 0) {\n                return;\n            }\n            else {\n                let index = this.findIndexInSelection(node);\n                let selected = (index >= 0);\n\n                if (!selected) {\n                    if (this.isSingleSelectionMode())\n                        this.selectionChange.emit(node);\n                    else\n                        this.selectionChange.emit([node]);\n                }\n\n                this.contextMenu.show(event);\n                this.onNodeContextMenuSelect.emit({originalEvent: event, node: node});\n            }\n        }\n    }\n\n    findIndexInSelection(node: TreeNode) {\n        let index: number = -1;\n\n        if (this.selectionMode && this.selection) {\n            if (this.isSingleSelectionMode()) {\n                let areNodesEqual = (this.selection.key && this.selection.key === node.key) || this.selection == node;\n                index = areNodesEqual ? 0 : - 1;\n            }\n            else {\n                for(let i = 0; i  < this.selection.length; i++) {\n                    let selectedNode = this.selection[i];\n                    let areNodesEqual = (selectedNode.key && selectedNode.key === node.key) || selectedNode == node;\n                    if (areNodesEqual) {\n                        index = i;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return index;\n    }\n\n    syncNodeOption(node, parentNodes, option, value?: any) {\n        // to synchronize the node option between the filtered nodes and the original nodes(this.value)\n        const _node = this.hasFilteredNodes() ? this.getNodeWithKey(node.key, parentNodes) : null;\n        if (_node) {\n            _node[option] = value||node[option];\n        }\n    }\n\n    hasFilteredNodes() {\n        return this.filter && this.filteredNodes && this.filteredNodes.length;\n    }\n\n    getNodeWithKey(key: string, nodes: TreeNode[]) {\n        for (let node of nodes) {\n            if (node.key === key) {\n                return node;\n            }\n\n            if (node.children) {\n                let matchedNode = this.getNodeWithKey(key, node.children);\n                if (matchedNode) {\n                    return matchedNode;\n                }\n            }\n        }\n    }\n\n    propagateUp(node: TreeNode, select: boolean) {\n        if (node.children && node.children.length) {\n            let selectedCount: number = 0;\n            let childPartialSelected: boolean = false;\n            for(let child of node.children) {\n                if (this.isSelected(child)) {\n                    selectedCount++;\n                }\n                else if (child.partialSelected) {\n                    childPartialSelected = true;\n                }\n            }\n\n            if (select && selectedCount == node.children.length) {\n                this.selection = [...this.selection||[],node];\n                node.partialSelected = false;\n            }\n            else {\n                if (!select) {\n                    let index = this.findIndexInSelection(node);\n                    if (index >= 0) {\n                        this.selection = this.selection.filter((val,i) => i!=index);\n                    }\n                }\n\n                if (childPartialSelected || selectedCount > 0 && selectedCount != node.children.length)\n                    node.partialSelected = true;\n                else\n                    node.partialSelected = false;\n            }\n\n            this.syncNodeOption(node, this.filteredNodes, 'partialSelected');\n        }\n\n        let parent = node.parent;\n        if (parent) {\n            this.propagateUp(parent, select);\n        }\n    }\n\n    propagateDown(node: TreeNode, select: boolean) {\n        let index = this.findIndexInSelection(node);\n\n        if (select && index == -1) {\n            this.selection = [...this.selection||[],node];\n        }\n        else if (!select && index > -1) {\n            this.selection = this.selection.filter((val,i) => i!=index);\n        }\n\n        node.partialSelected = false;\n\n        this.syncNodeOption(node, this.filteredNodes, 'partialSelected');\n\n        if (node.children && node.children.length) {\n            for(let child of node.children) {\n                this.propagateDown(child, select);\n            }\n        }\n    }\n\n    isSelected(node: TreeNode) {\n        return this.findIndexInSelection(node) != -1;\n    }\n\n    isSingleSelectionMode() {\n        return this.selectionMode && this.selectionMode == 'single';\n    }\n\n    isMultipleSelectionMode() {\n        return this.selectionMode && this.selectionMode == 'multiple';\n    }\n\n    isCheckboxSelectionMode() {\n        return this.selectionMode && this.selectionMode == 'checkbox';\n    }\n\n    isNodeLeaf(node) {\n        return node.leaf == false ? false : !(node.children && node.children.length);\n    }\n\n    getRootNode() {\n        return this.filteredNodes ? this.filteredNodes : this.value;\n    }\n\n    getTemplateForNode(node: TreeNode): TemplateRef<any> {\n        if (this.templateMap)\n            return node.type ? this.templateMap[node.type] : this.templateMap['default'];\n        else\n            return null;\n    }\n\n    onDragOver(event) {\n        if (this.droppableNodes && (!this.value || this.value.length === 0)) {\n            event.dataTransfer.dropEffect = 'move';\n            event.preventDefault();\n        }\n    }\n\n    onDrop(event) {\n        if (this.droppableNodes && (!this.value || this.value.length === 0)) {\n            event.preventDefault();\n            let dragNode = this.dragNode;\n            if (this.allowDrop(dragNode, null, this.dragNodeScope)) {\n                let dragNodeIndex = this.dragNodeIndex;\n                this.dragNodeSubNodes.splice(dragNodeIndex, 1);\n                this.value = this.value||[];\n                this.value.push(dragNode);\n\n                this.dragDropService.stopDrag({\n                    node: dragNode\n                });\n            }\n        }\n    }\n\n    onDragEnter(event) {\n        if (this.droppableNodes && this.allowDrop(this.dragNode, null, this.dragNodeScope)) {\n            this.dragHover = true;\n        }\n    }\n\n    onDragLeave(event) {\n        if (this.droppableNodes) {\n            let rect = event.currentTarget.getBoundingClientRect();\n            if (event.x > rect.left + rect.width || event.x < rect.left || event.y > rect.top + rect.height || event.y < rect.top) {\n               this.dragHover = false;\n            }\n        }\n    }\n\n    allowDrop(dragNode: TreeNode, dropNode: TreeNode, dragNodeScope: any): boolean {\n        if (!dragNode) {\n            //prevent random html elements to be dragged\n            return false;\n        }\n        else if (this.isValidDragScope(dragNodeScope)) {\n            let allow: boolean = true;\n            if (dropNode) {\n                if (dragNode === dropNode) {\n                    allow = false;\n                }\n                else {\n                    let parent = dropNode.parent;\n                    while(parent != null) {\n                        if (parent === dragNode) {\n                            allow = false;\n                            break;\n                        }\n                        parent = parent.parent;\n                    }\n                }\n            }\n\n            return allow;\n        }\n        else {\n            return false;\n        }\n    }\n\n    isValidDragScope(dragScope: any): boolean {\n        let dropScope = this.droppableScope;\n\n        if (dropScope) {\n            if (typeof dropScope === 'string') {\n                if (typeof dragScope === 'string')\n                    return dropScope === dragScope;\n                else if (dragScope instanceof Array)\n                    return (<Array<any>>dragScope).indexOf(dropScope) != -1;\n            }\n            else if (dropScope instanceof Array) {\n                if (typeof dragScope === 'string') {\n                    return (<Array<any>>dropScope).indexOf(dragScope) != -1;\n                }\n                else if (dragScope instanceof Array) {\n                    for(let s of dropScope) {\n                        for(let ds of dragScope) {\n                            if (s === ds) {\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n\n    _filter(event) {\n        let filterValue = event.target.value;\n        if (filterValue === '') {\n            this.filteredNodes = null;\n        }\n        else {\n            this.filteredNodes = [];\n            const searchFields: string[] = this.filterBy.split(',');\n            const filterText = ObjectUtils.removeAccents(filterValue).toLocaleLowerCase(this.filterLocale);\n            const isStrictMode = this.filterMode === 'strict';\n            for(let node of this.value) {\n                let copyNode = {...node};\n                let paramsWithoutNode = {searchFields, filterText, isStrictMode};\n                if ((isStrictMode && (this.findFilteredNodes(copyNode, paramsWithoutNode) || this.isFilterMatched(copyNode, paramsWithoutNode))) ||\n                    (!isStrictMode && (this.isFilterMatched(copyNode, paramsWithoutNode) || this.findFilteredNodes(copyNode, paramsWithoutNode)))) {\n                    this.filteredNodes.push(copyNode);\n                }\n            }\n        }\n\n        this.updateSerializedValue();\n        this.onFilter.emit({\n            filter: filterValue,\n            filteredValue: this.filteredNodes\n        });\n    }\n\n    findFilteredNodes(node, paramsWithoutNode) {\n        if (node) {\n            let matched = false;\n            if (node.children) {\n                let childNodes = [...node.children];\n                node.children = [];\n                for (let childNode of childNodes) {\n                    let copyChildNode = {...childNode};\n                    if (this.isFilterMatched(copyChildNode, paramsWithoutNode)) {\n                        matched = true;\n                        node.children.push(copyChildNode);\n                    }\n                }\n            }\n\n            if (matched) {\n                node.expanded = true;\n                return true;\n            }\n        }\n    }\n\n    isFilterMatched(node, {searchFields, filterText, isStrictMode}) {\n        let matched = false;\n        for(let field of searchFields) {\n            let fieldValue = ObjectUtils.removeAccents(String(ObjectUtils.resolveFieldData(node, field))).toLocaleLowerCase(this.filterLocale);\n            if (fieldValue.indexOf(filterText) > -1) {\n                matched = true;\n            }\n        }\n\n        if (!matched || (isStrictMode && !this.isNodeLeaf(node))) {\n            matched = this.findFilteredNodes(node, {searchFields, filterText, isStrictMode}) || matched;\n        }\n\n        return matched;\n    }\n\n    getBlockableElement(): HTMLElementÂ {\n      return this.el.nativeElement.children[0];\n    }\n\n    ngOnDestroy() {\n        if (this.dragStartSubscription) {\n            this.dragStartSubscription.unsubscribe();\n        }\n\n        if (this.dragStopSubscription) {\n            this.dragStopSubscription.unsubscribe();\n        }\n    }\n}\n@NgModule({\n    imports: [CommonModule,ScrollingModule],\n    exports: [Tree,SharedModule,ScrollingModule],\n    declarations: [Tree,UITreeNode]\n})\nexport class TreeModule { }\n"]}