{"version":3,"sources":["ng://primeng/multiselect/multiselect.ts"],"names":["MULTISELECT_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","MultiSelect","multi","MultiSelectItem","this","onClick","EventEmitter","onKeydown","prototype","onOptionClick","event","emit","originalEvent","option","onOptionKeydown","__decorate","Input","Output","Component","selector","template","el","renderer","cd","scrollHeight","_defaultLabel","filter","displaySelectedLabel","maxSelectedLabels","selectedItemsLabel","showToggleAll","emptyFilterMessage","resetFilterOnHide","dropdownIcon","showHeader","autoZIndex","baseZIndex","filterBy","showTransitionOptions","hideTransitionOptions","filterMatchMode","tooltip","tooltipPosition","tooltipPositionStyle","autofocusFilter","onChange","onFocus","onBlur","onPanelShow","onPanelHide","onModelChange","onModelTouched","disabledSelectedOptions","Object","defineProperty","val","updateLabel","_options","opts","optionLabel","ObjectUtils","generateSelectItems","visibleOptions","filterValue","length","activateFilter","ngOnInit","ngAfterContentInit","_this","templates","forEach","item","getType","itemTemplate","selectedItemsTemplate","ngAfterViewInit","overlayVisible","show","ngAfterViewChecked","filtered","alignOverlay","writeValue","value","updateFilledState","setDisabledSelectedOptions","checkSelectionLimit","markForCheck","selectionLimit","maxSelectionLimitReached","filled","registerOnChange","fn","registerOnTouched","setDisabledState","disabled","optionValue","selectionIndex","findSelectionIndex","i","__spread","itemValue","isSelected","index","equals","dataKey","toggleAll","isAllChecked","getVisibleOptions","push","trim","isAllVisibleOptionsChecked","optionCount","getEnabledOptionCount","disabledSelectedOptionCount","options","_b","__values","_c","next","done","count","opt","onOverlayAnimationStart","toState","overlay","element","appendOverlay","style","zIndex","String","DomHandler","zindex","bindDocumentClickListener","bindDocumentResizeListener","filterInputChild","nativeElement","preventModelTouched","focus","onOverlayHide","appendTo","document","body","appendChild","minWidth","getWidth","containerViewChild","restoreOverlayAppend","absolutePosition","relativePosition","hide","unbindDocumentClickListener","onFilter","close","preventDefault","stopPropagation","onMouseclick","input","readonly","target","isSameNode","accessibleViewChild","isOverlayClick","contains","isOutsideClicked","onInputFocus","onInputBlur","which","nextItem","findNextItem","parentElement","prevItem","findPrevItem","nextElementSibling","hasClass","children","isHidden","previousElementSibling","altKey","label","itemLabel","findLabelByValue","valuesAsString","pattern","test","replace","match","defaultLabel","inputValue","searchFields","split","FilterUtils","filterLocale","isItemVisible","onHeaderCheckboxFocus","headerCheckboxFocus","onHeaderCheckboxBlur","documentClickListener","listen","documentResizeListener","onWindowResize","bind","window","addEventListener","unbindDocumentResizeListener","removeEventListener","isAndroid","ngOnDestroy","ElementRef","Renderer2","ChangeDetectorRef","ViewChild","ContentChild","Footer","Header","ContentChildren","PrimeTemplate","animations","trigger","state","transform","opacity","transition","animate","host","[class.ui-inputwrapper-filled]","[class.ui-inputwrapper-focus]","providers","changeDetection","ChangeDetectionStrategy","Default","MultiSelectModule","NgModule","imports","CommonModule","SharedModule","ScrollingModule","TooltipModule","exports","declarations"],"mappings":"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","sourcesContent":["import { NgModule, Component, ElementRef, OnInit, AfterViewInit, AfterContentInit, AfterViewChecked, OnDestroy, Input, Output, Renderer2, EventEmitter,\n    forwardRef, ViewChild, ChangeDetectorRef, TemplateRef, ContentChildren, QueryList, ContentChild, ChangeDetectionStrategy } from '@angular/core';\nimport { trigger,state,style,transition,animate,AnimationEvent} from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport { SelectItem } from 'primeng/api';\nimport { DomHandler } from 'primeng/dom';\nimport { ObjectUtils } from 'primeng/utils';\nimport { SharedModule, PrimeTemplate, Footer, Header } from 'primeng/api';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { FilterUtils } from 'primeng/utils';\nimport {TooltipModule} from 'primeng/tooltip';\n\nexport const MULTISELECT_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MultiSelect),\n  multi: true\n};\n\n@Component({\n    selector: 'p-multiSelectItem',\n    template: `\n        <li class=\"ui-multiselect-item ui-corner-all\" (click)=\"onOptionClick($event)\" (keydown)=\"onOptionKeydown($event)\" [attr.aria-label]=\"option.label\"\n            [style.display]=\"visible ? 'block' : 'none'\" [attr.tabindex]=\"option.disabled ? null : '0'\" [ngStyle]=\"{'height': itemSize + 'px'}\"\n            [ngClass]=\"{'ui-state-highlight': selected, 'ui-state-disabled': (option.disabled || (maxSelectionLimitReached && !selected))}\">\n            <div class=\"ui-chkbox ui-widget\">\n                <div class=\"ui-chkbox-box ui-widget ui-corner-all ui-state-default\"\n                    [ngClass]=\"{'ui-state-active': selected}\">\n                    <span class=\"ui-chkbox-icon ui-clickable\" [ngClass]=\"{'pi pi-check': selected}\"></span>\n                </div>\n            </div>\n            <span *ngIf=\"!template\">{{option.label}}</span>\n            <ng-container *ngTemplateOutlet=\"template; context: {$implicit: option}\"></ng-container>\n        </li>\n    `\n})\nexport class MultiSelectItem {\n\n    @Input() option: any;\n\n    @Input() selected: boolean;\n\n    @Input() disabled: boolean;\n\n    @Input() visible: boolean;\n\n    @Input() itemSize: number;\n\n    @Input() template: TemplateRef<any>;\n\n    @Input() maxSelectionLimitReached: boolean;\n\n    @Output() onClick: EventEmitter<any> = new EventEmitter();\n\n    @Output() onKeydown: EventEmitter<any> = new EventEmitter();\n\n    onOptionClick(event: Event) {\n        this.onClick.emit({\n            originalEvent: event,\n            option: this.option\n        });\n    }\n\n    onOptionKeydown(event: Event) {\n        this.onKeydown.emit({\n            originalEvent: event,\n            option: this.option\n        });\n    }\n}\n\n@Component({\n    selector: 'p-multiSelect',\n    template: `\n        <div #container [ngClass]=\"{'ui-multiselect ui-widget ui-state-default ui-corner-all':true,'ui-multiselect-open':overlayVisible,'ui-state-focus':focus,'ui-state-disabled': disabled}\" [ngStyle]=\"style\" [class]=\"styleClass\"\n            (click)=\"onMouseclick($event,in)\">\n            <div class=\"ui-helper-hidden-accessible\">\n                <input #in type=\"text\" readonly=\"readonly\" [attr.id]=\"inputId\" [attr.name]=\"name\" (focus)=\"onInputFocus($event)\" (blur)=\"onInputBlur($event)\"\n                       [disabled]=\"disabled\" [attr.tabindex]=\"tabindex\" (keydown)=\"onKeydown($event)\" aria-haspopup=\"listbox\" [attr.aria-expanded]=\"overlayVisible\"\n                       [attr.aria-labelledby]=\"ariaLabelledBy\" role=\"listbox\">\n            </div>\n            <div class=\"ui-multiselect-label-container\" [pTooltip]=\"tooltip\" [tooltipPosition]=\"tooltipPosition\" [positionStyle]=\"tooltipPositionStyle\" [tooltipStyleClass]=\"tooltipStyleClass\">\n                <span class=\"ui-multiselect-label ui-corner-all\">\n                    <ng-container *ngIf=\"!selectedItemsTemplate\">{{valuesAsString}}</ng-container>\n                    <ng-container *ngTemplateOutlet=\"selectedItemsTemplate; context: {$implicit: value}\"></ng-container>\n                </span>\n            </div>\n            <div [ngClass]=\"{'ui-multiselect-trigger ui-state-default ui-corner-right':true}\">\n                <span class=\"ui-multiselect-trigger-icon ui-clickable\" [ngClass]=\"dropdownIcon\"></span>\n            </div>\n            <div *ngIf=\"overlayVisible\" [ngClass]=\"['ui-multiselect-panel ui-widget ui-widget-content ui-corner-all ui-shadow']\" [@overlayAnimation]=\"{value: 'visible', params: {showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions}}\" (@overlayAnimation.start)=\"onOverlayAnimationStart($event)\"\n                [ngStyle]=\"panelStyle\" [class]=\"panelStyleClass\" (keydown)=\"onKeydown($event)\">\n                <div class=\"ui-widget-header ui-corner-all ui-multiselect-header ui-helper-clearfix\" [ngClass]=\"{'ui-multiselect-header-no-toggleall': !showToggleAll}\" *ngIf=\"showHeader\">\n                <ng-content select=\"p-header\"></ng-content>\n                <div class=\"ui-chkbox ui-widget\" *ngIf=\"showToggleAll && !selectionLimit\">\n                        <div class=\"ui-helper-hidden-accessible\">\n                            <input type=\"checkbox\" readonly=\"readonly\" [checked]=\"isAllChecked()\" (focus)=\"onHeaderCheckboxFocus()\" (blur)=\"onHeaderCheckboxBlur()\" (keydown.space)=\"toggleAll($event)\">\n                        </div>\n                        <div class=\"ui-chkbox-box ui-widget ui-corner-all ui-state-default\" role=\"checkbox\" [attr.aria-checked]=\"isAllChecked()\" [ngClass]=\"{'ui-state-active':isAllChecked(), 'ui-state-focus': headerCheckboxFocus}\" (click)=\"toggleAll($event)\">\n                            <span class=\"ui-chkbox-icon ui-clickable\" [ngClass]=\"{'pi pi-check':isAllChecked()}\"></span>\n                        </div>\n                    </div>\n                    <div class=\"ui-multiselect-filter-container\" *ngIf=\"filter\">\n                        <input #filterInput type=\"text\" role=\"textbox\" [value]=\"filterValue||''\" (input)=\"onFilter()\" class=\"ui-inputtext ui-widget ui-state-default ui-corner-all\" [attr.placeholder]=\"filterPlaceHolder\" [attr.aria-label]=\"ariaFilterLabel\">\n                        <span class=\"ui-multiselect-filter-icon pi pi-search\"></span>\n                    </div>\n                    <a class=\"ui-multiselect-close ui-corner-all\" tabindex=\"0\" (click)=\"close($event)\" (keydown.enter)=\"close($event)\">\n                        <span class=\"pi pi-times\"></span>\n                    </a>\n                </div>\n                <div class=\"ui-multiselect-items-wrapper\" [style.max-height]=\"virtualScroll ? 'auto' : (scrollHeight||'auto')\">\n                    <ul class=\"ui-multiselect-items ui-multiselect-list ui-widget-content ui-widget ui-corner-all ui-helper-reset\" role=\"listbox\" aria-multiselectable=\"true\">\n                        <ng-container *ngIf=\"!virtualScroll; else virtualScrollList\">\n                            <ng-template ngFor let-option let-i=\"index\" [ngForOf]=\"options\">\n                                <p-multiSelectItem [option]=\"option\" [selected]=\"isSelected(option.value)\" (onClick)=\"onOptionClick($event)\" (onKeydown)=\"onOptionKeydown($event)\"\n                                        [maxSelectionLimitReached]=\"maxSelectionLimitReached\" [visible]=\"isItemVisible(option)\" [template]=\"itemTemplate\"></p-multiSelectItem>\n                            </ng-template>\n                        </ng-container>\n                        <ng-template #virtualScrollList>\n                            <cdk-virtual-scroll-viewport #viewport [ngStyle]=\"{'height': scrollHeight}\" [itemSize]=\"itemSize\" *ngIf=\"virtualScroll && visibleOptions && visibleOptions.length\">\n                                <ng-container *cdkVirtualFor=\"let option of visibleOptions; let i = index; let c = count; let f = first; let l = last; let e = even; let o = odd\">\n                                    <p-multiSelectItem [option]=\"option\" [selected]=\"isSelected(option.value)\" (onClick)=\"onOptionClick($event)\" (onKeydown)=\"onOptionKeydown($event)\"\n                                        [maxSelectionLimitReached]=\"maxSelectionLimitReached\" [visible]=\"isItemVisible(option)\" [template]=\"itemTemplate\" [itemSize]=\"itemSize\"></p-multiSelectItem>\n                                </ng-container>\n                            </cdk-virtual-scroll-viewport>\n                        </ng-template>\n                        <li *ngIf=\"filter && visibleOptions && visibleOptions.length === 0\" class=\"ui-multiselect-empty-message\">{{emptyFilterMessage}}</li>\n                    </ul>\n                </div>\n                <div class=\"ui-multiselect-footer ui-widget-content\" *ngIf=\"footerFacet\">\n                    <ng-content select=\"p-footer\"></ng-content>\n                </div>\n            </div>\n        </div>\n    `,\n    animations: [\n        trigger('overlayAnimation', [\n            state('void', style({\n                transform: 'translateY(5%)',\n                opacity: 0\n            })),\n            state('visible', style({\n                transform: 'translateY(0)',\n                opacity: 1\n            })),\n            transition('void => visible', animate('{{showTransitionParams}}')),\n            transition('visible => void', animate('{{hideTransitionParams}}'))\n        ])\n    ],\n    host: {\n        '[class.ui-inputwrapper-filled]': 'filled',\n        '[class.ui-inputwrapper-focus]': 'focus'\n    },\n    providers: [MULTISELECT_VALUE_ACCESSOR],\n    changeDetection: ChangeDetectionStrategy.Default\n})\nexport class MultiSelect implements OnInit,AfterViewInit,AfterContentInit,AfterViewChecked,OnDestroy,ControlValueAccessor {\n\n    @Input() scrollHeight: string = '200px';\n\n    _defaultLabel: string = 'Choose';\n\n    @Input() set defaultLabel(val: string) {\n        this._defaultLabel = val;\n        this.updateLabel();\n    }\n\n    get defaultLabel(): string {\n        return this._defaultLabel;\n    }\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() panelStyle: any;\n\n    @Input() panelStyleClass: string;\n\n    @Input() inputId: string;\n\n    @Input() disabled: boolean;\n\n    @Input() readonly: boolean;\n\n    @Input() filter: boolean = true;\n\n    @Input() filterPlaceHolder: string;\n\n    @Input() filterLocale: string;\n\n    @Input() overlayVisible: boolean;\n\n    @Input() tabindex: number;\n\n    @Input() appendTo: any;\n\n    @Input() dataKey: string;\n\n    @Input() name: string;\n\n    @Input() ariaLabelledBy: string;\n\n    @Input() displaySelectedLabel: boolean = true;\n\n    @Input() maxSelectedLabels: number = 3;\n\n    @Input() selectionLimit: number;\n\n    @Input() selectedItemsLabel: string = '{0} items selected';\n\n    @Input() showToggleAll: boolean = true;\n\n    @Input() emptyFilterMessage: string = 'No results found';\n\n    @Input() resetFilterOnHide: boolean = false;\n\n    @Input() dropdownIcon: string = 'pi pi-chevron-down';\n\n    @Input() optionLabel: string;\n\n    @Input() showHeader: boolean = true;\n\n    @Input() autoZIndex: boolean = true;\n\n    @Input() baseZIndex: number = 0;\n\n    @Input() filterBy: string = 'label';\n\n    @Input() virtualScroll: boolean;\n\n    @Input() itemSize: number;\n\n    @Input() showTransitionOptions: string = '225ms ease-out';\n\n    @Input() hideTransitionOptions: string = '195ms ease-in';\n\n    @Input() ariaFilterLabel: string;\n\n    @Input() filterMatchMode: string = \"contains\";\n\n    @Input() tooltip: string = '';\n\n    @Input() tooltipPosition: string = 'right';\n\n    @Input() tooltipPositionStyle: string = 'absolute';\n\n    @Input() tooltipStyleClass: string;\n\n    @Input() autofocusFilter: boolean = true;\n\n    @ViewChild('container') containerViewChild: ElementRef;\n\n    @ViewChild('filterInput') filterInputChild: ElementRef;\n\n    @ViewChild('in') accessibleViewChild: ElementRef;\n\n    @ContentChild(Footer) footerFacet;\n\n    @ContentChild(Header) headerFacet;\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\n\n    @Output() onChange: EventEmitter<any> = new EventEmitter();\n\n    @Output() onFocus: EventEmitter<any> = new EventEmitter();\n\n    @Output() onBlur: EventEmitter<any> = new EventEmitter();\n\n    @Output() onClick: EventEmitter<any> = new EventEmitter();\n\n    @Output() onPanelShow: EventEmitter<any> = new EventEmitter();\n\n    @Output() onPanelHide: EventEmitter<any> = new EventEmitter();\n\n    public value: any[];\n\n    public onModelChange: Function = () => {};\n\n    public onModelTouched: Function = () => {};\n\n    overlay: HTMLDivElement;\n\n    public valuesAsString: string;\n\n    public focus: boolean;\n\n    filled: boolean;\n\n    public documentClickListener: any;\n\n    public filterValue: string;\n\n    public visibleOptions: SelectItem[];\n\n    public disabledSelectedOptions: SelectItem[] = [];\n\n    public filtered: boolean;\n\n    public itemTemplate: TemplateRef<any>;\n\n    public selectedItemsTemplate: TemplateRef<any>;\n\n    public headerCheckboxFocus: boolean;\n\n    _options: any[];\n\n    maxSelectionLimitReached: boolean;\n\n    documentResizeListener: any;\n\n    preventModelTouched: boolean;\n\n    constructor(public el: ElementRef, public renderer: Renderer2, private cd: ChangeDetectorRef) {}\n\n    @Input() get options(): any[] {\n        return this._options;\n    }\n\n    set options(val: any[]) {\n        let opts = this.optionLabel ? ObjectUtils.generateSelectItems(val, this.optionLabel) : val;\n        this.visibleOptions = opts;\n        this._options = opts;\n        this.updateLabel();\n\n        if (this.filterValue && this.filterValue.length) {\n            this.activateFilter();\n        }\n    }\n\n    ngOnInit() {\n        this.updateLabel();\n    }\n\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch(item.getType()) {\n                case 'item':\n                    this.itemTemplate = item.template;\n                break;\n\n                case 'selectedItems':\n                    this.selectedItemsTemplate = item.template;\n                break;\n\n                default:\n                    this.itemTemplate = item.template;\n                break;\n            }\n        });\n    }\n\n    ngAfterViewInit() {\n        if (this.overlayVisible) {\n            this.show();\n        }\n    }\n\n    ngAfterViewChecked() {\n        if (this.filtered) {\n            this.alignOverlay();\n\n            this.filtered = false;\n        }\n    }\n\n    writeValue(value: any) : void {\n        this.value = value;\n        this.updateLabel();\n        this.updateFilledState();\n        this.setDisabledSelectedOptions();\n        this.checkSelectionLimit();\n\n        this.cd.markForCheck();\n    }\n\n    checkSelectionLimit() {\n        if (this.selectionLimit && (this.value && this.value.length === this.selectionLimit)) {\n            this.maxSelectionLimitReached = true;\n        }\n        else {\n            this.maxSelectionLimitReached = false;\n        }\n    }\n\n    updateFilledState() {\n        this.filled = (this.value && this.value.length > 0);\n    }\n\n    registerOnChange(fn: Function): void {\n        this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn: Function): void {\n        this.onModelTouched = fn;\n    }\n\n    setDisabledState(val: boolean): void {\n        this.disabled = val;\n    }\n\n    onOptionClick(event) {\n        let option = event.option;\n        if (option.disabled) {\n            return;\n        }\n\n        const optionValue = option.value;\n        let selectionIndex = this.findSelectionIndex(optionValue);\n        if (selectionIndex != -1) {\n            this.value = this.value.filter((val,i) => i != selectionIndex);\n\n            if (this.selectionLimit) {\n                this.maxSelectionLimitReached = false;\n            }\n        }\n        else {\n            if (!this.selectionLimit || (!this.value || this.value.length < this.selectionLimit)) {\n                this.value = [...this.value || [], optionValue];\n            }\n\n            this.checkSelectionLimit();\n        }\n\n        this.onModelChange(this.value);\n        this.onChange.emit({originalEvent: event.originalEvent, value: this.value, itemValue: optionValue});\n        this.updateLabel();\n        this.updateFilledState();\n    }\n\n    isSelected(value) {\n        return this.findSelectionIndex(value) != -1;\n    }\n\n    findSelectionIndex(val: any): numberÂ {\n        let index = -1;\n\n        if (this.value) {\n            for (let i = 0; i < this.value.length; i++) {\n                if (ObjectUtils.equals(this.value[i], val, this.dataKey)) {\n                    index = i;\n                    break;\n                }\n            }\n        }\n\n        return index;\n    }\n\n    toggleAll(event: Event) {\n        if (this.isAllChecked()) {\n            if (this.disabledSelectedOptions && this.disabledSelectedOptions.length > 0) {\n                let value = [];\n                value = [...this.disabledSelectedOptions];\n                this.value = value;\n            }\n            else {\n                this.value = [];\n            }\n        }\n        else {\n            let opts = this.getVisibleOptions();\n            if (opts) {\n                let value = [];\n                if (this.disabledSelectedOptions && this.disabledSelectedOptions.length > 0) {\n                    value = [...this.disabledSelectedOptions];\n                }\n                for (let i = 0; i < opts.length; i++) {\n                    let option = opts[i];\n\n                    if (!option.disabled) {\n                        value.push(opts[i].value);\n                    }\n                }\n                this.value = value;\n            }\n        }\n\n        this.onModelChange(this.value);\n        this.onChange.emit({originalEvent: event, value: this.value});\n        this.updateFilledState();\n        this.updateLabel();\n    }\n\n    isAllChecked() {\n        if (this.filterValue && this.filterValue.trim().length) {\n            return this.value && this.visibleOptions && this.visibleOptions.length && this.isAllVisibleOptionsChecked();\n        }\n        else {\n            let optionCount = this.getEnabledOptionCount();\n            let disabledSelectedOptionCount = this.disabledSelectedOptions.length;\n\n            return this.value && this.options && (this.value.length > 0 && this.value.length == optionCount + disabledSelectedOptionCount);\n        }\n    }\n\n    isAllVisibleOptionsChecked() {\n        if (!this.visibleOptions || this.visibleOptions.length === 0) {\n            return false;\n        }\n        else {\n            for (let option of this.visibleOptions) {\n                if (!this.isSelected(option.value)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n\n    getEnabledOptionCount(): number {\n        if (this.options) {\n            let count = 0;\n            for (let opt of this.options) {\n                if (!opt.disabled) {\n                    count++;\n                }\n            }\n\n            return count;\n        }\n        else {\n            return 0;\n        }\n    }\n\n    setDisabledSelectedOptions(){\n        if (this.options) {\n            this.disabledSelectedOptions = [];\n            if (this.value) {\n                for (let opt of this.options) {\n                    if (opt.disabled && this.isSelected(opt.value)) {\n                        this.disabledSelectedOptions.push(opt.value);\n                    }\n                }\n            }\n        }\n    }\n\n    show() {\n        if (!this.overlayVisible){\n            this.overlayVisible = true;\n        }\n    }\n\n    onOverlayAnimationStart(event: AnimationEvent) {\n        switch (event.toState) {\n            case 'visible':\n                this.overlay = event.element;\n                this.appendOverlay();\n                if (this.autoZIndex) {\n                    this.overlay.style.zIndex = String(this.baseZIndex + (++DomHandler.zindex));\n                }\n                this.alignOverlay();\n                this.bindDocumentClickListener();\n                this.bindDocumentResizeListener();\n\n                if (this.filterInputChild && this.filterInputChild.nativeElement) {\n                    this.preventModelTouched = true;\n\n                    if (this.autofocusFilter) {\n                        this.filterInputChild.nativeElement.focus();\n                    }\n                }\n\n                this.onPanelShow.emit();\n            break;\n\n            case 'void':\n                this.onOverlayHide();\n            break;\n        }\n    }\n\n    appendOverlay() {\n        if (this.appendTo) {\n            if (this.appendTo === 'body')\n                document.body.appendChild(this.overlay);\n            else\n                DomHandler.appendChild(this.overlay, this.appendTo);\n\n            if (!this.overlay.style.minWidth) {\n                this.overlay.style.minWidth = DomHandler.getWidth(this.containerViewChild.nativeElement) + 'px';\n            }\n        }\n    }\n\n    restoreOverlayAppend() {\n        if (this.overlay && this.appendTo) {\n            this.el.nativeElement.appendChild(this.overlay);\n        }\n    }\n\n    alignOverlay() {\n        if (this.overlay) {\n            if (this.appendTo)\n                DomHandler.absolutePosition(this.overlay, this.containerViewChild.nativeElement);\n            else\n                DomHandler.relativePosition(this.overlay, this.containerViewChild.nativeElement);\n        }\n    }\n\n    hide() {\n        this.overlayVisible = false;\n        this.unbindDocumentClickListener();\n        if (this.resetFilterOnHide){\n            this.filterInputChild.nativeElement.value = '';\n            this.onFilter();\n        }\n        this.onPanelHide.emit();\n    }\n\n    close(event) {\n        this.hide();\n        event.preventDefault();\n        event.stopPropagation();\n    }\n\n    onMouseclick(event,input) {\n        if (this.disabled || this.readonly || event.target.isSameNode(this.accessibleViewChild.nativeElement)) {\n            return;\n        }\n\n        this.onClick.emit(event);\n\n        if (!this.isOverlayClick(event)) {\n            if (this.overlayVisible) {\n                this.hide();\n            }\n            else {\n                input.focus();\n                this.show();\n            }\n        }\n    }\n\n    isOverlayClick(event) {\n        return (this.overlay && this.overlay.contains(<Node> event.target));\n    }\n\n    isOutsideClicked(event: Event): boolean {\n        return !(this.el.nativeElement.isSameNode(event.target) || this.el.nativeElement.contains(event.target) || this.isOverlayClick(event));\n    }\n\n    onInputFocus(event) {\n        this.focus = true;\n        this.onFocus.emit({originalEvent: event});\n    }\n\n    onInputBlur(event) {\n        this.focus = false;\n        this.onBlur.emit({originalEvent: event});\n\n        if (!this.preventModelTouched) {\n            this.onModelTouched();\n        }\n        this.preventModelTouched = false;\n    }\n\n    onOptionKeydown(event) {\n        if (this.readonly) {\n            return;\n        }\n\n        switch(event.originalEvent.which) {\n\n            //down\n            case 40:\n                var nextItem = this.findNextItem(event.originalEvent.target.parentElement);\n                if (nextItem) {\n                    nextItem.focus();\n                }\n\n                event.originalEvent.preventDefault();\n            break;\n\n            //up\n            case 38:\n                var prevItem = this.findPrevItem(event.originalEvent.target.parentElement);\n                if (prevItem) {\n                    prevItem.focus();\n                }\n\n                event.originalEvent.preventDefault();\n            break;\n\n            //enter\n            case 13:\n                this.onOptionClick(event);\n                event.originalEvent.preventDefault();\n            break;\n        }\n    }\n\n    findNextItem(item) {\n        let nextItem = item.nextElementSibling;\n\n        if (nextItem)\n            return DomHandler.hasClass(nextItem.children[0], 'ui-state-disabled') || DomHandler.isHidden(nextItem.children[0]) ? this.findNextItem(nextItem) : nextItem.children[0];\n        else\n            return null;\n    }\n\n    findPrevItem(item) {\n        let prevItem = item.previousElementSibling;\n\n        if (prevItem)\n            return DomHandler.hasClass(prevItem.children[0], 'ui-state-disabled') || DomHandler.isHidden(prevItem.children[0]) ? this.findPrevItem(prevItem) : prevItem.children[0];\n        else\n            return null;\n    }\n\n    onKeydown(event: KeyboardEvent){\n        switch(event.which) {\n            //down\n            case 40:\n                if (!this.overlayVisible && event.altKey) {\n                    this.show();\n                    event.preventDefault();\n                }\n            break;\n\n            //space\n            case 32:\n                if (!this.overlayVisible){\n                    this.show();\n                    event.preventDefault();\n                }\n                break;\n\n            //escape\n            case 27:\n                this.hide();\n            break;\n        }\n    }\n\n    updateLabel() {\n        if (this.value && this.options && this.value.length && this.displaySelectedLabel) {\n            let label = '';\n            for (let i = 0; i < this.value.length; i++) {\n                let itemLabel = this.findLabelByValue(this.value[i]);\n                if (itemLabel) {\n                    if (label.length > 0) {\n                        label = label + ', ';\n                    }\n                    label = label + itemLabel;\n                }\n            }\n\n            if (this.value.length <= this.maxSelectedLabels) {\n                this.valuesAsString = label;\n            }\n            else {\n                let pattern = /{(.*?)}/;\n                if (pattern.test(this.selectedItemsLabel)) {\n                    this.valuesAsString = this.selectedItemsLabel.replace(this.selectedItemsLabel.match(pattern)[0], this.value.length + '');\n                } else {\n                    this.valuesAsString = this.selectedItemsLabel;\n                }\n            }\n        }\n        else {\n            this.valuesAsString = this.defaultLabel;\n        }\n    }\n\n    findLabelByValue(val: any): string {\n        let label = null;\n        for (let i = 0; i < this.options.length; i++) {\n            let option = this.options[i];\n            if (val == null && option.value == null || ObjectUtils.equals(val, option.value, this.dataKey)) {\n                label = option.label;\n                break;\n            }\n        }\n        return label;\n    }\n\n    onFilter() {\n        let inputValue = this.filterInputChild.nativeElement.value;\n        if (inputValue && inputValue.length) {\n            this.filterValue = inputValue;\n            this.activateFilter();\n        }\n        else {\n            this.filterValue = null;\n            this.visibleOptions = this.options;\n            this.filtered = false;\n        }\n    }\n\n    activateFilter() {\n        if (this.options && this.options.length) {\n            let searchFields: string[] = this.filterBy.split(',');\n            this.visibleOptions = FilterUtils.filter(this.options, searchFields, this.filterValue, this.filterMatchMode, this.filterLocale);\n            this.filtered = true;\n        }\n    }\n\n    isItemVisible(option: SelectItem): boolean {\n        if (this.filterValue && this.filterValue.trim().length) {\n            for (let i = 0; i < this.visibleOptions.length; i++) {\n                if (this.visibleOptions[i].value == option.value) {\n                    return true;\n                }\n            }\n        }\n        else {\n            return true;\n        }\n    }\n\n    getVisibleOptions(): SelectItem[] {\n        return this.visibleOptions || this.options;\n    }\n\n    onHeaderCheckboxFocus() {\n        this.headerCheckboxFocus = true;\n    }\n\n    onHeaderCheckboxBlur() {\n        this.headerCheckboxFocus = false;\n    }\n\n    bindDocumentClickListener() {\n        if (!this.documentClickListener) {\n            this.documentClickListener = this.renderer.listen('document', 'click', (event) => {\n                if (this.isOutsideClicked(event)) {\n                    this.hide();\n                }\n\n                this.cd.markForCheck();\n            });\n        }\n    }\n\n    unbindDocumentClickListener() {\n        if (this.documentClickListener) {\n            this.documentClickListener();\n            this.documentClickListener = null;\n        }\n    }\n\n    bindDocumentResizeListener() {\n        this.documentResizeListener = this.onWindowResize.bind(this);\n        window.addEventListener('resize', this.documentResizeListener);\n    }\n\n    unbindDocumentResizeListener() {\n        if (this.documentResizeListener) {\n            window.removeEventListener('resize', this.documentResizeListener);\n            this.documentResizeListener = null;\n        }\n    }\n\n    onWindowResize() {\n        if (!DomHandler.isAndroid()) {\n            this.hide();\n        }\n    }\n\n    onOverlayHide() {\n        this.unbindDocumentClickListener();\n        this.unbindDocumentResizeListener();\n        this.overlay = null;\n        this.onModelTouched();\n    }\n\n    ngOnDestroy() {\n        this.restoreOverlayAppend();\n        this.onOverlayHide();\n    }\n\n}\n\n@NgModule({\n    imports: [CommonModule,SharedModule,ScrollingModule, TooltipModule],\n    exports: [MultiSelect,SharedModule,ScrollingModule],\n    declarations: [MultiSelect,MultiSelectItem]\n})\nexport class MultiSelectModule { }\n"]}