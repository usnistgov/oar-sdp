{"version":3,"sources":["ng://primeng/treetable/treetable.ts"],"names":["TreeTableService","this","sortSource","Subject","selectionSource","contextMenuSource","uiUpdateSource","totalRecordsSource","sortSource$","asObservable","selectionSource$","contextMenuSource$","uiUpdateSource$","totalRecordsSource$","prototype","onSort","sortMeta","next","onSelectionChange","onContextMenu","node","onUIUpdate","value","onTotalRecordsChange","__decorate","Injectable","TreeTable","el","zone","tableService","lazy","lazyLoadOnInit","first","pageLinks","alwaysShowPaginator","paginatorPosition","currentPageReportTemplate","defaultSortOrder","sortMode","resetPageOnSort","selectionChange","EventEmitter","contextMenuSelectionChange","contextMenuSelectionMode","compareSelectionBy","loadingIcon","showLoader","virtualScrollDelay","virtualRowHeight","columnResizeMode","rowTrackBy","index","item","filters","filterDelay","filterMode","onFilter","onNodeExpand","onNodeCollapse","onPage","onLazyLoad","sortFunction","onColResize","onColReorder","onNodeSelect","onNodeUnselect","onContextMenuSelect","onHeaderCheckboxToggle","onEditInit","onEditComplete","onEditCancel","_value","_totalRecords","_sortOrder","selectionKeys","ngOnInit","emit","createLazyLoadMetadata","initialized","ngAfterContentInit","_this","templates","forEach","getType","captionTemplate","template","headerTemplate","bodyTemplate","loadingBodyTemplate","footerTemplate","summaryTemplate","colGroupTemplate","emptyMessageTemplate","paginatorLeftTemplate","paginatorRightTemplate","frozenHeaderTemplate","frozenBodyTemplate","frozenFooterTemplate","frozenColGroupTemplate","ngOnChanges","simpleChange","currentValue","totalRecords","length","sortField","sortSingle","multiSortMeta","sortMultiple","hasFilter","_filter","updateSerializedValue","_sortField","sortOrder","_multiSortMeta","selection","_selection","preventSelectionSetterPropagation","updateSelectionKeys","Object","defineProperty","val","serializedValue","paginator","serializePageNodes","serializeNodes","filteredNodes","parent","nodes","level","visible","nodes_1","__values","nodes_1_1","done","rowNode","expanded","push","children","data","i","rows","dataKey","Array","isArray","_b","_c","String","ObjectUtils","resolveFieldData","onPageChange","event","scrollable","resetScrollTop","sort","originalEvent","field","metaKey","ctrlKey","getSortMeta","order","sortNodes","customSort","mode","node1","node2","value1","value2","result","localeCompare","undefined","numeric","nodes_2","nodes_2_1","sortMultipleNodes","multisortmeta","multisortField","nodes_3","nodes_3_1","isSorted","sorted","globalFilter","virtualScroll","scrollToVirtualIndex","scrollTo","top","scrollableViewChild","scrollableFrozenViewChild","options","isEmpty","getBlockableElement","nativeElement","onColumnResizeBegin","containerLeft","DomHandler","getOffset","containerViewChild","left","lastResizerHelperX","pageX","scrollLeft","preventDefault","onColumnResize","addClass","resizeHelperViewChild","style","height","offsetHeight","display","onColumnResizeEnd","column","delta","offsetLeft","columnWidth","offsetWidth","newColumnWidth","minWidth","parseInt","nextColumn","nextElementSibling","offsetParent","nextColumnWidth","nextColumnMinWidth","scrollableView","findParentScrollableView","scrollableBodyTable","findSingle","scrollableHeaderTable","scrollableFooterTable","resizeColumnIndex","resizeColGroup","width","scrollableBody_1","scrollableHeader","scrollableFooter","scrollableBodyTableWidth","scrollableHeaderTableWidth","isContainerInViewport","setWidth","container","table","calculateScrollbarWidth","tableViewChild","containerWidth","element","removeClass","parent_1","parentElement","hasClass","colGroup","nodeName","col","nextCol","onColumnDragStart","columnElement","reorderIconWidth","getHiddenElementOuterWidth","reorderIndicatorUpViewChild","reorderIconHeight","getHiddenElementOuterHeight","reorderIndicatorDownViewChild","draggedColumn","dataTransfer","setData","onColumnDragEnter","dropHeader","reorderableColumns","containerOffset","dropHeaderOffset","targetLeft","columnCenter","Math","ceil","dropPosition","dropEffect","onColumnDragLeave","onColumnDrop","dropColumn","dragIndex","indexWithinGroup","dropIndex","allowDrop","reorderArray","columns","draggable","handleRowClick","targetNode","target","selectionMode","selected","isSelected","metaSelection","rowTouched","metaKeySelection","dataKeyValue","isSingleSelectionMode","selectionIndex_1","findIndexInSelection","filter","type","isMultipleSelectionMode","__spread","rowIndex","selectionIndex_2","handleRowTouchEnd","handleRowRightClick","contextMenu","contextMenuSelection","show","toggleNodeWithCheckbox","propagateSelectionDown","propagateSelectionUp","toggleNodesWithCheckbox","check","slice","data_1","data_1_1","checked","select","selectedChildCount","childPartialSelected","child","partialSelected","index_1","equals","matchMode","filterTimeout","clearTimeout","isFilterBlank","setTimeout","filterGlobal","trim","globalFilterFieldsArray","globalFilterFields","Error","isStrictMode","isValueChanged","copyNode","__assign","localMatch","globalMatch","paramsWithoutNode","prop","hasOwnProperty","filterMeta","filterField","filterValue","filterMatchMode","filterConstraint","FilterUtils","findFilteredNodes","isFilterMatched","j","copyNodeForGlobal","matches","filteredValue","matched","childNodes","childNodes_1","childNodes_1_1","childNode","copyChildNode","_a","filterLocale","isNodeLeaf","leaf","empty","reset","updateEditingCell","cell","editingCell","bindDocumentEditListener","isEditingCellValid","find","documentEditListener","editingCellClick","unbindDocumentEditListener","document","addEventListener","removeEventListener","ngOnDestroy","ElementRef","NgZone","Input","Output","ViewChild","ContentChildren","PrimeTemplate","Component","selector","providers","changeDetection","ChangeDetectionStrategy","Default","TTBody","tt","TTScrollableView","subscription","subscribe","runOutsideAngular","alignScrollBar","_scrollHeight","includes","console","log","ngAfterViewChecked","ngAfterViewInit","frozen","scrollableAlignerViewChild","calculateScrollbarHeight","frozenColumns","frozenView","previousElementSibling","frozenSiblingBody","bindEvents","scrollHeaderViewChild","headerScrollListener","onHeaderScroll","bind","scrollHeaderBoxViewChild","scrollFooterViewChild","footerScrollListener","onFooterScroll","bodyScrollListener","onBodyScroll","virtualScrollBody","getElementRef","scrollBodyViewChild","unbindEvents","preventBodyScrollPropagation","marginLeft","scrollFooterBoxViewChild","scrollTop","scrollToIndex","hasVerticalOverflow","getDataLength","getViewportSize","getOuterHeight","scrollTableViewChild","scrollBarWidth","marginRight","unsubscribe","CdkVirtualScrollViewport","TTSortableColumn","isEnabled","updateSortState","onClick","clearSelection","onEnterKey","ttSortableColumnDisabled","HostListener","Directive","host","[class.ui-sortable-column]","[class.ui-state-highlight]","[attr.tabindex]","TTSortIcon","TTResizableColumn","resizer","createElement","className","appendChild","resizerMouseDownListener","onMouseDown","bindDocumentEvents","documentMouseMoveListener","onDocumentMouseMove","documentMouseUpListener","onDocumentMouseUp","unbindDocumentEvents","ttResizableColumnDisabled","TTReorderableColumn","mouseDownListener","dragStartListener","onDragStart","dragOverListener","onDragEnter","dragEnterListener","dragLeaveListener","onDragLeave","onDragOver","onDrop","ttReorderableColumnDisabled","TTSelectableRow","which","onTouchEnd","ttSelectableRowDisabled","TTSelectableRowDblClick","TTContextMenuRow","focus","ttContextMenuRowDisabled","[class.ui-contextmenu-selected]","TTCheckbox","disabled","onFocus","boxViewChild","onBlur","TTHeaderCheckbox","valueChangeSubscription","updateCheckedState","selectionChangeSubscription","data_2","data_2_1","TTEditableColumn","openCell","focusable","closeEditingCell","onKeyDown","keyCode","shiftKey","moveToPreviousCell","moveToNextCell","findCell","currentCell","targetCell","findPreviousEditableColumn","invokeElementMethod","findNextEditableColumn","prevCell","previousRow","lastElementChild","nextCell","nextRow","firstElementChild","ttEditableColumnDisabled","TreeTableCellEditor","editableColumn","inputTemplate","outputTemplate","TTRow","prevRow","toggleRowIndex","restoreFocus","row","TreeTableToggler","TreeTableModule","NgModule","imports","CommonModule","PaginatorModule","ScrollingModule","exports","SharedModule","declarations"],"mappings":"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","sourcesContent":["import { NgModule, AfterContentInit, OnInit, OnDestroy, HostListener, Injectable, Directive, Component, Input, Output, EventEmitter, ContentChildren, TemplateRef, QueryList, ElementRef, NgZone, ViewChild, AfterViewInit, AfterViewChecked, OnChanges, SimpleChanges, ChangeDetectionStrategy} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TreeNode } from 'primeng/api';\nimport { Subject, Subscription } from 'rxjs';\nimport { DomHandler } from 'primeng/dom';\nimport { PaginatorModule } from 'primeng/paginator';\nimport { PrimeTemplate, SharedModule } from 'primeng/api';\nimport { SortMeta } from 'primeng/api';\nimport { BlockableUI } from 'primeng/api';\nimport { FilterMetadata } from 'primeng/api';\nimport { ObjectUtils } from 'primeng/utils';\nimport { FilterUtils } from 'primeng/utils';\nimport { ScrollingModule, CdkVirtualScrollViewport } from '@angular/cdk/scrolling';\n\n@Injectable()\nexport class TreeTableService {\n\n    private sortSource = new Subject<SortMeta|SortMeta[]>();\n    private selectionSource = new Subject();\n    private contextMenuSource = new Subject<any>();\n    private uiUpdateSource = new Subject<any>();\n    private totalRecordsSource = new Subject<any>();\n\n    sortSource$ = this.sortSource.asObservable();\n    selectionSource$ = this.selectionSource.asObservable();\n    contextMenuSource$ = this.contextMenuSource.asObservable();\n    uiUpdateSource$ = this.uiUpdateSource.asObservable();\n    totalRecordsSource$ = this.totalRecordsSource.asObservable();\n\n    onSort(sortMeta: SortMeta|SortMeta[]) {\n        this.sortSource.next(sortMeta);\n    }\n\n    onSelectionChange() {\n        this.selectionSource.next();\n    }\n\n    onContextMenu(node: any) {\n        this.contextMenuSource.next(node);\n    }\n\n    onUIUpdate(value: any) {\n        this.uiUpdateSource.next(value);\n    }\n\n    onTotalRecordsChange(value: number) {\n        this.totalRecordsSource.next(value);\n    }\n}\n\n@Component({\n    selector: 'p-treeTable',\n    template: `\n        <div #container [ngStyle]=\"style\" [class]=\"styleClass\"\n                [ngClass]=\"{'ui-treetable ui-widget': true, 'ui-treetable-auto-layout': autoLayout, 'ui-treetable-hoverable-rows': (rowHover||(selectionMode === 'single' || selectionMode === 'multiple')),\n                'ui-treetable-resizable': resizableColumns, 'ui-treetable-resizable-fit': (resizableColumns && columnResizeMode === 'fit'), 'ui-treetable-flex-scrollable': (scrollable && scrollHeight === 'flex')}\">\n            <div class=\"ui-treetable-loading ui-widget-overlay\" *ngIf=\"loading && showLoader\"></div>\n            <div class=\"ui-treetable-loading-content\" *ngIf=\"loading && showLoader\">\n                <i [class]=\"'ui-treetable-loading-icon pi-spin ' + loadingIcon\"></i>\n            </div>\n            <div *ngIf=\"captionTemplate\" class=\"ui-treetable-caption ui-widget-header\">\n                <ng-container *ngTemplateOutlet=\"captionTemplate\"></ng-container>\n            </div>\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" styleClass=\"ui-paginator-top\" [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && (paginatorPosition === 'top' || paginatorPosition =='both')\"\n                [templateLeft]=\"paginatorLeftTemplate\" [templateRight]=\"paginatorRightTemplate\" [dropdownAppendTo]=\"paginatorDropdownAppendTo\"\n                [currentPageReportTemplate]=\"currentPageReportTemplate\" [showCurrentPageReport]=\"showCurrentPageReport\"></p-paginator>\n\n            <div class=\"ui-treetable-wrapper\" *ngIf=\"!scrollable\">\n                <table #table class=\"ui-treetable-table\" [ngClass]=\"tableStyleClass\" [ngStyle]=\"tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <thead class=\"ui-treetable-thead\">\n                        <ng-container *ngTemplateOutlet=\"headerTemplate; context: {$implicit: columns}\"></ng-container>\n                    </thead>\n                    <tfoot class=\"ui-treetable-tfoot\">\n                        <ng-container *ngTemplateOutlet=\"footerTemplate; context {$implicit: columns}\"></ng-container>\n                    </tfoot>\n                    <tbody class=\"ui-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"bodyTemplate\"></tbody>\n                </table>\n            </div>\n\n            <div class=\"ui-treetable-scrollable-wrapper\" *ngIf=\"scrollable\">\n               <div class=\"ui-treetable-scrollable-view ui-treetable-frozen-view\" *ngIf=\"frozenColumns||frozenBodyTemplate\" #scrollableFrozenView [ttScrollableView]=\"frozenColumns\" [frozen]=\"true\" [ngStyle]=\"{width: frozenWidth}\" [scrollHeight]=\"scrollHeight\"></div>\n               <div class=\"ui-treetable-scrollable-view\" #scrollableView [ttScrollableView]=\"columns\" [frozen]=\"false\" [scrollHeight]=\"scrollHeight\" [ngStyle]=\"{left: frozenWidth, width: 'calc(100% - '+frozenWidth+')'}\"></div>\n            </div>\n\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" styleClass=\"ui-paginator-bottom\" [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && (paginatorPosition === 'bottom' || paginatorPosition =='both')\"\n                [templateLeft]=\"paginatorLeftTemplate\" [templateRight]=\"paginatorRightTemplate\" [dropdownAppendTo]=\"paginatorDropdownAppendTo\"\n                [currentPageReportTemplate]=\"currentPageReportTemplate\" [showCurrentPageReport]=\"showCurrentPageReport\"></p-paginator>\n            <div *ngIf=\"summaryTemplate\" class=\"ui-treetable-summary ui-widget-header\">\n                <ng-container *ngTemplateOutlet=\"summaryTemplate\"></ng-container>\n            </div>\n\n            <div #resizeHelper class=\"ui-column-resizer-helper ui-state-highlight\" style=\"display:none\" *ngIf=\"resizableColumns\"></div>\n\n            <span #reorderIndicatorUp class=\"pi pi-arrow-down ui-table-reorder-indicator-up\" *ngIf=\"reorderableColumns\"></span>\n            <span #reorderIndicatorDown class=\"pi pi-arrow-up ui-table-reorder-indicator-down\" *ngIf=\"reorderableColumns\"></span>\n        </div>\n    `,\n    providers: [TreeTableService],\n    changeDetection: ChangeDetectionStrategy.Default\n})\nexport class TreeTable implements AfterContentInit, OnInit, OnDestroy, BlockableUI, OnChanges {\n\n    @Input() columns: any[];\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() tableStyle: any;\n\n    @Input() tableStyleClass: string;\n\n    @Input() autoLayout: boolean;\n\n    @Input() lazy: boolean = false;\n\n    @Input() lazyLoadOnInit: boolean = true;\n\n    @Input() paginator: boolean;\n\n    @Input() rows: number;\n\n    @Input() first: number = 0;\n\n    @Input() pageLinks: number = 5;\n\n    @Input() rowsPerPageOptions: any[];\n\n    @Input() alwaysShowPaginator: boolean = true;\n\n    @Input() paginatorPosition: string = 'bottom';\n\n    @Input() paginatorDropdownAppendTo: any;\n\n    @Input() currentPageReportTemplate: string = '{currentPage} of {totalPages}';\n\n    @Input() showCurrentPageReport: boolean;\n\n    @Input() defaultSortOrder: number = 1;\n\n    @Input() sortMode: string = 'single';\n\n    @Input() resetPageOnSort: boolean = true;\n\n    @Input() customSort: boolean;\n\n    @Input() selectionMode: string;\n\n    @Output() selectionChange: EventEmitter<any> = new EventEmitter();\n\n    @Input() contextMenuSelection: any;\n\n    @Output() contextMenuSelectionChange: EventEmitter<any> = new EventEmitter();\n\n    @Input() contextMenuSelectionMode: string = \"separate\";\n\n    @Input() dataKey: string;\n\n    @Input() metaKeySelection: boolean;\n\n    @Input() compareSelectionBy: string = 'deepEquals';\n\n    @Input() rowHover: boolean;\n\n    @Input() loading: boolean;\n\n    @Input() loadingIcon: string = 'pi pi-spinner';\n\n    @Input() showLoader: boolean = true;\n\n    @Input() scrollable: boolean;\n\n    @Input() scrollHeight: string;\n\n    @Input() virtualScroll: boolean;\n\n    @Input() virtualScrollDelay: number = 150;\n\n    @Input() virtualRowHeight: number = 28;\n\n    @Input() minBufferPx: number;\n\n    @Input() maxBufferPx: number;\n\n    @Input() frozenWidth: string;\n\n    @Input() frozenColumns: any[];\n\n    @Input() resizableColumns: boolean;\n\n    @Input() columnResizeMode: string = 'fit';\n\n    @Input() reorderableColumns: boolean;\n\n    @Input() contextMenu: any;\n\n    @Input() rowTrackBy: Function = (index: number, item: any) => item;\n\n    @Input() filters: { [s: string]: FilterMetadata; } = {};\n\n    @Input() globalFilterFields: string[];\n\n    @Input() filterDelay: number = 300;\n\n    @Input() filterMode: string = 'lenient';\n\n    @Input() filterLocale: string;\n\n    @Output() onFilter: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeExpand: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeCollapse: EventEmitter<any> = new EventEmitter();\n\n    @Output() onPage: EventEmitter<any> = new EventEmitter();\n\n    @Output() onSort: EventEmitter<any> = new EventEmitter();\n\n    @Output() onLazyLoad: EventEmitter<any> = new EventEmitter();\n\n    @Output() sortFunction: EventEmitter<any> = new EventEmitter();\n\n    @Output() onColResize: EventEmitter<any> = new EventEmitter();\n\n    @Output() onColReorder: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeSelect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeUnselect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onContextMenuSelect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onHeaderCheckboxToggle: EventEmitter<any> = new EventEmitter();\n\n    @Output() onEditInit: EventEmitter<any> = new EventEmitter();\n\n    @Output() onEditComplete: EventEmitter<any> = new EventEmitter();\n\n    @Output() onEditCancel: EventEmitter<any> = new EventEmitter();\n\n    @ViewChild('container') containerViewChild: ElementRef;\n\n    @ViewChild('resizeHelper') resizeHelperViewChild: ElementRef;\n\n    @ViewChild('reorderIndicatorUp') reorderIndicatorUpViewChild: ElementRef;\n\n    @ViewChild('reorderIndicatorDown') reorderIndicatorDownViewChild: ElementRef;\n\n    @ViewChild('table') tableViewChild: ElementRef;\n\n    @ViewChild('scrollableView') scrollableViewChild;\n\n    @ViewChild('scrollableFrozenView') scrollableFrozenViewChild;\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<PrimeTemplate>;\n\n    _value: TreeNode[] = [];\n\n    serializedValue: any[];\n\n    _totalRecords: number = 0;\n\n    _multiSortMeta: SortMeta[];\n\n    _sortField: string;\n\n    _sortOrder: number = 1;\n\n    filteredNodes: any[];\n\n    filterTimeout: any;\n\n    colGroupTemplate: TemplateRef<any>;\n\n    captionTemplate: TemplateRef<any>;\n\n    headerTemplate: TemplateRef<any>;\n\n    bodyTemplate: TemplateRef<any>;\n\n    loadingBodyTemplate: TemplateRef<any>;\n\n    footerTemplate: TemplateRef<any>;\n\n    summaryTemplate: TemplateRef<any>;\n\n    emptyMessageTemplate: TemplateRef<any>;\n\n    paginatorLeftTemplate: TemplateRef<any>;\n\n    paginatorRightTemplate: TemplateRef<any>;\n\n    frozenHeaderTemplate: TemplateRef<any>;\n\n    frozenBodyTemplate: TemplateRef<any>;\n\n    frozenFooterTemplate: TemplateRef<any>;\n\n    frozenColGroupTemplate: TemplateRef<any>;\n\n    lastResizerHelperX: number;\n\n    reorderIconWidth: number;\n\n    reorderIconHeight: number;\n\n    draggedColumn: any;\n\n    dropPosition: number;\n\n    preventSelectionSetterPropagation: boolean;\n\n    _selection: any;\n\n    selectionKeys: any = {};\n\n    rowTouched: boolean;\n\n    editingCell: Element;\n\n    editingCellClick: boolean;\n\n    documentEditListener: any;\n\n    initialized: boolean;\n\n    toggleRowIndex: number;\n\n    ngOnInit() {\n        if (this.lazy && this.lazyLoadOnInit) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n        this.initialized = true;\n    }\n\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch (item.getType()) {\n                case 'caption':\n                    this.captionTemplate = item.template;\n                break;\n\n                case 'header':\n                    this.headerTemplate = item.template;\n                break;\n\n                case 'body':\n                    this.bodyTemplate = item.template;\n                break;\n\n                case 'loadingbody':\n                    this.loadingBodyTemplate = item.template;\n                break;\n\n                case 'footer':\n                    this.footerTemplate = item.template;\n                break;\n\n                case 'summary':\n                    this.summaryTemplate = item.template;\n                break;\n\n                case 'colgroup':\n                    this.colGroupTemplate = item.template;\n                break;\n\n                case 'emptymessage':\n                    this.emptyMessageTemplate = item.template;\n                break;\n\n                case 'paginatorleft':\n                    this.paginatorLeftTemplate = item.template;\n                break;\n\n                case 'paginatorright':\n                    this.paginatorRightTemplate = item.template;\n                break;\n\n                case 'frozenheader':\n                    this.frozenHeaderTemplate = item.template;\n                break;\n\n                case 'frozenbody':\n                    this.frozenBodyTemplate = item.template;\n                break;\n\n                case 'frozenfooter':\n                    this.frozenFooterTemplate = item.template;\n                break;\n\n                case 'frozencolgroup':\n                    this.frozenColGroupTemplate = item.template;\n                break;\n            }\n        });\n    }\n\n    constructor(public el: ElementRef, public zone: NgZone, public tableService: TreeTableService) {}\n\n    ngOnChanges(simpleChange: SimpleChanges) {\n        if (simpleChange.value) {\n            this._value = simpleChange.value.currentValue;\n\n            if (!this.lazy) {\n                this.totalRecords = (this._value ? this._value.length : 0);\n\n                if (this.sortMode == 'single' && this.sortField)\n                    this.sortSingle();\n                else if (this.sortMode == 'multiple' && this.multiSortMeta)\n                    this.sortMultiple();\n                else if (this.hasFilter())       //sort already filters\n                    this._filter();\n            }\n\n            this.updateSerializedValue();\n            this.tableService.onUIUpdate(this.value);\n        }\n\n        if (simpleChange.sortField) {\n            this._sortField = simpleChange.sortField.currentValue;\n\n            //avoid triggering lazy load prior to lazy initialization at onInit\n            if ( !this.lazy || this.initialized ) {\n                if (this.sortMode === 'single') {\n                    this.sortSingle();\n                }\n            }\n        }\n\n        if (simpleChange.sortOrder) {\n            this._sortOrder = simpleChange.sortOrder.currentValue;\n\n            //avoid triggering lazy load prior to lazy initialization at onInit\n            if ( !this.lazy || this.initialized ) {\n                if (this.sortMode === 'single') {\n                    this.sortSingle();\n                }\n            }\n        }\n\n        if (simpleChange.multiSortMeta) {\n            this._multiSortMeta = simpleChange.multiSortMeta.currentValue;\n            if (this.sortMode === 'multiple') {\n                this.sortMultiple();\n            }\n        }\n\n        if (simpleChange.selection) {\n            this._selection = simpleChange.selection.currentValue;\n\n            if (!this.preventSelectionSetterPropagation) {\n                this.updateSelectionKeys();\n                this.tableService.onSelectionChange();\n            }\n            this.preventSelectionSetterPropagation = false;\n        }\n    }\n\n    @Input() get value(): any[] {\n        return this._value;\n    }\n    set value(val: any[]) {\n        this._value = val;\n    }\n\n    updateSerializedValue() {\n        this.serializedValue = [];\n\n        if (this.paginator)\n            this.serializePageNodes();\n        else\n            this.serializeNodes(null, this.filteredNodes||this.value, 0, true);\n    }\n\n    serializeNodes(parent, nodes, level, visible) {\n        if (nodes && nodes.length) {\n            for(let node of nodes) {\n                node.parent = parent;\n                const rowNode = {\n                    node: node,\n                    parent: parent,\n                    level: level,\n                    visible: visible && (parent ? parent.expanded : true)\n                };\n                this.serializedValue.push(rowNode);\n\n                if (rowNode.visible && node.expanded) {\n                    this.serializeNodes(node, node.children, level + 1, rowNode.visible);\n                }\n            }\n        }\n    }\n\n    serializePageNodes() {\n        let data = this.filteredNodes || this.value;\n        this.serializedValue = [];\n        if (data && data.length) {\n            const first = this.lazy ? 0 : this.first;\n\n            for(let i = first; i < (first + this.rows); i++) {\n                let node = data[i];\n                if (node) {\n                    this.serializedValue.push({\n                        node: node,\n                        parent: null,\n                        level: 0,\n                        visible: true\n                    });\n\n                    this.serializeNodes(node, node.children, 1, true);\n                }\n            }\n        }\n    }\n\n    @Input() get totalRecords(): number {\n        return this._totalRecords;\n    }\n    set totalRecords(val: number) {\n        this._totalRecords = val;\n        this.tableService.onTotalRecordsChange(this._totalRecords);\n    }\n\n    @Input() get sortField(): string {\n        return this._sortField;\n    }\n\n    set sortField(val: string) {\n        this._sortField = val;\n    }\n\n    @Input() get sortOrder(): number {\n        return this._sortOrder;\n    }\n    set sortOrder(val: number) {\n        this._sortOrder = val;\n    }\n\n    @Input() get multiSortMeta(): SortMeta[] {\n        return this._multiSortMeta;\n    }\n\n    set multiSortMeta(val: SortMeta[]) {\n        this._multiSortMeta = val;\n    }\n\n    @Input() get selection(): any {\n        return this._selection;\n    }\n\n    set selection(val: any) {\n        this._selection = val;\n    }\n\n    updateSelectionKeys() {\n        if (this.dataKey && this._selection) {\n            this.selectionKeys = {};\n            if (Array.isArray(this._selection)) {\n                for(let node of this._selection) {\n                    this.selectionKeys[String(ObjectUtils.resolveFieldData(node.data, this.dataKey))] = 1;\n                }\n            }\n            else {\n                this.selectionKeys[String(ObjectUtils.resolveFieldData(this._selection.data, this.dataKey))] = 1;\n            }\n        }\n    }\n\n    onPageChange(event) {\n        this.first = event.first;\n        this.rows = event.rows;\n\n        if (this.lazy)\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        else\n            this.serializePageNodes();\n\n        this.onPage.emit({\n            first: this.first,\n            rows: this.rows\n        });\n\n        this.tableService.onUIUpdate(this.value);\n\n        if (this.scrollable) {\n            this.resetScrollTop();\n        }\n    }\n\n    sort(event) {\n        let originalEvent = event.originalEvent;\n\n        if (this.sortMode === 'single') {\n            this._sortOrder = (this.sortField === event.field) ? this.sortOrder * -1 : this.defaultSortOrder;\n            this._sortField = event.field;\n            this.sortSingle();\n\n            if (this.resetPageOnSort && this.scrollable) {\n                this.resetScrollTop();\n            }\n        }\n        if (this.sortMode === 'multiple') {\n            let metaKey = originalEvent.metaKey || originalEvent.ctrlKey;\n            let sortMeta = this.getSortMeta(event.field);\n\n            if (sortMeta) {\n                if (!metaKey) {\n                    this._multiSortMeta = [{ field: event.field, order: sortMeta.order * -1 }]\n                \n                    if (this.resetPageOnSort && this.scrollable) {\n                        this.resetScrollTop();\n                    }\n                }\n                else {\n                    sortMeta.order = sortMeta.order * -1;\n                }\n            }\n            else {\n                if (!metaKey || !this.multiSortMeta) {\n                    this._multiSortMeta = [];\n\n                    if (this.resetPageOnSort && this.scrollable) {\n                        this.resetScrollTop();\n                    }\n                }\n                this.multiSortMeta.push({ field: event.field, order: this.defaultSortOrder });\n            }\n\n            this.sortMultiple();\n        }\n    }\n\n    sortSingle() {\n        if (this.sortField && this.sortOrder) {\n            if (this.lazy) {\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\n            }\n            else if (this.value) {\n                this.sortNodes(this.value);\n\n                if (this.hasFilter()) {\n                    this._filter();\n                }\n            }\n\n            let sortMeta: SortMeta = {\n                field: this.sortField,\n                order: this.sortOrder\n            };\n\n            this.onSort.emit(sortMeta);\n            this.tableService.onSort(sortMeta);\n            this.updateSerializedValue();\n        }\n    }\n\n    sortNodes(nodes) {\n        if (!nodes || nodes.length === 0) {\n            return;\n        }\n\n        if (this.customSort) {\n            this.sortFunction.emit({\n                data: nodes,\n                mode: this.sortMode,\n                field: this.sortField,\n                order: this.sortOrder\n            });\n        }\n        else {\n            nodes.sort((node1, node2) => {\n                let value1 = ObjectUtils.resolveFieldData(node1.data, this.sortField);\n                let value2 = ObjectUtils.resolveFieldData(node2.data, this.sortField);\n                let result = null;\n\n                if (value1 == null && value2 != null)\n                    result = -1;\n                else if (value1 != null && value2 == null)\n                    result = 1;\n                else if (value1 == null && value2 == null)\n                    result = 0;\n                else if (typeof value1 === 'string' && typeof value2 === 'string')\n                    result = value1.localeCompare(value2, undefined, {numeric: true});\n                else\n                    result = (value1 < value2) ? -1 : (value1 > value2) ? 1 : 0;\n\n                return (this.sortOrder * result);\n            });\n        }\n\n        for(let node of nodes) {\n            this.sortNodes(node.children);\n        }\n    }\n\n    sortMultiple() {\n        if (this.multiSortMeta) {\n            if (this.lazy) {\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\n            }\n            else if (this.value) {\n               this.sortMultipleNodes(this.value);\n\n                if (this.hasFilter()) {\n                    this._filter();\n                }\n            }\n\n            this.onSort.emit({\n                multisortmeta: this.multiSortMeta\n            });\n            this.tableService.onSort(this.multiSortMeta);\n            this.updateSerializedValue();\n        }\n    }\n\n    sortMultipleNodes(nodes) {\n        if (!nodes || nodes.length === 0) {\n            return;\n        }\n\n        if (this.customSort) {\n            this.sortFunction.emit({\n                data: this.value,\n                mode: this.sortMode,\n                multiSortMeta: this.multiSortMeta\n            });\n        }\n        else {\n            nodes.sort((node1, node2) => {\n                return this.multisortField(node1, node2, this.multiSortMeta, 0);\n            });\n        }\n\n        for(let node of nodes) {\n            this.sortMultipleNodes(node.children);\n        }\n    }\n\n    multisortField(node1, node2, multiSortMeta, index) {\n        let value1 = ObjectUtils.resolveFieldData(node1.data, multiSortMeta[index].field);\n        let value2 = ObjectUtils.resolveFieldData(node2.data, multiSortMeta[index].field);\n        let result = null;\n\n        if (value1 == null && value2 != null)\n            result = -1;\n        else if (value1 != null && value2 == null)\n            result = 1;\n        else if (value1 == null && value2 == null)\n            result = 0;\n        if (typeof value1 == 'string' || value1 instanceof String) {\n            if (value1.localeCompare && (value1 != value2)) {\n                return (multiSortMeta[index].order * value1.localeCompare(value2, undefined, {numeric: true}));\n            }\n        }\n        else {\n            result = (value1 < value2) ? -1 : 1;\n        }\n\n        if (value1 == value2) {\n            return (multiSortMeta.length - 1) > (index) ? (this.multisortField(node1, node2, multiSortMeta, index + 1)) : 0;\n        }\n\n        return (multiSortMeta[index].order * result);\n    }\n\n    getSortMeta(field: string) {\n        if (this.multiSortMeta && this.multiSortMeta.length) {\n            for (let i = 0; i < this.multiSortMeta.length; i++) {\n                if (this.multiSortMeta[i].field === field) {\n                    return this.multiSortMeta[i];\n                }\n            }\n        }\n\n        return null;\n    }\n\n    isSorted(field: string) {\n        if (this.sortMode === 'single') {\n            return (this.sortField && this.sortField === field);\n        }\n        else if (this.sortMode === 'multiple') {\n            let sorted = false;\n            if (this.multiSortMeta)Â {\n                for(let i = 0; i < this.multiSortMeta.length; i++) {\n                    if (this.multiSortMeta[i].field == field)Â {\n                        sorted = true;\n                        break;\n                    }\n                }\n            }\n            return sorted;\n        }\n    }\n\n    createLazyLoadMetadata(): any {\n        return {\n            first: this.first,\n            rows: this.rows,\n            sortField: this.sortField,\n            sortOrder: this.sortOrder,\n            filters: this.filters,\n            globalFilter: this.filters && this.filters['global'] ? this.filters['global'].value : null,\n            multiSortMeta: this.multiSortMeta\n        };\n    }\n\n    public resetScrollTop() {\n        if (this.virtualScroll)\n            this.scrollToVirtualIndex(0);\n        else\n            this.scrollTo({top: 0});\n    }\n\n    public scrollToVirtualIndex(index: number) {\n        if (this.scrollableViewChild) {\n            this.scrollableViewChild.scrollToVirtualIndex(index);\n        }\n\n        if (this.scrollableFrozenViewChild) {\n            this.scrollableFrozenViewChild.scrollToVirtualIndex(index);\n        }\n    }\n\n    public scrollTo(options) {\n        if (this.scrollableViewChild) {\n            this.scrollableViewChild.scrollTo(options);\n        }\n\n        if (this.scrollableFrozenViewChild) {\n            this.scrollableFrozenViewChild.scrollTo(options);\n        }\n    }\n\n    isEmpty() {\n        let data = this.filteredNodes||this.value;\n        return data == null || data.length == 0;\n    }\n\n    getBlockableElement(): HTMLElementÂ {\n        return this.el.nativeElement.children[0];\n    }\n\n    onColumnResizeBegin(event) {\n        let containerLeft = DomHandler.getOffset(this.containerViewChild.nativeElement).left;\n        this.lastResizerHelperX = (event.pageX - containerLeft + this.containerViewChild.nativeElement.scrollLeft);\n        event.preventDefault();\n    }\n\n    onColumnResize(event) {\n        let containerLeft = DomHandler.getOffset(this.containerViewChild.nativeElement).left;\n        DomHandler.addClass(this.containerViewChild.nativeElement, 'ui-unselectable-text');\n        this.resizeHelperViewChild.nativeElement.style.height = this.containerViewChild.nativeElement.offsetHeight + 'px';\n        this.resizeHelperViewChild.nativeElement.style.top = 0 + 'px';\n        this.resizeHelperViewChild.nativeElement.style.left = (event.pageX - containerLeft + this.containerViewChild.nativeElement.scrollLeft) + 'px';\n\n        this.resizeHelperViewChild.nativeElement.style.display = 'block';\n    }\n\n    onColumnResizeEnd(event, column) {\n        let delta = this.resizeHelperViewChild.nativeElement.offsetLeft - this.lastResizerHelperX;\n        let columnWidth = column.offsetWidth;\n        let newColumnWidth = columnWidth + delta;\n        let minWidth = column.style.minWidth || 15;\n\n        if (columnWidth + delta > parseInt(minWidth)) {\n            if (this.columnResizeMode === 'fit') {\n                let nextColumn = column.nextElementSibling;\n                while (!nextColumn.offsetParent) {\n                    nextColumn = nextColumn.nextElementSibling;\n                }\n\n                if (nextColumn) {\n                    let nextColumnWidth = nextColumn.offsetWidth - delta;\n                    let nextColumnMinWidth = nextColumn.style.minWidth || 15;\n\n                    if (newColumnWidth > 15 && nextColumnWidth > parseInt(nextColumnMinWidth)) {\n                        if (this.scrollable) {\n                            let scrollableView = this.findParentScrollableView(column);\n                            let scrollableBodyTable = DomHandler.findSingle(scrollableView, '.ui-treetable-scrollable-body table');\n                            let scrollableHeaderTable = DomHandler.findSingle(scrollableView, 'table.ui-treetable-scrollable-header-table');\n                            let scrollableFooterTable = DomHandler.findSingle(scrollableView, 'table.ui-treetable-scrollable-footer-table');\n                            let resizeColumnIndex = DomHandler.index(column);\n\n                            this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                            this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                            this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                        }\n                        else {\n                            column.style.width = newColumnWidth + 'px';\n                            if (nextColumn) {\n                                nextColumn.style.width = nextColumnWidth + 'px';\n                            }\n                        }\n                    }\n                }\n            }\n            else if (this.columnResizeMode === 'expand') {\n                if (this.scrollable) {\n                    let scrollableView = this.findParentScrollableView(column);\n                    let scrollableBody = DomHandler.findSingle(scrollableView, '.ui-treetable-scrollable-body');\n                    let scrollableBodyTable = DomHandler.findSingle(scrollableView, '.ui-treetable-scrollable-body table');\n                    let scrollableHeader = DomHandler.findSingle(scrollableView, '.ui-treetable-scrollable-header');\n                    let scrollableFooter = DomHandler.findSingle(scrollableView, '.ui-treetable-scrollable-footer');\n                    let scrollableHeaderTable = DomHandler.findSingle(scrollableView, 'table.ui-treetable-scrollable-header-table');\n                    let scrollableFooterTable = DomHandler.findSingle(scrollableView, 'table.ui-treetable-scrollable-footer-table');\n                    scrollableBodyTable.style.width = scrollableBodyTable.offsetWidth + delta + 'px';\n                    scrollableHeaderTable.style.width = scrollableHeaderTable.offsetWidth + delta + 'px';\n                    if (scrollableFooterTable) {\n                        scrollableFooterTable.style.width = scrollableFooterTable.offsetWidth + delta + 'px';\n                    }\n                    let resizeColumnIndex = DomHandler.index(column);\n\n                    const scrollableBodyTableWidth = column ? scrollableBodyTable.offsetWidth + delta : newColumnWidth;\n                    const scrollableHeaderTableWidth = column ? scrollableHeaderTable.offsetWidth + delta : newColumnWidth;\n                    const isContainerInViewport = this.containerViewChild.nativeElement.offsetWidth >= scrollableBodyTableWidth;\n\n                    let setWidth = (container, table, width, isContainerInViewport) => {\n                        if (container && table) {\n                            container.style.width = isContainerInViewport ? width + DomHandler.calculateScrollbarWidth(scrollableBody) + 'px' : 'auto'\n                            table.style.width = width + 'px';\n                        }\n                    };\n            \n                    setWidth(scrollableBody, scrollableBodyTable, scrollableBodyTableWidth, isContainerInViewport);\n                    setWidth(scrollableHeader, scrollableHeaderTable, scrollableHeaderTableWidth, isContainerInViewport);\n                    setWidth(scrollableFooter, scrollableFooterTable, scrollableHeaderTableWidth, isContainerInViewport);\n\n                    this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, null);\n                    this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, null);\n                    this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, null);\n                }\n                else {\n                    this.tableViewChild.nativeElement.style.width = this.tableViewChild.nativeElement.offsetWidth + delta + 'px';\n                    column.style.width = newColumnWidth + 'px';\n                    let containerWidth = this.tableViewChild.nativeElement.style.width;\n                    this.containerViewChild.nativeElement.style.width = containerWidth + 'px';\n                }\n            }\n\n            this.onColResize.emit({\n                element: column,\n                delta: delta\n            });\n        }\n\n        this.resizeHelperViewChild.nativeElement.style.display = 'none';\n        DomHandler.removeClass(this.containerViewChild.nativeElement, 'ui-unselectable-text');\n    }\n\n    findParentScrollableView(column) {\n        if (column) {\n            let parent = column.parentElement;\n            while (parent && !DomHandler.hasClass(parent, 'ui-treetable-scrollable-view')) {\n                parent = parent.parentElement;\n            }\n\n            return parent;\n        }\n        else {\n            return null;\n        }\n    }\n\n    resizeColGroup(table, resizeColumnIndex, newColumnWidth, nextColumnWidth) {\n        if (table) {\n            let colGroup = table.children[0].nodeName === 'COLGROUP' ? table.children[0] : null;\n\n            if (colGroup) {\n                let col = colGroup.children[resizeColumnIndex];\n                let nextCol = col.nextElementSibling;\n                col.style.width = newColumnWidth + 'px';\n\n                if (nextCol && nextColumnWidth) {\n                    nextCol.style.width = nextColumnWidth + 'px';\n                }\n            }\n            else {\n                throw \"Scrollable tables require a colgroup to support resizable columns\";\n            }\n        }\n    }\n\n    onColumnDragStart(event, columnElement) {\n        this.reorderIconWidth = DomHandler.getHiddenElementOuterWidth(this.reorderIndicatorUpViewChild.nativeElement);\n        this.reorderIconHeight = DomHandler.getHiddenElementOuterHeight(this.reorderIndicatorDownViewChild.nativeElement);\n        this.draggedColumn = columnElement;\n        event.dataTransfer.setData('text', 'b');    // For firefox\n    }\n\n    onColumnDragEnter(event, dropHeader) {\n        if (this.reorderableColumns && this.draggedColumn && dropHeader) {\n            event.preventDefault();\n            let containerOffset = DomHandler.getOffset(this.containerViewChild.nativeElement);\n            let dropHeaderOffset = DomHandler.getOffset(dropHeader);\n\n            if (this.draggedColumn != dropHeader) {\n                let targetLeft = dropHeaderOffset.left - containerOffset.left;\n                let targetTop = containerOffset.top - dropHeaderOffset.top;\n                let columnCenter = dropHeaderOffset.left + dropHeader.offsetWidth / 2;\n\n                this.reorderIndicatorUpViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top - (this.reorderIconHeight - 1) + 'px';\n                this.reorderIndicatorDownViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top + dropHeader.offsetHeight + 'px';\n\n                if (event.pageX > columnCenter) {\n                    this.reorderIndicatorUpViewChild.nativeElement.style.left = (targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.reorderIndicatorDownViewChild.nativeElement.style.left = (targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.dropPosition = 1;\n                }\n                else {\n                    this.reorderIndicatorUpViewChild.nativeElement.style.left = (targetLeft - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.reorderIndicatorDownViewChild.nativeElement.style.left = (targetLeft - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.dropPosition = -1;\n                }\n\n                this.reorderIndicatorUpViewChild.nativeElement.style.display = 'block';\n                this.reorderIndicatorDownViewChild.nativeElement.style.display = 'block';\n            }\n            else {\n                event.dataTransfer.dropEffect = 'none';\n            }\n        }\n    }\n\n    onColumnDragLeave(event) {\n        if (this.reorderableColumns && this.draggedColumn) {\n            event.preventDefault();\n            this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n            this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n        }\n    }\n\n    onColumnDrop(event, dropColumn) {\n        event.preventDefault();\n        if (this.draggedColumn) {\n            let dragIndex = DomHandler.indexWithinGroup(this.draggedColumn, 'ttreorderablecolumn');\n            let dropIndex = DomHandler.indexWithinGroup(dropColumn, 'ttreorderablecolumn');\n            let allowDrop = (dragIndex != dropIndex);\n            if (allowDrop && ((dropIndex - dragIndex == 1 && this.dropPosition === -1) || (dragIndex - dropIndex == 1 && this.dropPosition === 1))) {\n                allowDrop = false;\n            }\n\n            if (allowDrop && ((dropIndex < dragIndex && this.dropPosition === 1))) {\n                dropIndex = dropIndex + 1;\n            }\n\n            if (allowDrop && ((dropIndex > dragIndex && this.dropPosition === -1))) {\n                dropIndex = dropIndex - 1;\n            }\n\n            if (allowDrop) {\n                ObjectUtils.reorderArray(this.columns, dragIndex, dropIndex);\n\n                this.onColReorder.emit({\n                    dragIndex: dragIndex,\n                    dropIndex: dropIndex,\n                    columns: this.columns\n                });\n            }\n\n            this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n            this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n            this.draggedColumn.draggable = false;\n            this.draggedColumn = null;\n            this.dropPosition = null;\n        }\n    }\n\n    handleRowClick(event) {\n        let targetNode = (<HTMLElement> event.originalEvent.target).nodeName;\n        if (targetNode == 'INPUT' || targetNode == 'BUTTON' || targetNode == 'A' || (DomHandler.hasClass(event.originalEvent.target, 'ui-clickable'))) {\n            return;\n        }\n\n        if (this.selectionMode) {\n            this.preventSelectionSetterPropagation = true;\n            let rowNode = event.rowNode;\n            let selected = this.isSelected(rowNode.node);\n            let metaSelection = this.rowTouched ? false : this.metaKeySelection;\n            let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(rowNode.node.data, this.dataKey)) : null;\n\n            if (metaSelection) {\n                let metaKey = event.originalEvent.metaKey||event.originalEvent.ctrlKey;\n\n                if (selected && metaKey) {\n                    if (this.isSingleSelectionMode()) {\n                        this._selection = null;\n                        this.selectionKeys = {};\n                        this.selectionChange.emit(null);\n                    }\n                    else {\n                        let selectionIndex = this.findIndexInSelection(rowNode.node);\n                        this._selection = this.selection.filter((val,i) => i != selectionIndex);\n                        this.selectionChange.emit(this.selection);\n                        if (dataKeyValue) {\n                            delete this.selectionKeys[dataKeyValue];\n                        }\n                    }\n\n                    this.onNodeUnselect.emit({originalEvent: event.originalEvent, node: rowNode.node, type: 'row'});\n                }\n                else {\n                    if (this.isSingleSelectionMode()) {\n                        this._selection = rowNode.node;\n                        this.selectionChange.emit(rowNode.node);\n                        if (dataKeyValue) {\n                            this.selectionKeys = {};\n                            this.selectionKeys[dataKeyValue] = 1;\n                        }\n                    }\n                    else if (this.isMultipleSelectionMode()) {\n                        if (metaKey) {\n                            this._selection = this.selection||[];\n                        }\n                        else {\n                            this._selection = [];\n                            this.selectionKeys = {};\n                        }\n\n                        this._selection = [...this.selection, rowNode.node];\n                        this.selectionChange.emit(this.selection);\n                        if (dataKeyValue) {\n                            this.selectionKeys[dataKeyValue] = 1;\n                        }\n                    }\n\n                    this.onNodeSelect.emit({originalEvent: event.originalEvent, node: rowNode.node, type: 'row', index: event.rowIndex});\n                }\n            }\n            else {\n                if (this.selectionMode === 'single') {\n                    if (selected) {\n                        this._selection = null;\n                        this.selectionKeys = {};\n                        this.selectionChange.emit(this.selection);\n                        this.onNodeUnselect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row' });\n                    }\n                    else {\n                        this._selection = rowNode.node;\n                        this.selectionChange.emit(this.selection);\n                        this.onNodeSelect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row', index: event.rowIndex });\n                        if (dataKeyValue) {\n                            this.selectionKeys = {};\n                            this.selectionKeys[dataKeyValue] = 1;\n                        }\n                    }\n                }\n                else if (this.selectionMode === 'multiple') {\n                    if (selected) {\n                        let selectionIndex = this.findIndexInSelection(rowNode.node);\n                        this._selection = this.selection.filter((val, i) => i != selectionIndex);\n                        this.selectionChange.emit(this.selection);\n                        this.onNodeUnselect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row' });\n                        if (dataKeyValue) {\n                            delete this.selectionKeys[dataKeyValue];\n                        }\n                    }\n                    else {\n                        this._selection = this.selection ? [...this.selection, rowNode.node] : [rowNode.node];\n                        this.selectionChange.emit(this.selection);\n                        this.onNodeSelect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row', index: event.rowIndex });\n                        if (dataKeyValue) {\n                            this.selectionKeys[dataKeyValue] = 1;\n                        }\n                    }\n                }\n            }\n\n            this.tableService.onSelectionChange();\n        }\n\n        this.rowTouched = false;\n    }\n\n    handleRowTouchEnd(event) {\n        this.rowTouched = true;\n    }\n\n    handleRowRightClick(event) {\n        if (this.contextMenu) {\n            const node = event.rowNode.node;\n\n            if (this.contextMenuSelectionMode === 'separate') {\n                this.contextMenuSelection = node;\n                this.contextMenuSelectionChange.emit(node);\n                this.onContextMenuSelect.emit({originalEvent: event.originalEvent, node: node});\n                this.contextMenu.show(event.originalEvent);\n                this.tableService.onContextMenu(node);\n            }\n            else if (this.contextMenuSelectionMode === 'joint') {\n                this.preventSelectionSetterPropagation = true;\n                let selected = this.isSelected(node);\n                let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\n\n                if (!selected) {\n                    if (this.isSingleSelectionMode()) {\n                        this.selection = node;\n                        this.selectionChange.emit(node);\n                    }\n                    else if (this.isMultipleSelectionMode()) {\n                        this.selection = [node];\n                        this.selectionChange.emit(this.selection);\n                    }\n\n                    if (dataKeyValue) {\n                        this.selectionKeys[dataKeyValue] = 1;\n                    }\n                }\n\n                this.contextMenu.show(event.originalEvent);\n                this.onContextMenuSelect.emit({originalEvent: event.originalEvent, node: node});\n            }\n        }\n    }\n\n    toggleNodeWithCheckbox(event) {\n        this.selection = this.selection||[];\n        this.preventSelectionSetterPropagation = true;\n        let node = event.rowNode.node;\n        let selected = this.isSelected(node);\n\n        if (selected) {\n            this.propagateSelectionDown(node, false);\n            if (event.rowNode.parent) {\n                this.propagateSelectionUp(node.parent, false);\n            }\n            this.selectionChange.emit(this.selection);\n            this.onNodeUnselect.emit({originalEvent: event, node: node});\n        }\n        else {\n            this.propagateSelectionDown(node, true);\n            if (event.rowNode.parent) {\n                this.propagateSelectionUp(node.parent, true);\n            }\n            this.selectionChange.emit(this.selection);\n            this.onNodeSelect.emit({originalEvent: event, node: node});\n        }\n\n        this.tableService.onSelectionChange();\n    }\n\n    toggleNodesWithCheckbox(event: Event, check: boolean) {\n        let data = this.filteredNodes || this.value;\n        this._selection = check && data ? data.slice() : [];\n        if (check) {\n            if (data && data.length) {\n                for (let node of data) {\n                    this.propagateSelectionDown(node, true);\n                }\n            }\n        }\n        else {\n            this._selection = [];\n            this.selectionKeys = {};\n        }\n\n        this.preventSelectionSetterPropagation = true;\n        this.selectionChange.emit(this._selection);\n        this.tableService.onSelectionChange();\n        this.onHeaderCheckboxToggle.emit({originalEvent: event, checked: check});\n    }\n\n    propagateSelectionUp(node: TreeNode, select: boolean) {\n        if (node.children && node.children.length) {\n            let selectedChildCount: number = 0;\n            let childPartialSelected: boolean = false;\n            let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\n\n            for (let child of node.children) {\n                if (this.isSelected(child))\n                selectedChildCount++;\n                else if (child.partialSelected)\n                    childPartialSelected = true;\n            }\n\n            if (select && selectedChildCount == node.children.length) {\n                this._selection =  [...this.selection||[], node];\n                node.partialSelected = false;\n                if (dataKeyValue) {\n                    this.selectionKeys[dataKeyValue] = 1;\n                }\n            }\n            else {\n                if (!select) {\n                    let index = this.findIndexInSelection(node);\n                    if (index >= 0) {\n                        this._selection =  this.selection.filter((val,i) => i!=index);\n\n                        if (dataKeyValue) {\n                            delete this.selectionKeys[dataKeyValue];\n                        }\n                    }\n                }\n\n                if (childPartialSelected || selectedChildCount > 0 && selectedChildCount != node.children.length)\n                    node.partialSelected = true;\n                else\n                    node.partialSelected = false;\n            }\n        }\n\n        let parent = node.parent;\n        if (parent) {\n            this.propagateSelectionUp(parent, select);\n        }\n    }\n\n    propagateSelectionDown(node: TreeNode, select: boolean) {\n        let index = this.findIndexInSelection(node);\n        let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\n\n        if (select && index == -1) {\n            this._selection =  [...this.selection||[],node]\n            if (dataKeyValue) {\n                this.selectionKeys[dataKeyValue] = 1;\n            }\n        }\n        else if (!select && index > -1) {\n            this._selection =  this.selection.filter((val,i) => i!=index);\n            if (dataKeyValue) {\n                delete this.selectionKeys[dataKeyValue];\n            }\n        }\n\n        node.partialSelected = false;\n\n        if (node.children && node.children.length) {\n            for (let child of node.children) {\n                this.propagateSelectionDown(child, select);\n            }\n        }\n    }\n\n    isSelected(node) {\n        if (node && this.selection) {\n            if (this.dataKey) {\n                return this.selectionKeys[ObjectUtils.resolveFieldData(node.data, this.dataKey)] !== undefined;\n            }\n            else {\n                if (this.selection instanceof Array)\n                    return this.findIndexInSelection(node) > -1;\n                else\n                    return this.equals(node, this.selection);\n            }\n        }\n\n        return false;\n    }\n\n    findIndexInSelection(node: any) {\n        let index: number = -1;\n        if (this.selection && this.selection.length) {\n            for (let i = 0; i < this.selection.length; i++) {\n                if (this.equals(node, this.selection[i])) {\n                    index = i;\n                    break;\n                }\n            }\n        }\n\n        return index;\n    }\n\n    isSingleSelectionMode() {\n        return this.selectionMode === 'single';\n    }\n\n    isMultipleSelectionMode() {\n        return this.selectionMode === 'multiple';\n    }\n\n    equals(node1, node2) {\n        return this.compareSelectionBy === 'equals' ? (node1 === node2) : ObjectUtils.equals(node1.data, node2.data, this.dataKey);\n    }\n\n    filter(value, field, matchMode) {\n        if (this.filterTimeout) {\n            clearTimeout(this.filterTimeout);\n        }\n\n        if (!this.isFilterBlank(value)) {\n            this.filters[field] = { value: value, matchMode: matchMode };\n        } else if (this.filters[field]) {\n            delete this.filters[field];\n        }\n\n        this.filterTimeout = setTimeout(() => {\n            this._filter();\n            this.filterTimeout = null;\n        }, this.filterDelay);\n    }\n\n    filterGlobal(value, matchMode) {\n        this.filter(value, 'global', matchMode);\n    }\n\n    isFilterBlank(filter: any): boolean {\n        if (filter !== null && filter !== undefined) {\n            if ((typeof filter === 'string' && filter.trim().length == 0) || (filter instanceof Array && filter.length == 0))\n                return true;\n            else\n                return false;\n        }\n        return true;\n    }\n\n    _filter() {\n        if (this.lazy) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n        else {\n            if (!this.value) {\n                return;\n            }\n\n            if (!this.hasFilter()) {\n                this.filteredNodes = null;\n                if (this.paginator) {\n                    this.totalRecords = this.value ? this.value.length : 0;\n                }\n            }\n            else {\n                let globalFilterFieldsArray;\n                if (this.filters['global']) {\n                    if (!this.columns && !this.globalFilterFields)\n                        throw new Error('Global filtering requires dynamic columns or globalFilterFields to be defined.');\n                    else\n                        globalFilterFieldsArray = this.globalFilterFields||this.columns;\n                }\n\n                this.filteredNodes = [];\n                const isStrictMode = this.filterMode === 'strict';\n                let isValueChanged = false;\n\n                for (let node of this.value) {\n                    let copyNode = {...node};\n                    let localMatch = true;\n                    let globalMatch = false;\n                    let paramsWithoutNode;\n\n                    for (let prop in this.filters) {\n                        if (this.filters.hasOwnProperty(prop) && prop !== 'global') {\n                            let filterMeta = this.filters[prop];\n                            let filterField = prop;\n                            let filterValue = filterMeta.value;\n                            let filterMatchMode = filterMeta.matchMode || 'startsWith';\n                            let filterConstraint = FilterUtils[filterMatchMode];\n                            paramsWithoutNode = {filterField, filterValue, filterConstraint, isStrictMode};\n                            if ((isStrictMode && !(this.findFilteredNodes(copyNode, paramsWithoutNode) || this.isFilterMatched(copyNode, paramsWithoutNode))) ||\n                                (!isStrictMode && !(this.isFilterMatched(copyNode, paramsWithoutNode) || this.findFilteredNodes(copyNode, paramsWithoutNode)))) {\n                                    localMatch = false;\n                            }\n\n                            if (!localMatch) {\n                                break;\n                            }\n                        }\n                    }\n\n                    if (this.filters['global'] && !globalMatch && globalFilterFieldsArray) {\n                        for(let j = 0; j < globalFilterFieldsArray.length; j++) {\n                            let copyNodeForGlobal = {...copyNode};\n                            let filterField = globalFilterFieldsArray[j].field||globalFilterFieldsArray[j];\n                            let filterValue = this.filters['global'].value;\n                            let filterConstraint = FilterUtils[this.filters['global'].matchMode];\n                            paramsWithoutNode = {filterField, filterValue, filterConstraint, isStrictMode};\n\n                            if ((isStrictMode && (this.findFilteredNodes(copyNodeForGlobal, paramsWithoutNode) || this.isFilterMatched(copyNodeForGlobal, paramsWithoutNode))) ||\n                                (!isStrictMode && (this.isFilterMatched(copyNodeForGlobal, paramsWithoutNode) || this.findFilteredNodes(copyNodeForGlobal, paramsWithoutNode)))) {\n                                    globalMatch = true;\n                                    copyNode = copyNodeForGlobal;\n                            }\n                        }\n                    }\n\n                    let matches = localMatch;\n                    if (this.filters['global']) {\n                        matches = localMatch && globalMatch;\n                    }\n\n                    if (matches) {\n                        this.filteredNodes.push(copyNode);\n                    }\n\n                    isValueChanged = isValueChanged || !localMatch || globalMatch || (localMatch && this.filteredNodes.length > 0) || (!globalMatch && this.filteredNodes.length === 0)\n                }\n\n                if (!isValueChanged) {\n                    this.filteredNodes = null;\n                }\n\n                if (this.paginator) {\n                    this.totalRecords = this.filteredNodes ? this.filteredNodes.length : this.value ? this.value.length : 0;\n                }\n            }\n        }\n\n        this.first = 0;\n\n        const filteredValue = this.filteredNodes || this.value;\n\n        this.onFilter.emit({\n            filters: this.filters,\n            filteredValue: filteredValue\n        });\n\n        this.tableService.onUIUpdate(filteredValue);\n        this.updateSerializedValue();\n\n        if (this.scrollable) {\n            this.resetScrollTop();\n        }\n    }\n\n    findFilteredNodes(node, paramsWithoutNode) {\n        if (node) {\n            let matched = false;\n            if (node.children) {\n                let childNodes = [...node.children];\n                node.children = [];\n                for (let childNode of childNodes) {\n                    let copyChildNode = {...childNode};\n                    if (this.isFilterMatched(copyChildNode, paramsWithoutNode)) {\n                        matched = true;\n                        node.children.push(copyChildNode);\n                    }\n                }\n            }\n\n            if (matched) {\n                return true;\n            }\n        }\n    }\n\n    isFilterMatched(node, {filterField, filterValue, filterConstraint, isStrictMode}) {\n        let matched = false;\n        let dataFieldValue = ObjectUtils.resolveFieldData(node.data, filterField);\n        if (filterConstraint(dataFieldValue, filterValue, this.filterLocale)) {\n            matched = true;\n        }\n\n        if (!matched || (isStrictMode && !this.isNodeLeaf(node))) {\n            matched = this.findFilteredNodes(node, {filterField, filterValue, filterConstraint, isStrictMode}) || matched;\n        }\n\n        return matched;\n    }\n\n    isNodeLeaf(node) {\n        return node.leaf === false ? false : !(node.children && node.children.length);\n    }\n\n    hasFilter() {\n        let empty = true;\n        for (let prop in this.filters) {\n            if (this.filters.hasOwnProperty(prop)) {\n                empty = false;\n                break;\n            }\n        }\n\n        return !empty;\n    }\n\n    public reset() {\n        this._sortField = null;\n        this._sortOrder = 1;\n        this._multiSortMeta = null;\n        this.tableService.onSort(null);\n\n        this.filteredNodes = null;\n        this.filters = {};\n\n        this.first = 0;\n\n        if (this.lazy) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n        else {\n            this.totalRecords = (this._value ? this._value.length : 0);\n        }\n    }\n\n    updateEditingCell(cell) {\n        this.editingCell = cell;\n        this.bindDocumentEditListener();\n    }\n\n    isEditingCellValid() {\n        return (this.editingCell && DomHandler.find(this.editingCell, '.ng-invalid.ng-dirty').length === 0);\n    }\n\n    bindDocumentEditListener() {\n        if (!this.documentEditListener) {\n            this.documentEditListener = (event) => {\n                if (this.editingCell && !this.editingCellClick && this.isEditingCellValid()) {\n                    DomHandler.removeClass(this.editingCell, 'ui-editing-cell');\n                    this.editingCell = null;\n                    this.unbindDocumentEditListener();\n                }\n\n                this.editingCellClick = false;\n            };\n\n            document.addEventListener('click', this.documentEditListener);\n        }\n    }\n\n    unbindDocumentEditListener() {\n        if (this.documentEditListener) {\n            document.removeEventListener('click', this.documentEditListener);\n            this.documentEditListener = null;\n        }\n    }\n\n    ngOnDestroy() {\n        this.unbindDocumentEditListener();\n        this.editingCell = null;\n        this.initialized = null;\n    }\n\n}\n\n@Component({\n    selector: '[pTreeTableBody]',\n    template: `\n        <ng-container *ngIf=\"!tt.virtualScroll\">\n            <ng-template ngFor let-serializedNode let-rowIndex=\"index\" [ngForOf]=\"tt.serializedValue\" [ngForTrackBy]=\"tt.rowTrackBy\">\n                <ng-container *ngIf=\"serializedNode.visible\">\n                    <ng-container *ngTemplateOutlet=\"template; context: {$implicit: serializedNode, node: serializedNode.node, rowData: serializedNode.node.data, columns: columns}\"></ng-container>\n                </ng-container>\n            </ng-template>\n        </ng-container>\n        <ng-container *ngIf=\"tt.virtualScroll\">\n            <ng-template cdkVirtualFor let-serializedNode let-rowIndex=\"index\" [cdkVirtualForOf]=\"tt.serializedValue\" [cdkVirtualForTrackBy]=\"tt.rowTrackBy\">\n                <ng-container *ngIf=\"serializedNode.visible\">\n                    <ng-container *ngTemplateOutlet=\"template; context: {$implicit: serializedNode, node: serializedNode.node, rowData: serializedNode.node.data, columns: columns}\"></ng-container>\n                </ng-container>\n            </ng-template>\n        </ng-container>\n        <ng-container *ngIf=\"tt.isEmpty()\">\n            <ng-container *ngTemplateOutlet=\"tt.emptyMessageTemplate; context: {$implicit: columns}\"></ng-container>\n        </ng-container>\n    `\n})\nexport class TTBody {\n\n    @Input(\"pTreeTableBody\") columns: any[];\n\n    @Input(\"pTreeTableBodyTemplate\") template: TemplateRef<any>;\n\n    @Input() frozen: boolean;\n\n    constructor(public tt: TreeTable) {}\n}\n\n@Component({\n    selector: '[ttScrollableView]',\n    template: `\n        <div #scrollHeader class=\"ui-treetable-scrollable-header ui-widget-header\">\n            <div #scrollHeaderBox class=\"ui-treetable-scrollable-header-box\">\n                <table class=\"ui-treetable-scrollable-header-table\" [ngClass]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <thead class=\"ui-treetable-thead\">\n                        <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenHeaderTemplate||tt.headerTemplate : tt.headerTemplate; context {$implicit: columns}\"></ng-container>\n                    </thead>\n                </table>\n            </div>\n        </div>\n        <ng-container *ngIf=\"!tt.virtualScroll; else virtualScrollTemplate\">\n            <div #scrollBody class=\"ui-treetable-scrollable-body\" [ngStyle]=\"{'max-height': tt.scrollHeight !== 'flex' ? scrollHeight : undefined}\">\n                <table #scrollTable [class]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <tbody class=\"ui-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"frozen ? tt.frozenBodyTemplate||tt.bodyTemplate : tt.bodyTemplate\" [frozen]=\"frozen\"></tbody>\n                </table>\n                <div #scrollableAligner style=\"background-color:transparent\" *ngIf=\"frozen\"></div>\n            </div>\n        </ng-container>\n        <ng-template #virtualScrollTemplate>\n            <cdk-virtual-scroll-viewport [itemSize]=\"tt.virtualRowHeight\" [style.height]=\"tt.scrollHeight !== 'flex' ? scrollHeight : undefined\" \n                    [minBufferPx]=\"tt.minBufferPx\" [maxBufferPx]=\"tt.maxBufferPx\" class=\"ui-treetable-virtual-scrollable-body\">\n                <table #scrollTable [class]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <tbody class=\"ui-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"frozen ? tt.frozenBodyTemplate||tt.bodyTemplate : tt.bodyTemplate\" [frozen]=\"frozen\"></tbody>\n                </table>\n                <div #scrollableAligner style=\"background-color:transparent\" *ngIf=\"frozen\"></div>\n            </cdk-virtual-scroll-viewport>\n        </ng-template>\n        <div #scrollFooter *ngIf=\"tt.footerTemplate\" class=\"ui-treetable-scrollable-footer ui-widget-header\">\n            <div #scrollFooterBox class=\"ui-treetable-scrollable-footer-box\">\n                <table class=\"ui-treetable-scrollable-footer-table\" [ngClass]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <tfoot class=\"ui-treetable-tfoot\">\n                        <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenFooterTemplate||tt.footerTemplate : tt.footerTemplate; context {$implicit: columns}\"></ng-container>\n                    </tfoot>\n                </table>\n            </div>\n        </div>\n    `\n})\nexport class TTScrollableView implements AfterViewInit, OnDestroy, AfterViewChecked {\n\n    @Input(\"ttScrollableView\") columns: any[];\n\n    @Input() frozen: boolean;\n\n    @ViewChild('scrollHeader') scrollHeaderViewChild: ElementRef;\n\n    @ViewChild('scrollHeaderBox') scrollHeaderBoxViewChild: ElementRef;\n\n    @ViewChild('scrollBody') scrollBodyViewChild: ElementRef;\n\n    @ViewChild('scrollTable') scrollTableViewChild: ElementRef;\n\n    @ViewChild('loadingTable') scrollLoadingTableViewChild: ElementRef;\n\n    @ViewChild('scrollFooter') scrollFooterViewChild: ElementRef;\n\n    @ViewChild('scrollFooterBox') scrollFooterBoxViewChild: ElementRef;\n\n    @ViewChild('scrollableAligner') scrollableAlignerViewChild: ElementRef;\n\n    @ViewChild(CdkVirtualScrollViewport) virtualScrollBody: CdkVirtualScrollViewport;\n\n    headerScrollListener;\n\n    bodyScrollListener;\n\n    footerScrollListener;\n\n    frozenSiblingBody: Element;\n\n    subscription: Subscription;\n\n    totalRecordsSubscription: Subscription;\n\n    initialized: boolean;\n\n    _scrollHeight: string;\n\n    preventBodyScrollPropagation: boolean;\n\n    @Input() get scrollHeight(): string {\n        return this._scrollHeight;\n    }\n    set scrollHeight(val: string) {\n        this._scrollHeight = val;\n        if (val != null && (val.includes('%') || val.includes('calc'))) {\n            console.log('Percentage scroll height calculation is removed in favor of the more performant CSS based flex mode, use scrollHeight=\"flex\" instead.')\n        }\n    }\n\n    constructor(public tt: TreeTable, public el: ElementRef, public zone: NgZone) {\n        this.subscription = this.tt.tableService.uiUpdateSource$.subscribe(() => {\n            this.zone.runOutsideAngular(() => {\n                setTimeout(() => {\n                    this.alignScrollBar();\n                    this.initialized = true;\n                }, 50);\n            });\n        });\n\n        this.initialized = false;\n     }\n\n    ngAfterViewChecked() {\n        if (!this.initialized && this.el.nativeElement.offsetParent) {\n            this.alignScrollBar();\n            this.initialized = true;\n        }\n    }\n\n    ngAfterViewInit() {\n        if (!this.frozen) {\n            if (this.tt.frozenColumns || this.tt.frozenBodyTemplate) {\n                DomHandler.addClass(this.el.nativeElement, 'ui-treetable-unfrozen-view');\n            }\n\n            let frozenView = this.el.nativeElement.previousElementSibling;\n            if (frozenView) {\n                if (this.tt.virtualScroll)\n                    this.frozenSiblingBody = DomHandler.findSingle(frozenView, '.ui-treetable-virtual-scrollable-body');\n                else\n                    this.frozenSiblingBody = DomHandler.findSingle(frozenView, '.ui-treetable-scrollable-body');\n            }\n        }\n        else {\n            if (this.scrollableAlignerViewChild && this.scrollableAlignerViewChild.nativeElement) {\n                this.scrollableAlignerViewChild.nativeElement.style.height = DomHandler.calculateScrollbarHeight() + 'px';\n            }\n        }\n\n        this.bindEvents();\n        this.alignScrollBar();\n    }\n\n    bindEvents() {\n        this.zone.runOutsideAngular(() => {\n            let scrollBarWidth = DomHandler.calculateScrollbarWidth();\n\n            if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n                this.headerScrollListener = this.onHeaderScroll.bind(this);\n                this.scrollHeaderBoxViewChild.nativeElement.addEventListener('scroll', this.headerScrollListener);\n            }\n\n            if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n                this.footerScrollListener = this.onFooterScroll.bind(this);\n                this.scrollFooterViewChild.nativeElement.addEventListener('scroll', this.footerScrollListener);\n            }\n\n            if (!this.frozen) {\n                this.bodyScrollListener = this.onBodyScroll.bind(this);\n\n                if (this.tt.virtualScroll)\n                    this.virtualScrollBody.getElementRef().nativeElement.addEventListener('scroll', this.bodyScrollListener);\n                else\n                    this.scrollBodyViewChild.nativeElement.addEventListener('scroll', this.bodyScrollListener);\n            }\n        });\n    }\n\n    unbindEvents() {\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n            this.scrollHeaderBoxViewChild.nativeElement.removeEventListener('scroll', this.headerScrollListener);\n        }\n\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n            this.scrollFooterViewChild.nativeElement.removeEventListener('scroll', this.footerScrollListener);\n        }\n\n        if (this.scrollBodyViewChild && this.scrollBodyViewChild.nativeElement) {\n            this.scrollBodyViewChild.nativeElement.removeEventListener('scroll', this.bodyScrollListener);\n        }\n\n        if (this.virtualScrollBody && this.virtualScrollBody.getElementRef()) {\n            this.virtualScrollBody.getElementRef().nativeElement.removeEventListener('scroll', this.bodyScrollListener);\n        }\n    }\n\n    onHeaderScroll() {\n        const scrollLeft = this.scrollHeaderViewChild.nativeElement.scrollLeft;\n\n        this.scrollBodyViewChild.nativeElement.scrollLeft = scrollLeft;\n\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n            this.scrollFooterViewChild.nativeElement.scrollLeft = scrollLeft;\n        }\n\n        this.preventBodyScrollPropagation = true;\n    }\n\n    onFooterScroll() {\n        const scrollLeft = this.scrollFooterViewChild.nativeElement.scrollLeft;\n        this.scrollBodyViewChild.nativeElement.scrollLeft = scrollLeft;\n\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n            this.scrollHeaderViewChild.nativeElement.scrollLeft = scrollLeft;\n        }\n\n        this.preventBodyScrollPropagation = true;\n    }\n\n    onBodyScroll(event) {\n        if (this.preventBodyScrollPropagation) {\n            this.preventBodyScrollPropagation = false;\n            return;\n        }\n\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n            this.scrollHeaderBoxViewChild.nativeElement.style.marginLeft = -1 * event.target.scrollLeft + 'px';\n        }\n\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n            this.scrollFooterBoxViewChild.nativeElement.style.marginLeft = -1 * event.target.scrollLeft + 'px';\n        }\n\n        if (this.frozenSiblingBody) {\n            this.frozenSiblingBody.scrollTop = event.target.scrollTop;\n        }\n    }\n\n    scrollToVirtualIndex(index: number): void {\n        if (this.virtualScrollBody) {\n            this.virtualScrollBody.scrollToIndex(index);\n        }\n    }\n\n    scrollTo(options): void {\n        if (this.virtualScrollBody) {\n            this.virtualScrollBody.scrollTo(options);\n        }\n        else {\n            if (this.scrollBodyViewChild.nativeElement.scrollTo) {\n                this.scrollBodyViewChild.nativeElement.scrollTo(options);\n            }\n            else {\n                this.scrollBodyViewChild.nativeElement.scrollLeft = options.left;\n                this.scrollBodyViewChild.nativeElement.scrollTop = options.top;\n            }\n        }\n    }\n\n    hasVerticalOverflow() {\n        if (this.tt.virtualScroll)\n            return (this.virtualScrollBody.getDataLength() * this.tt.virtualRowHeight) > this.virtualScrollBody.getViewportSize();\n        else\n            return DomHandler.getOuterHeight(this.scrollTableViewChild.nativeElement) > DomHandler.getOuterHeight(this.scrollBodyViewChild.nativeElement);\n    }\n\n    alignScrollBar() {\n        if (!this.frozen) {\n            let scrollBarWidth = this.hasVerticalOverflow() ? DomHandler.calculateScrollbarWidth() : 0;\n            this.scrollHeaderBoxViewChild.nativeElement.style.marginRight = scrollBarWidth + 'px';\n\n            if (this.scrollFooterBoxViewChild && this.scrollFooterBoxViewChild.nativeElement) {\n                this.scrollFooterBoxViewChild.nativeElement.style.marginRight = scrollBarWidth + 'px';\n            }\n        }\n        this.initialized = false;\n    }\n\n    ngOnDestroy() {\n        this.unbindEvents();\n\n        this.frozenSiblingBody = null;\n\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n\n        this.initialized = false;\n    }\n}\n\n@Directive({\n    selector: '[ttSortableColumn]',\n    host: {\n        '[class.ui-sortable-column]': 'isEnabled()',\n        '[class.ui-state-highlight]': 'sorted',\n        '[attr.tabindex]': 'isEnabled() ? \"0\" : null'\n    }\n})\nexport class TTSortableColumn implements OnInit, OnDestroy {\n\n    @Input(\"ttSortableColumn\") field: string;\n\n    @Input() ttSortableColumnDisabled: boolean;\n\n    sorted: boolean;\n\n    subscription: Subscription;\n\n    constructor(public tt: TreeTable) {\n        if (this.isEnabled()) {\n            this.subscription = this.tt.tableService.sortSource$.subscribe(sortMeta => {\n                this.updateSortState();\n            });\n        }\n    }\n\n    ngOnInit() {\n        if (this.isEnabled()) {\n            this.updateSortState();\n        }\n    }\n\n    updateSortState() {\n        this.sorted = this.tt.isSorted(this.field);\n    }\n\n    @HostListener('click', ['$event'])\n    onClick(event: MouseEvent) {\n        if (this.isEnabled()) {\n            this.updateSortState();\n            this.tt.sort({\n                originalEvent: event,\n                field: this.field\n            });\n\n            DomHandler.clearSelection();\n        }\n    }\n\n    @HostListener('keydown.enter', ['$event'])\n    onEnterKey(event: MouseEvent) {\n        this.onClick(event);\n    }\n\n    isEnabled() {\n        return this.ttSortableColumnDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n}\n\n@Component({\n    selector: 'p-treeTableSortIcon',\n    template: `\n        <i class=\"ui-sortable-column-icon pi pi-fw\" [ngClass]=\"{'pi-sort-amount-up-alt': sortOrder === 1, 'pi-sort-amount-down': sortOrder === -1, 'pi-sort-alt': sortOrder === 0}\"></i>\n    `\n})\nexport class TTSortIcon implements OnInit, OnDestroy {\n\n    @Input() field: string;\n\n    @Input() ariaLabelDesc: string;\n\n    @Input() ariaLabelAsc: string;\n\n    subscription: Subscription;\n\n    sortOrder: number;\n\n    constructor(public tt: TreeTable) {\n        this.subscription = this.tt.tableService.sortSource$.subscribe(sortMeta => {\n            this.updateSortState();\n        });\n    }\n\n    ngOnInit() {\n        this.updateSortState();\n    }\n\n    onClick(event){\n        event.preventDefault();\n    }\n\n    updateSortState() {\n        if (this.tt.sortMode === 'single') {\n            this.sortOrder = this.tt.isSorted(this.field) ? this.tt.sortOrder : 0;\n        }\n        else if (this.tt.sortMode === 'multiple') {\n            let sortMeta = this.tt.getSortMeta(this.field);\n            this.sortOrder = sortMeta ? sortMeta.order: 0;\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n}\n\n@Directive({\n    selector: '[ttResizableColumn]'\n})\nexport class TTResizableColumn implements AfterViewInit, OnDestroy {\n\n    @Input() ttResizableColumnDisabled: boolean;\n\n    resizer: HTMLSpanElement;\n\n    resizerMouseDownListener: any;\n\n    documentMouseMoveListener: any;\n\n    documentMouseUpListener: any;\n\n    constructor(public tt: TreeTable, public el: ElementRef, public zone: NgZone) { }\n\n    ngAfterViewInit() {\n        if (this.isEnabled()) {\n            DomHandler.addClass(this.el.nativeElement, 'ui-resizable-column');\n            this.resizer = document.createElement('span');\n            this.resizer.className = 'ui-column-resizer ui-clickable';\n            this.el.nativeElement.appendChild(this.resizer);\n\n            this.zone.runOutsideAngular(() => {\n                this.resizerMouseDownListener = this.onMouseDown.bind(this);\n                this.resizer.addEventListener('mousedown', this.resizerMouseDownListener);\n            });\n        }\n    }\n\n    bindDocumentEvents() {\n        this.zone.runOutsideAngular(() => {\n            this.documentMouseMoveListener = this.onDocumentMouseMove.bind(this);\n            document.addEventListener('mousemove', this.documentMouseMoveListener);\n\n            this.documentMouseUpListener = this.onDocumentMouseUp.bind(this);\n            document.addEventListener('mouseup', this.documentMouseUpListener);\n        });\n    }\n\n    unbindDocumentEvents() {\n        if (this.documentMouseMoveListener) {\n            document.removeEventListener('mousemove', this.documentMouseMoveListener);\n            this.documentMouseMoveListener = null;\n        }\n\n        if (this.documentMouseUpListener) {\n            document.removeEventListener('mouseup', this.documentMouseUpListener);\n            this.documentMouseUpListener = null;\n        }\n    }\n\n    onMouseDown(event: Event) {\n        this.tt.onColumnResizeBegin(event);\n        this.bindDocumentEvents();\n    }\n\n    onDocumentMouseMove(event: Event) {\n        this.tt.onColumnResize(event);\n    }\n\n    onDocumentMouseUp(event: Event) {\n        this.tt.onColumnResizeEnd(event, this.el.nativeElement);\n        this.unbindDocumentEvents();\n    }\n\n    isEnabled() {\n        return this.ttResizableColumnDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.resizerMouseDownListener) {\n            this.resizer.removeEventListener('mousedown', this.resizerMouseDownListener);\n        }\n\n        this.unbindDocumentEvents();\n    }\n}\n\n@Directive({\n    selector: '[ttReorderableColumn]'\n})\nexport class TTReorderableColumn implements AfterViewInit, OnDestroy {\n\n    @Input() ttReorderableColumnDisabled: boolean;\n\n    dragStartListener: any;\n\n    dragOverListener: any;\n\n    dragEnterListener: any;\n\n    dragLeaveListener: any;\n\n    mouseDownListener: any;\n\n    constructor(public tt: TreeTable, public el: ElementRef, public zone: NgZone) { }\n\n    ngAfterViewInit() {\n        if (this.isEnabled()) {\n            this.bindEvents();\n        }\n    }\n\n    bindEvents() {\n        this.zone.runOutsideAngular(() => {\n            this.mouseDownListener = this.onMouseDown.bind(this);\n            this.el.nativeElement.addEventListener('mousedown', this.mouseDownListener);\n\n            this.dragStartListener = this.onDragStart.bind(this);\n            this.el.nativeElement.addEventListener('dragstart', this.dragStartListener);\n\n            this.dragOverListener = this.onDragEnter.bind(this);\n            this.el.nativeElement.addEventListener('dragover', this.dragOverListener);\n\n            this.dragEnterListener = this.onDragEnter.bind(this);\n            this.el.nativeElement.addEventListener('dragenter', this.dragEnterListener);\n\n            this.dragLeaveListener = this.onDragLeave.bind(this);\n            this.el.nativeElement.addEventListener('dragleave', this.dragLeaveListener);\n        });\n    }\n\n    unbindEvents() {\n        if (this.mouseDownListener) {\n            document.removeEventListener('mousedown', this.mouseDownListener);\n            this.mouseDownListener = null;\n        }\n\n        if (this.dragOverListener) {\n            document.removeEventListener('dragover', this.dragOverListener);\n            this.dragOverListener = null;\n        }\n\n        if (this.dragEnterListener) {\n            document.removeEventListener('dragenter', this.dragEnterListener);\n            this.dragEnterListener = null;\n        }\n\n        if (this.dragEnterListener) {\n            document.removeEventListener('dragenter', this.dragEnterListener);\n            this.dragEnterListener = null;\n        }\n\n        if (this.dragLeaveListener) {\n            document.removeEventListener('dragleave', this.dragLeaveListener);\n            this.dragLeaveListener = null;\n        }\n    }\n\n    onMouseDown(event) {\n        if (event.target.nodeName === 'INPUT' || DomHandler.hasClass(event.target, 'ui-column-resizer'))\n            this.el.nativeElement.draggable = false;\n        else\n            this.el.nativeElement.draggable = true;\n    }\n\n    onDragStart(event) {\n        this.tt.onColumnDragStart(event, this.el.nativeElement);\n    }\n\n    onDragOver(event) {\n        event.preventDefault();\n    }\n\n    onDragEnter(event) {\n        this.tt.onColumnDragEnter(event, this.el.nativeElement);\n    }\n\n    onDragLeave(event) {\n        this.tt.onColumnDragLeave(event);\n    }\n\n    @HostListener('drop', ['$event'])\n    onDrop(event) {\n        if (this.isEnabled()) {\n            this.tt.onColumnDrop(event, this.el.nativeElement);\n        }\n    }\n\n    isEnabled() {\n        return this.ttReorderableColumnDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        this.unbindEvents();\n    }\n\n}\n\n@Directive({\n    selector: '[ttSelectableRow]',\n    host: {\n        '[class.ui-state-highlight]': 'selected'\n    }\n})\nexport class TTSelectableRow implements OnInit, OnDestroy {\n\n    @Input(\"ttSelectableRow\") rowNode: any;\n\n    @Input() ttSelectableRowDisabled: boolean;\n\n    selected: boolean;\n\n    subscription: Subscription;\n\n    constructor(public tt: TreeTable, public tableService: TreeTableService) {\n        if (this.isEnabled()) {\n            this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\n                this.selected = this.tt.isSelected(this.rowNode.node);\n            });\n        }\n    }\n\n    ngOnInit() {\n        if (this.isEnabled()) {\n            this.selected = this.tt.isSelected(this.rowNode.node);\n        }\n    }\n\n    @HostListener('click', ['$event'])\n    onClick(event: Event) {\n        if (this.isEnabled()) {\n            this.tt.handleRowClick({\n                originalEvent: event,\n                rowNode: this.rowNode\n            });\n        }\n    }\n\n    @HostListener('keydown', ['$event'])\n    onEnterKey(event: KeyboardEvent) {\n        if (event.which === 13) {\n            this.onClick(event);\n        }\n    }\n\n    @HostListener('touchend', ['$event'])\n    onTouchEnd(event: Event) {\n        if (this.isEnabled()) {\n            this.tt.handleRowTouchEnd(event);\n        }\n    }\n\n    isEnabled() {\n        return this.ttSelectableRowDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n}\n\n@Directive({\n    selector: '[ttSelectableRowDblClick]',\n    host: {\n        '[class.ui-state-highlight]': 'selected'\n    }\n})\nexport class TTSelectableRowDblClick implements OnInit, OnDestroy {\n\n    @Input(\"ttSelectableRowDblClick\") rowNode: any;\n\n    @Input() ttSelectableRowDisabled: boolean;\n\n    selected: boolean;\n\n    subscription: Subscription;\n\n    constructor(public tt: TreeTable, public tableService: TreeTableService) {\n        if (this.isEnabled()) {\n            this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\n                this.selected = this.tt.isSelected(this.rowNode.node);\n            });\n        }\n    }\n\n    ngOnInit() {\n        if (this.isEnabled()) {\n            this.selected = this.tt.isSelected(this.rowNode.node);\n        }\n    }\n\n    @HostListener('dblclick', ['$event'])\n    onClick(event: Event) {\n        if (this.isEnabled()) {\n            this.tt.handleRowClick({\n                originalEvent: event,\n                rowNode: this.rowNode\n            });\n        }\n    }\n\n    isEnabled() {\n        return this.ttSelectableRowDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n}\n\n@Directive({\n    selector: '[ttContextMenuRow]',\n    host: {\n        '[class.ui-contextmenu-selected]': 'selected',\n        '[attr.tabindex]': 'isEnabled() ? 0 : undefined'\n    }\n})\nexport class TTContextMenuRow {\n\n    @Input(\"ttContextMenuRow\") rowNode: any;\n\n    @Input() ttContextMenuRowDisabled: boolean;\n\n    selected: boolean;\n\n    subscription: Subscription;\n\n    constructor(public tt: TreeTable, public tableService: TreeTableService, private el: ElementRef) {\n        if (this.isEnabled()) {\n            this.subscription = this.tt.tableService.contextMenuSource$.subscribe((node) => {\n                this.selected = this.tt.equals(this.rowNode.node, node);\n            });\n        }\n    }\n\n    @HostListener('contextmenu', ['$event'])\n    onContextMenu(event: Event) {\n        if (this.isEnabled()) {\n            this.tt.handleRowRightClick({\n                originalEvent: event,\n                rowNode: this.rowNode\n            });\n\n            this.el.nativeElement.focus();\n\n            event.preventDefault();\n        }\n    }\n\n    isEnabled() {\n        return this.ttContextMenuRowDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n}\n\n@Component({\n    selector: 'p-treeTableCheckbox',\n    template: `\n        <div class=\"ui-chkbox ui-treetable-chkbox ui-widget\" (click)=\"onClick($event)\">\n            <div class=\"ui-helper-hidden-accessible\">\n                <input type=\"checkbox\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\">\n            </div>\n            <div #box [ngClass]=\"{'ui-chkbox-box ui-widget ui-state-default':true,\n                'ui-state-active':checked, 'ui-state-disabled':disabled}\"  role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <span class=\"ui-chkbox-icon ui-clickable pi\" [ngClass]=\"{'pi-check':checked, 'pi-minus': rowNode.node.partialSelected}\"></span>\n            </div>\n        </div>\n    `\n})\nexport class TTCheckbox  {\n\n    @Input() disabled: boolean;\n\n    @Input(\"value\") rowNode: any;\n\n    @ViewChild('box') boxViewChild: ElementRef;\n\n    checked: boolean;\n\n    subscription: Subscription;\n\n    constructor(public tt: TreeTable, public tableService: TreeTableService) {\n        this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\n            this.checked = this.tt.isSelected(this.rowNode.node);\n        });\n    }\n\n    ngOnInit() {\n        this.checked = this.tt.isSelected(this.rowNode.node);\n    }\n\n    onClick(event: Event) {\n        if (!this.disabled) {\n            this.tt.toggleNodeWithCheckbox({\n                originalEvent: event,\n                rowNode: this.rowNode\n            });\n        }\n        DomHandler.clearSelection();\n    }\n\n    onFocus() {\n        DomHandler.addClass(this.boxViewChild.nativeElement, 'ui-state-focus');\n    }\n\n    onBlur() {\n        DomHandler.removeClass(this.boxViewChild.nativeElement, 'ui-state-focus');\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n}\n\n@Component({\n    selector: 'p-treeTableHeaderCheckbox',\n    template: `\n        <div class=\"ui-chkbox ui-treetable-header-chkbox ui-widget\" (click)=\"onClick($event, cb.checked)\">\n            <div class=\"ui-helper-hidden-accessible\">\n                <input #cb type=\"checkbox\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" [disabled]=\"!tt.value||tt.value.length === 0\">\n            </div>\n            <div #box [ngClass]=\"{'ui-chkbox-box ui-widget ui-state-default':true,\n                'ui-state-active':checked, 'ui-state-disabled': (!tt.value || tt.value.length === 0)}\"  role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <span class=\"ui-chkbox-icon ui-clickable\" [ngClass]=\"{'pi pi-check':checked}\"></span>\n            </div>\n        </div>\n    `\n})\nexport class TTHeaderCheckbox  {\n\n    @ViewChild('box') boxViewChild: ElementRef;\n\n    checked: boolean;\n\n    disabled: boolean;\n\n    selectionChangeSubscription: Subscription;\n\n    valueChangeSubscription: Subscription;\n\n    constructor(public tt: TreeTable, public tableService: TreeTableService) {\n        this.valueChangeSubscription = this.tt.tableService.uiUpdateSource$.subscribe(() => {\n            this.checked = this.updateCheckedState();\n        });\n\n        this.selectionChangeSubscription = this.tt.tableService.selectionSource$.subscribe(() => {\n            this.checked = this.updateCheckedState();\n        });\n    }\n\n    ngOnInit() {\n        this.checked = this.updateCheckedState();\n    }\n\n    onClick(event: Event, checked) {\n        if (this.tt.value && this.tt.value.length > 0) {\n            this.tt.toggleNodesWithCheckbox(event, !checked);\n        }\n\n        DomHandler.clearSelection();\n    }\n\n    onFocus() {\n        DomHandler.addClass(this.boxViewChild.nativeElement, 'ui-state-focus');\n    }\n\n    onBlur() {\n        DomHandler.removeClass(this.boxViewChild.nativeElement, 'ui-state-focus');\n    }\n\n    ngOnDestroy() {\n        if (this.selectionChangeSubscription) {\n            this.selectionChangeSubscription.unsubscribe();\n        }\n\n        if (this.valueChangeSubscription) {\n            this.valueChangeSubscription.unsubscribe();\n        }\n    }\n\n    updateCheckedState() {\n        let checked: boolean;\n        const data = this.tt.filteredNodes||this.tt.value;\n\n        if (data) {\n            for (let node of data) {\n                if (this.tt.isSelected(node)) {\n                    checked = true;\n                }\n                else  {\n                    checked = false;\n                    break;\n                }\n            }\n        }\n        else {\n            checked = false;\n        }\n\n        return checked;\n    }\n\n}\n\n@Directive({\n    selector: '[ttEditableColumn]'\n})\nexport class TTEditableColumn implements AfterViewInit {\n\n    @Input(\"ttEditableColumn\") data: any;\n\n    @Input(\"ttEditableColumnField\") field: any;\n\n    @Input() ttEditableColumnDisabled: boolean;\n\n    constructor(public tt: TreeTable, public el: ElementRef, public zone: NgZone) {}\n\n    ngAfterViewInit() {\n        if (this.isEnabled()) {\n            DomHandler.addClass(this.el.nativeElement, 'ui-editable-column');\n        }\n    }\n\n    @HostListener('click', ['$event'])\n    onClick(event: MouseEvent) {\n        if (this.isEnabled()) {\n            this.tt.editingCellClick = true;\n\n            if (this.tt.editingCell) {\n                if (this.tt.editingCell !== this.el.nativeElement) {\n                    if (!this.tt.isEditingCellValid()) {\n                        return;\n                    }\n\n                    DomHandler.removeClass(this.tt.editingCell, 'ui-editing-cell');\n                    this.openCell();\n                }\n            }\n            else {\n                this.openCell();\n            }\n        }\n    }\n\n    openCell() {\n        this.tt.updateEditingCell(this.el.nativeElement);\n        DomHandler.addClass(this.el.nativeElement, 'ui-editing-cell');\n        this.tt.onEditInit.emit({ field: this.field, data: this.data});\n        this.zone.runOutsideAngular(() => {\n            setTimeout(() => {\n                let focusable = DomHandler.findSingle(this.el.nativeElement, 'input, textarea');\n                if (focusable) {\n                    focusable.focus();\n                }\n            }, 50);\n        });\n    }\n\n    closeEditingCell() {\n        DomHandler.removeClass(this.tt.editingCell, 'ui-editing-cell');\n        this.tt.editingCell = null;\n        this.tt.unbindDocumentEditListener();\n    }\n\n    @HostListener('keydown', ['$event'])\n    onKeyDown(event: KeyboardEvent) {\n        if (this.isEnabled()) {\n            //enter\n            if (event.keyCode == 13) {\n                if (this.tt.isEditingCellValid()) {\n                    DomHandler.removeClass(this.tt.editingCell, 'ui-editing-cell');\n                    this.closeEditingCell();\n                    this.tt.onEditComplete.emit({ field: this.field, data: this.data });\n                }\n\n                event.preventDefault();\n            }\n\n            //escape\n            else if (event.keyCode == 27) {\n                if (this.tt.isEditingCellValid()) {\n                    DomHandler.removeClass(this.tt.editingCell, 'ui-editing-cell');\n                    this.closeEditingCell();\n                    this.tt.onEditCancel.emit({ field: this.field, data: this.data });\n                }\n\n                event.preventDefault();\n            }\n\n            //tab\n            else if (event.keyCode == 9) {\n                this.tt.onEditComplete.emit({ field: this.field, data: this.data });\n\n                if (event.shiftKey)\n                    this.moveToPreviousCell(event);\n                else\n                    this.moveToNextCell(event);\n            }\n        }\n    }\n\n    findCell(element) {\n        if (element) {\n            let cell = element;\n            while (cell && !DomHandler.hasClass(cell, 'ui-editing-cell')) {\n                cell = cell.parentElement;\n            }\n\n            return cell;\n        }\n        else {\n            return null;\n        }\n    }\n\n    moveToPreviousCell(event: KeyboardEvent) {\n        let currentCell = this.findCell(event.target);\n        let row = currentCell.parentElement;\n        let targetCell = this.findPreviousEditableColumn(currentCell);\n\n        if (targetCell) {\n            DomHandler.invokeElementMethod(targetCell, 'click');\n            event.preventDefault();\n        }\n    }\n\n    moveToNextCell(event: KeyboardEvent) {\n        let currentCell = this.findCell(event.target);\n        let row = currentCell.parentElement;\n        let targetCell = this.findNextEditableColumn(currentCell);\n\n        if (targetCell) {\n            DomHandler.invokeElementMethod(targetCell, 'click');\n            event.preventDefault();\n        }\n    }\n\n    findPreviousEditableColumn(cell: Element) {\n        let prevCell = cell.previousElementSibling;\n\n        if (!prevCell) {\n            let previousRow = cell.parentElement ? cell.parentElement.previousElementSibling : null;\n            if (previousRow) {\n                prevCell = previousRow.lastElementChild;\n            }\n        }\n\n        if (prevCell) {\n            if (DomHandler.hasClass(prevCell, 'ui-editable-column'))\n                return prevCell;\n            else\n                return this.findPreviousEditableColumn(prevCell);\n        }\n        else {\n            return null;\n        }\n    }\n\n    findNextEditableColumn(cell: Element) {\n        let nextCell = cell.nextElementSibling;\n\n        if (!nextCell) {\n            let nextRow = cell.parentElement ? cell.parentElement.nextElementSibling : null;\n            if (nextRow) {\n                nextCell = nextRow.firstElementChild;\n            }\n        }\n\n        if (nextCell) {\n            if (DomHandler.hasClass(nextCell, 'ui-editable-column'))\n                return nextCell;\n            else\n                return this.findNextEditableColumn(nextCell);\n        }\n        else {\n            return null;\n        }\n    }\n\n    isEnabled() {\n        return this.ttEditableColumnDisabled !== true;\n    }\n\n}\n\n@Component({\n    selector: 'p-treeTableCellEditor',\n    template: `\n        <ng-container *ngIf=\"tt.editingCell === editableColumn.el.nativeElement\">\n            <ng-container *ngTemplateOutlet=\"inputTemplate\"></ng-container>\n        </ng-container>\n        <ng-container *ngIf=\"!tt.editingCell || tt.editingCell !== editableColumn.el.nativeElement\">\n            <ng-container *ngTemplateOutlet=\"outputTemplate\"></ng-container>\n        </ng-container>\n    `\n})\nexport class TreeTableCellEditor implements AfterContentInit {\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<PrimeTemplate>;\n\n    inputTemplate: TemplateRef<any>;\n\n    outputTemplate: TemplateRef<any>;\n\n    constructor(public tt: TreeTable, public editableColumn: TTEditableColumn) { }\n\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch (item.getType()) {\n                case 'input':\n                    this.inputTemplate = item.template;\n                    break;\n\n                case 'output':\n                    this.outputTemplate = item.template;\n                    break;\n            }\n        });\n    }\n}\n\n@Directive({\n    selector: '[ttRow]',\n    host: {\n        '[attr.tabindex]': '\"0\"'\n    }\n})\nexport class TTRow {\n\n    @Input('ttRow') rowNode: any;\n\n    constructor(public tt: TreeTable, public el: ElementRef, public zone: NgZone) {}\n\n    @HostListener('keydown', ['$event'])\n    onKeyDown(event: KeyboardEvent) {\n        switch (event.which) {\n            //down arrow\n            case 40:\n                let nextRow = this.el.nativeElement.nextElementSibling;\n                if (nextRow) {\n                    nextRow.focus();\n                }\n\n                event.preventDefault();\n            break;\n\n            //down arrow\n            case 38:\n                let prevRow = this.el.nativeElement.previousElementSibling;\n                if (prevRow) {\n                    prevRow.focus();\n                }\n\n                event.preventDefault();\n            break;\n\n            //left arrow\n            case 37:\n                if (this.rowNode.node.expanded) {\n                    this.tt.toggleRowIndex = DomHandler.index(this.el.nativeElement);\n                    this.rowNode.node.expanded = false;\n\n                    this.tt.onNodeCollapse.emit({\n                        originalEvent: event,\n                        node: this.rowNode.node\n                    });\n\n                    this.tt.updateSerializedValue();\n                    this.tt.tableService.onUIUpdate(this.tt.value);\n                    this.restoreFocus();\n                }\n            break;\n\n            //right arrow\n            case 39:\n                if (!this.rowNode.node.expanded) {\n                    this.tt.toggleRowIndex = DomHandler.index(this.el.nativeElement);\n                    this.rowNode.node.expanded = true;\n\n                    this.tt.onNodeExpand.emit({\n                        originalEvent: event,\n                        node: this.rowNode.node\n                    });\n\n                    this.tt.updateSerializedValue();\n                    this.tt.tableService.onUIUpdate(this.tt.value);\n                    this.restoreFocus();\n                }\n            break;\n        }\n    }\n\n    restoreFocus() {\n        this.zone.runOutsideAngular(() => {\n            setTimeout(() => {\n                let row = DomHandler.findSingle(this.tt.containerViewChild.nativeElement, '.ui-treetable-tbody').children[this.tt.toggleRowIndex];\n                if (row) {\n                    row.focus();\n                }\n            }, 25);\n        });\n    }\n}\n\n@Component({\n    selector: 'p-treeTableToggler',\n    template: `\n        <a class=\"ui-treetable-toggler ui-unselectable-text\" (click)=\"onClick($event)\"\n            [style.visibility]=\"rowNode.node.leaf === false || (rowNode.node.children && rowNode.node.children.length) ? 'visible' : 'hidden'\" [style.marginLeft]=\"rowNode.level * 16 + 'px'\">\n            <i [ngClass]=\"rowNode.node.expanded ? 'pi pi-fw pi-chevron-down' : 'pi pi-fw pi-chevron-right'\"></i>\n        </a>\n    `\n})\nexport class TreeTableToggler {\n\n    @Input() rowNode: any;\n\n    constructor(public tt: TreeTable) {}\n\n    onClick(event: Event) {\n        this.rowNode.node.expanded = !this.rowNode.node.expanded;\n\n        if (this.rowNode.node.expanded) {\n            this.tt.onNodeExpand.emit({\n                originalEvent: event,\n                node: this.rowNode.node\n            });\n        }\n        else {\n            this.tt.onNodeCollapse.emit({\n                originalEvent: event,\n                node: this.rowNode.node\n            });\n        }\n\n        this.tt.updateSerializedValue();\n        this.tt.tableService.onUIUpdate(this.tt.value);\n\n        event.preventDefault();\n    }\n}\n\n@NgModule({\n    imports: [CommonModule,PaginatorModule,ScrollingModule],\n    exports: [TreeTable,SharedModule,TreeTableToggler,TTSortableColumn,TTSortIcon,TTResizableColumn,TTRow,TTReorderableColumn,TTSelectableRow,TTSelectableRowDblClick,TTContextMenuRow,TTCheckbox,TTHeaderCheckbox,TTEditableColumn,TreeTableCellEditor,ScrollingModule],\n    declarations: [TreeTable,TreeTableToggler,TTScrollableView,TTBody,TTSortableColumn,TTSortIcon,TTResizableColumn,TTRow,TTReorderableColumn,TTSelectableRow,TTSelectableRowDblClick,TTContextMenuRow,TTCheckbox,TTHeaderCheckbox,TTEditableColumn,TreeTableCellEditor]\n})\nexport class TreeTableModule { }\n"]}