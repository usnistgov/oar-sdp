{"version":3,"sources":["ng://primeng/messages/messages.ts"],"names":["Messages","messageService","el","this","closable","enableService","escape","showTransitionOptions","hideTransitionOptions","valueChange","EventEmitter","prototype","ngAfterContentInit","_this","templates","forEach","item","getType","contentTemplate","template","messageSubscription","messageObserver","subscribe","messages","Array","filteredMessages","filter","m","key","value","__spread","clearSubscription","clearObserver","hasMessages","parentEl","nativeElement","parentElement","offsetParent","length","getSeverityClass","severity","msg_1","find","clear","event","emit","preventDefault","Object","defineProperty","ngOnDestroy","unsubscribe","MessageService","decorators","type","Optional","ElementRef","__decorate","Input","ContentChildren","PrimeTemplate","Output","Component","selector","animations","trigger","state","style","transform","opacity","transition","animate","changeDetection","ChangeDetectionStrategy","Default","__param","MessagesModule","NgModule","imports","CommonModule","exports","declarations"],"mappings":"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","sourcesContent":["import {NgModule,Component,OnDestroy,Input,Output,EventEmitter,AfterContentInit,Optional,ElementRef,ChangeDetectionStrategy,ContentChildren,QueryList,TemplateRef} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {trigger,state,style,transition,animate} from '@angular/animations';\nimport {Message,PrimeTemplate,MessageService} from 'primeng/api';\nimport {Subscription} from 'rxjs';\n\n@Component({\n    selector: 'p-messages',\n    template: `\n        <div *ngIf=\"hasMessages()\" class=\"ui-messages ui-widget ui-corner-all\"\n                    [ngClass]=\"getSeverityClass()\" role=\"alert\" [ngStyle]=\"style\" [class]=\"styleClass\"\n                    [@messageAnimation]=\"{value: 'visible', params: {showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions}}\">\n            <a tabindex=\"0\" class=\"ui-messages-close\" (click)=\"clear($event)\" (keydown.enter)=\"clear($event)\" *ngIf=\"closable\">\n                <i class=\"pi pi-times\"></i>\n            </a>\n            <span class=\"ui-messages-icon pi\" [ngClass]=\"icon\"></span>\n            <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\n            <ul *ngIf=\"value && value.length\">\n                <li *ngFor=\"let msg of value\">\n                    <div *ngIf=\"!escape; else escapeOut\">\n                        <span *ngIf=\"msg.summary\" class=\"ui-messages-summary\" [innerHTML]=\"msg.summary\"></span>\n                        <span *ngIf=\"msg.detail\" class=\"ui-messages-detail\" [innerHTML]=\"msg.detail\"></span>\n                    </div>\n                    <ng-template #escapeOut>\n                        <span *ngIf=\"msg.summary\" class=\"ui-messages-summary\">{{msg.summary}}</span>\n                        <span *ngIf=\"msg.detail\" class=\"ui-messages-detail\">{{msg.detail}}</span>\n                    </ng-template>\n                </li>\n            </ul>\n        </div>\n    `,\n    animations: [\n        trigger('messageAnimation', [\n            state('visible', style({\n                transform: 'translateY(0)',\n                opacity: 1\n            })),\n            transition('void => *', [\n                style({transform: 'translateY(-25%)', opacity: 0}),\n                animate('{{showTransitionParams}}')\n            ]),\n            transition('* => void', [\n                animate(('{{hideTransitionParams}}'), style({\n                    opacity: 0,\n                    transform: 'translateY(-25%)'\n                }))\n            ])\n        ])\n    ],\n    changeDetection: ChangeDetectionStrategy.Default\n})\nexport class Messages implements AfterContentInit, OnDestroy {\n\n    @Input() value: Message[];\n\n    @Input() closable: boolean = true;\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() enableService: boolean = true;\n\n    @Input() key: string;\n\n    @Input() escape: boolean = true;\n\n    @Input() severity: string;\n\n    @Input() showTransitionOptions: string = '300ms ease-out';\n\n    @Input() hideTransitionOptions: string = '250ms ease-in';\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\n\n    @Output() valueChange: EventEmitter<Message[]> = new EventEmitter<Message[]>();\n\n    messageSubscription: Subscription;\n\n    clearSubscription: Subscription;\n\n    contentTemplate: TemplateRef<any>;\n\n    constructor(@Optional() public messageService: MessageService, public el: ElementRef) {}\n\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch(item.getType()) {\n                case 'content':\n                    this.contentTemplate = item.template;\n                break;\n\n                default:\n                    this.contentTemplate = item.template;\n                break;\n            }\n        });\n\n        if (this.messageService && this.enableService && !this.contentTemplate) {\n            this.messageSubscription = this.messageService.messageObserver.subscribe((messages: any) => {\n                if (messages) {\n                    if (messages instanceof Array) {\n                        let filteredMessages = messages.filter(m => this.key === m.key);\n                        this.value = this.value ? [...this.value, ...filteredMessages] : [...filteredMessages];\n                    }\n                    else if (this.key === messages.key) {\n                        this.value = this.value ? [...this.value, ...[messages]] : [messages];\n                    }\n                }\n            });\n\n            this.clearSubscription = this.messageService.clearObserver.subscribe(key => {\n                if (key) {\n                    if (this.key === key) {\n                        this.value = null;\n                    }\n                }\n                else {\n                    this.value = null;\n                }\n            });\n        }\n    }\n\n    hasMessages() {\n        let parentEl = this.el.nativeElement.parentElement;\n        if (parentEl && parentEl.offsetParent) {\n            return this.contentTemplate != null || this.value && this.value.length > 0;\n        }\n\n        return false;\n    }\n\n    getSeverityClass() {\n        if (this.severity) {\n            return 'ui-messages-' + this.severity;\n        }\n        else {\n            const msg = this.value[0];\n            if (msg) {\n                const severities = ['info', 'warn', 'error', 'success'];\n                const severity = severities.find(item => item === msg.severity);\n\n                return severity && `ui-messages-${severity}`;\n            }\n        }\n\n        return null;\n    }\n\n    clear(event) {\n        this.value = [];\n        this.valueChange.emit(this.value);\n\n        event.preventDefault();\n    }\n\n    get icon(): string {\n        const severity = this.severity || (this.hasMessages() ? this.value[0].severity : null);\n\n        if (this.hasMessages()) {\n            switch(severity) {\n                case 'success':\n                    return 'pi-check';\n                break;\n\n                case 'info':\n                    return 'pi-info-circle';\n                break;\n\n                case 'error':\n                    return 'pi-times';\n                break;\n\n                case 'warn':\n                    return 'pi-exclamation-triangle';\n                break;\n\n                default:\n                    return 'pi-info-circle';\n                break;\n            }\n        }\n\n        return null;\n    }\n\n    ngOnDestroy() {\n        if (this.messageSubscription) {\n            this.messageSubscription.unsubscribe();\n        }\n\n        if (this.clearSubscription) {\n            this.clearSubscription.unsubscribe();\n        }\n    }\n}\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [Messages],\n    declarations: [Messages]\n})\nexport class MessagesModule { }\n"]}