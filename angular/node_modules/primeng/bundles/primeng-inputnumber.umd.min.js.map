{"version":3,"sources":["ng://primeng/inputnumber/inputnumber.ts"],"names":["INPUTNUMBER_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","InputNumber","multi","el","this","showButtons","format","buttonLayout","useGrouping","incrementButtonIcon","decrementButtonIcon","mode","step","onFocus","EventEmitter","onBlur","onModelChange","onModelTouched","prototype","ngOnInit","numberFormat","Intl","NumberFormat","locale","getOptions","numerals","__spread","reverse","index","Map","map","d","i","_numeral","RegExp","join","_decimal","getDecimalExpression","_group","getGroupingExpression","_minusSign","getMinusSignExpression","_currency","getCurrencyExpression","_suffix","suffix","_prefix","prefix","_index","get","formatValue","value","formattedValue","onInput","event","isSpecialChar","target","lastValue","onInputKeyDown","shiftKey","altKey","selectionStart","selectionEnd","inputValue","preventDefault","which","spin","isNumeralChar","charAt","newValueStr","deleteChar","decimalCharIndex","search","lastIndex","test","slice","input","nativeElement","setSelectionRange","updateValue","deleteRange","onInputKeyPress","code","keyCode","char","String","fromCharCode","isMinusSign","insert","onPaste","data","clipboardData","window","getData","filteredData","parseValue","toString","onInputClick","initCursor","onInputFocus","focused","emit","onInputBlur","newValue","validateValue","setAttribute","updateModel","onUpButtonMouseDown","focus","repeat","onUpButtonMouseUp","clearTimer","onUpButtonMouseLeave","onUpButtonKeyDown","onUpButtonKeyUp","onDownButtonMouseDown","onDownButtonMouseUp","onDownButtonMouseLeave","onDownButtonKeyUp","onDownButtonKeyDown","dir","currentValue","maxlength","length","updateInput","interval","_this","timer","setTimeout","clearInterval","text","trim","maxFractionDigits","resolvedOptions","maximumFractionDigits","insertText","start","end","valueLength","operation","currentLength","newLength","valueStr","min","max","resetRegex","filteredText","replace","parsedValue","isNaN","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","val","disabled","localeMatcher","style","currency","currencyDisplay","minimumFractionDigits","minFractionDigits","formatter","filled","ElementRef","__decorate","Input","ViewChild","Output","Component","selector","template","changeDetection","ChangeDetectionStrategy","Default","providers","InputNumberModule","NgModule","imports","CommonModule","InputTextModule","ButtonModule","exports","declarations"],"mappings":"4yCAOaA,EAAkC,CAC3CC,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,YAAW,WAAM,OAAAC,KAC9BC,OAAO,GA4BXD,EAAA,WAyGI,SAAAA,EAAmBE,GAAAC,KAAAD,GAAAA,EAxGVC,KAAAC,aAAuB,EAEvBD,KAAAE,QAAkB,EAElBF,KAAAG,aAAuB,UAcvBH,KAAAI,aAAuB,EAwCvBJ,KAAAK,oBAA8B,mBAE9BL,KAAAM,oBAA8B,qBAE9BN,KAAAO,KAAe,UAEfP,KAAAQ,KAAe,EAIdR,KAAAS,QAA6B,IAAIC,EAAAA,aAEjCV,KAAAW,OAA4B,IAAID,EAAAA,aAI1CV,KAAAY,cAA0B,aAE1BZ,KAAAa,eAA2B,aA4hB/B,OA9fIhB,EAAAiB,UAAAC,SAAA,WACIf,KAAKgB,aAAe,IAAIC,KAAKC,aAAalB,KAAKmB,OAAQnB,KAAKoB,cAC5D,IAAMC,EAAWC,EAAI,IAAIL,KAAKC,aAAalB,KAAKmB,OAAQ,CAACf,aAAa,IAAQF,OAAO,aAAaqB,UAC5FC,EAAQ,IAAIC,IAAIJ,EAASK,KAAI,SAACC,EAAGC,GAAM,MAAA,CAACD,EAAGC,OACjD5B,KAAK6B,SAAW,IAAIC,OAAO,IAAIT,EAASU,KAAK,IAAG,IAAK,KACrD/B,KAAKgC,SAAWhC,KAAKiC,uBACrBjC,KAAKkC,OAASlC,KAAKmC,wBACnBnC,KAAKoC,WAAapC,KAAKqC,yBACvBrC,KAAKsC,UAAYtC,KAAKuC,wBACtBvC,KAAKwC,QAAU,IAAIV,OAAO,KAAI9B,KAAKyC,QAAQ,IAAE,IAAK,KAClDzC,KAAK0C,QAAU,IAAIZ,OAAO,KAAI9B,KAAK2C,QAAQ,IAAE,IAAK,KAClD3C,KAAK4C,OAAS,SAAAjB,GAAK,OAAAH,EAAMqB,IAAIlB,KAGjC9B,EAAAiB,UAAAgC,YAAA,SAAYC,GACR,GAAa,MAATA,EAAe,CACf,GAAI/C,KAAKE,OAAQ,CACb,IACI8C,EADY,IAAI/B,KAAKC,aAAalB,KAAKmB,OAAQnB,KAAKoB,cACzBlB,OAAO6C,GAStC,OARI/C,KAAK2C,SACLK,EAAiBhD,KAAK2C,OAASK,GAG/BhD,KAAKyC,SACLO,GAAkChD,KAAKyC,QAGpCO,EAGX,OAAOD,EAGX,MAAO,IAGXlD,EAAAiB,UAAAkC,eAAA,WACI,OAAOhD,KAAK8C,YAAY9C,KAAK+C,QAGjClD,EAAAiB,UAAAmC,QAAA,SAAQC,GACAlD,KAAKmD,gBACLD,EAAME,OAAOL,MAAQ/C,KAAKqD,WAE9BrD,KAAKmD,eAAgB,GAGzBtD,EAAAiB,UAAAwC,eAAA,SAAeJ,GAEX,GADAlD,KAAKqD,UAAYH,EAAME,OAAOL,MAC1BG,EAAMK,UAAYL,EAAMM,OACxBxD,KAAKmD,eAAgB,MADzB,CAKA,IAAIM,EAAiBP,EAAME,OAAOK,eAC9BC,EAAeR,EAAME,OAAOM,aAC5BC,EAAaT,EAAME,OAAOL,MAM9B,OAJIG,EAAMM,QACNN,EAAMU,iBAGFV,EAAMW,OAEV,KAAK,GACD7D,KAAK8D,KAAKZ,EAAO,GACjBA,EAAMU,iBACV,MAGA,KAAK,GACD5D,KAAK8D,KAAKZ,GAAQ,GAClBA,EAAMU,iBACV,MAGA,KAAK,GACI5D,KAAK+D,cAAcJ,EAAWK,OAAOP,EAAiB,KACvDP,EAAMU,iBAEd,MAGA,KAAK,GACI5D,KAAK+D,cAAcJ,EAAWK,OAAOP,KACtCP,EAAMU,iBAEd,MAGA,KAAK,EACDV,EAAMU,iBACN,IAAIK,EAAc,KAElB,GAAIR,IAAmBC,EAAc,CACjC,IAAIQ,EAAaP,EAAWK,OAAOP,EAAiB,GAChDU,EAAmBR,EAAWS,OAAOpE,KAAKgC,UAC9ChC,KAAKgC,SAASqC,UAAY,EAEtBrE,KAAK+D,cAAcG,KACflE,KAAKkC,OAAOoC,KAAKJ,IACjBlE,KAAKkC,OAAOmC,UAAY,EACxBJ,EAAcN,EAAWY,MAAM,EAAGd,EAAiB,GAAKE,EAAWY,MAAMd,EAAiB,IAErFzD,KAAKgC,SAASsC,KAAKJ,IACxBlE,KAAKgC,SAASqC,UAAY,EAC1BrE,KAAKwE,MAAMC,cAAcC,kBAAkBjB,EAAiB,EAAGA,EAAiB,IAGhFQ,EADKE,EAAmB,GAAKV,EAAiBU,EAChCR,EAAWY,MAAM,EAAGd,EAAiB,GAAK,IAAME,EAAWY,MAAMd,GAGjEE,EAAWY,MAAM,EAAGd,EAAiB,GAAKE,EAAWY,MAAMd,IAI9D,MAAfQ,GACAjE,KAAK2E,YAAYzB,EAAOe,EAAa,sBAIzCA,EAAcjE,KAAK4E,YAAYjB,EAAYF,EAAgBC,GAC3D1D,KAAK2E,YAAYzB,EAAOe,EAAa,mBAWrDpE,EAAAiB,UAAA+D,gBAAA,SAAgB3B,GACZA,EAAMU,iBACN,IAAIkB,EAAO5B,EAAMW,OAASX,EAAM6B,QAC5BC,EAAOC,OAAOC,aAAaJ,IAE1B,IAAMA,GAAQA,GAAQ,IAAO9E,KAAKmF,YAAYH,KAC/ChF,KAAKoF,OAAOlC,EAAO8B,IAI3BnF,EAAAiB,UAAAuE,QAAA,SAAQnC,GACJA,EAAMU,iBACN,IAAI0B,GAAQpC,EAAMqC,eAAiBC,OAAsB,eAAGC,QAAQ,QACpE,GAAIH,EAAM,CACN,IAAII,EAAe1F,KAAK2F,WAAWL,GACf,MAAhBI,GACA1F,KAAKoF,OAAOlC,EAAOwC,EAAaE,cAK5C/F,EAAAiB,UAAA+E,aAAA,WACI7F,KAAK8F,cAGTjG,EAAAiB,UAAAiF,aAAA,SAAa7C,GACTlD,KAAKgG,SAAU,EACfhG,KAAKS,QAAQwF,KAAK/C,IAGtBrD,EAAAiB,UAAAoF,YAAA,SAAYhD,GACRlD,KAAKgG,SAAU,EAEf,IAAIG,EAAWnG,KAAKoG,cAAcpG,KAAK2F,WAAW3F,KAAKwE,MAAMC,cAAc1B,QAC3E/C,KAAKwE,MAAMC,cAAc1B,MAAQ/C,KAAK8C,YAAYqD,GAClDnG,KAAKwE,MAAMC,cAAc4B,aAAa,gBAAiBF,GACvDnG,KAAKsG,YAAYpD,EAAOiD,GAExBnG,KAAKW,OAAOsF,KAAK/C,IAGrBrD,EAAAiB,UAAAyF,oBAAA,SAAoBrD,GAChBlD,KAAKwE,MAAMC,cAAc+B,QACzBxG,KAAKyG,OAAOvD,EAAO,KAAM,GACzBA,EAAMU,kBAGV/D,EAAAiB,UAAA4F,kBAAA,WACI1G,KAAK2G,cAGT9G,EAAAiB,UAAA8F,qBAAA,WACI5G,KAAK2G,cAGT9G,EAAAiB,UAAA+F,kBAAA,SAAkB3D,GACQ,KAAlBA,EAAM6B,SAAoC,KAAlB7B,EAAM6B,SAC9B/E,KAAKyG,OAAOvD,EAAO,KAAM,IAIjCrD,EAAAiB,UAAAgG,gBAAA,WACI9G,KAAK2G,cAGT9G,EAAAiB,UAAAiG,sBAAA,SAAsB7D,GAClBlD,KAAKwE,MAAMC,cAAc+B,QACzBxG,KAAKyG,OAAOvD,EAAO,MAAO,GAC1BA,EAAMU,kBAGV/D,EAAAiB,UAAAkG,oBAAA,WACIhH,KAAK2G,cAGT9G,EAAAiB,UAAAmG,uBAAA,WACIjH,KAAK2G,cAGT9G,EAAAiB,UAAAoG,kBAAA,WACIlH,KAAK2G,cAGT9G,EAAAiB,UAAAqG,oBAAA,SAAoBjE,GACM,KAAlBA,EAAM6B,SAAoC,KAAlB7B,EAAM6B,SAC9B/E,KAAKyG,OAAOvD,EAAO,MAAO,IAIlCrD,EAAAiB,UAAAgD,KAAA,SAAKZ,EAAOkE,GACR,IAAI5G,EAAOR,KAAKQ,KAAO4G,EACnBC,EAAerH,KAAK2F,WAAW3F,KAAKwE,MAAMC,cAAc1B,QAAU,EAClEoD,EAAWnG,KAAKoG,cAAciB,EAAe7G,GAC7CR,KAAKsH,WAAatH,KAAKsH,UAAYtH,KAAK8C,YAAYqD,GAAUoB,SAIlEvH,KAAKwH,YAAYrB,EAAU,QAC3BnG,KAAKsG,YAAYpD,EAAOiD,KAG5BtG,EAAAiB,UAAA2F,OAAA,SAAOvD,EAAOuE,EAAUL,GAAxB,IAAAM,EAAA1H,KACQ4B,EAAI6F,GAAY,IAEpBzH,KAAK2G,aACL3G,KAAK2H,MAAQC,YAAW,WACpBF,EAAKjB,OAAOvD,EAAO,GAAIkE,KACxBxF,GAEH5B,KAAK8D,KAAKZ,EAAOkE,IAGrBvH,EAAAiB,UAAA6F,WAAA,WACQ3G,KAAK2H,OACLE,cAAc7H,KAAK2H,QAI3B9H,EAAAiB,UAAAsE,OAAA,SAAOlC,EAAO4E,GACV,IAII7D,EAJAR,EAAiBzD,KAAKwE,MAAMC,cAAchB,eAC1CC,EAAe1D,KAAKwE,MAAMC,cAAcf,aACxCC,EAAa3D,KAAKwE,MAAMC,cAAc1B,MAAMgF,OAC5CC,EAAoBhI,KAAKgB,aAAaiH,kBAAkBC,sBAExD/D,EAAmBR,EAAWS,OAAOpE,KAAKgC,UAC9ChC,KAAKgC,SAASqC,UAAY,EAEtBF,EAAmB,GAAKV,EAAiBU,EACpCV,EAAiBqE,EAAKP,QAAUpD,EAAmB,IAAO6D,IAC3D/D,EAAcN,EAAWY,MAAM,EAAGd,GAAkBqE,EAAOnE,EAAWY,MAAMd,EAAiBqE,EAAKP,QAClGvH,KAAK2E,YAAYzB,EAAOe,EAAa,YAIzCA,EAAcjE,KAAKmI,WAAWxE,EAAYmE,EAAMrE,EAAgBC,GAChE1D,KAAK2E,YAAYzB,EAAOe,EAAa,YAI7CpE,EAAAiB,UAAAqH,WAAA,SAAWpF,EAAO+E,EAAMM,EAAOC,GAY3B,OATKA,EAAMD,IAAWrF,EAAMwE,OACVO,EACC,IAAVM,EACSN,EAAO/E,EAAMwB,MAAM8D,GAC5BA,IAAQtF,EAAMwE,OACLxE,EAAMwB,MAAM,EAAG6D,GAASN,EAExB/E,EAAMwB,MAAM,EAAG6D,GAASN,EAAO/E,EAAMwB,MAAM8D,IAKjExI,EAAAiB,UAAAgF,WAAA,WACI,IAAIrC,EAAiBzD,KAAKwE,MAAMC,cAAchB,eAC1CE,EAAa3D,KAAKwE,MAAMC,cAAc1B,MACtCuF,EAAc3E,EAAW4D,OACzB/F,EAAQ,KAERwD,EAAOrB,EAAWK,OAAOP,GAC7B,IAAIzD,KAAK+D,cAAciB,GAAvB,CAMA,IADA,IAAIpD,EAAI6B,EAAiB,EAClB7B,GAAK,GAAG,CAEX,GADAoD,EAAOrB,EAAWK,OAAOpC,GACrB5B,KAAK+D,cAAciB,GAAO,CAC1BxD,EAAQI,EACR,MAGAA,IAIR,GAAc,OAAVJ,EACAxB,KAAKwE,MAAMC,cAAcC,kBAAkBlD,EAAQ,EAAGA,EAAQ,OAE7D,CAED,IADAI,EAAI6B,EAAiB,EACd7B,EAAI0G,GAAa,CAEpB,GADAtD,EAAOrB,EAAWK,OAAOpC,GACrB5B,KAAK+D,cAAciB,GAAO,CAC1BxD,EAAQI,EACR,MAGAA,IAIM,OAAVJ,GACAxB,KAAKwE,MAAMC,cAAcC,kBAAkBlD,EAAOA,MAK9D3B,EAAAiB,UAAA0G,YAAA,SAAYzE,EAAOwF,GACf,IAAIC,EAAgBxI,KAAKwE,MAAMC,cAAc1B,MAAMwE,OAEnD,GAAsB,IAAlBiB,EACAxI,KAAKwE,MAAMC,cAAc1B,MAAQ/C,KAAK8C,YAAYC,GAClD/C,KAAKwE,MAAMC,cAAcC,kBAAkB,EAAG,GAC9C1E,KAAK8F,aACL9F,KAAKwE,MAAMC,cAAcC,kBAAkB1E,KAAKwE,MAAMC,cAAchB,eAAiB,EAAGzD,KAAKwE,MAAMC,cAAchB,eAAiB,OAEjI,CACD,IAAIA,EAAiBzD,KAAKwE,MAAMC,cAAcf,aAC1CA,EAAe1D,KAAKwE,MAAMC,cAAcf,aACxCV,EAAiBhD,KAAK8C,YAAYC,GACtC,GAAI/C,KAAKsH,WAAatH,KAAKsH,UAAYtE,EAAeuE,OAClD,OAGJvH,KAAKwE,MAAMC,cAAc1B,MAAQ/C,KAAK8C,YAAYC,GAClD,IAAI0F,EAAYzI,KAAKwE,MAAMC,cAAc1B,MAAMwE,OAE3CkB,IAAcD,EACI,WAAdD,EACAvI,KAAKwE,MAAMC,cAAcC,kBAAkBhB,EAAe,EAAGA,EAAe,GACzD,kBAAd6E,EACLvI,KAAKwE,MAAMC,cAAcC,kBAAkBhB,EAAe,EAAGA,EAAe,GACzD,iBAAd6E,EACLvI,KAAKwE,MAAMC,cAAcC,kBAAkBjB,EAAgBA,GACxC,SAAd8E,GACLvI,KAAKwE,MAAMC,cAAcC,kBAAkBjB,EAAgBC,IAG/DA,GAA+B+E,EAAYD,EAC3CxI,KAAKwE,MAAMC,cAAcC,kBAAkBhB,EAAcA,IAIjE1D,KAAKwE,MAAMC,cAAc4B,aAAa,gBAAiBtD,IAG3DlD,EAAAiB,UAAAwF,YAAA,SAAYpD,EAAOH,GACf/C,KAAK+C,MAAQA,EACb/C,KAAKY,cAAcmC,IAGvBlD,EAAAiB,UAAA6D,YAAA,SAAYzB,EAAOwF,EAAUH,GACzB,GAAgB,MAAZG,EAAkB,CAClB,IAAIvC,EAAWnG,KAAK2F,WAAW+C,GAC/B1I,KAAKwH,YAAYrB,EAAUoC,KAInC1I,EAAAiB,UAAAsF,cAAA,SAAcrD,GACV,OAAiB,OAAb/C,KAAK2I,KAAgB5F,EAAQ/C,KAAK2I,IAC3B3I,KAAK2I,IAGC,OAAb3I,KAAK4I,KAAgB7F,EAAQ/C,KAAK4I,IAC3B5I,KAAK4I,IAGT7F,GAGXlD,EAAAiB,UAAA8D,YAAA,SAAY7B,EAAOqF,EAAOC,GAYtB,OATKA,EAAMD,IAAWrF,EAAMwE,OACV,GACC,IAAVa,EACSrF,EAAMwB,MAAM8D,GACrBA,IAAQtF,EAAMwE,OACLxE,EAAMwB,MAAM,EAAG6D,GAEfrF,EAAMwB,MAAM,EAAG6D,GAASrF,EAAMwB,MAAM8D,IAK1DxI,EAAAiB,UAAAiD,cAAA,SAAciB,GACV,QAAoB,IAAhBA,EAAKuC,UAAiBvH,KAAK6B,SAASyC,KAAKU,IAAShF,KAAKgC,SAASsC,KAAKU,IAAShF,KAAKkC,OAAOoC,KAAKU,IAAShF,KAAKoC,WAAWkC,KAAKU,OAC7HhF,KAAK6I,cACE,IAMfhJ,EAAAiB,UAAAqE,YAAA,SAAYH,GACR,QAAIhF,KAAKoC,WAAWkC,KAAKU,KACrBhF,KAAKoC,WAAWiC,UAAY,GACrB,IAMfxE,EAAAiB,UAAA6E,WAAA,SAAWmC,GACP,IAAIgB,EAAehB,EAAKC,OACHgB,QAAQ,MAAO,IACfA,QAAQ/I,KAAKsC,UAAW,IACxByG,QAAQ/I,KAAKkC,OAAQ,IACrB6G,QAAQ/I,KAAKwC,QAAS,IACtBuG,QAAQ/I,KAAK0C,QAAS,IACtBqG,QAAQ/I,KAAKoC,WAAY,KACzB2G,QAAQ/I,KAAKgC,SAAU,KACvB+G,QAAQ/I,KAAK6B,SAAU7B,KAAK4C,QAEjD,GAAIkG,EAAc,CACd,IAAIE,GAAeF,EACnB,OAAOG,MAAMD,GAAe,KAAOA,EAGvC,OAAO,MAGXnJ,EAAAiB,UAAAoI,WAAA,SAAWnG,GACP/C,KAAK+C,MAAQA,GAGjBlD,EAAAiB,UAAAqI,iBAAA,SAAiBC,GACbpJ,KAAKY,cAAgBwI,GAGzBvJ,EAAAiB,UAAAuI,kBAAA,SAAkBD,GACdpJ,KAAKa,eAAiBuI,GAG1BvJ,EAAAiB,UAAAwI,iBAAA,SAAiBC,GACbvJ,KAAKwJ,SAAWD,GAGpB1J,EAAAiB,UAAAM,WAAA,WACI,MAAO,CACHqI,cAAezJ,KAAKyJ,cACpBC,MAAO1J,KAAKO,KACZoJ,SAAU3J,KAAK2J,SACfC,gBAAiB5J,KAAK4J,gBACtBxJ,YAAaJ,KAAKI,YAClByJ,sBAAuB7J,KAAK8J,kBAC5B5B,sBAAuBlI,KAAKgI,oBAIpCnI,EAAAiB,UAAAmB,qBAAA,WACI,IAAM8H,EAAY,IAAI9I,KAAKC,aAAalB,KAAKmB,OAAQ,CAACf,aAAa,IACnE,OAAO,IAAI0B,OAAO,IAAIiI,EAAU7J,OAAO,KAAK6H,OAAOgB,QAAQ/I,KAAK6B,SAAU,IAAG,IAAK,MAGtFhC,EAAAiB,UAAAqB,sBAAA,WACI,IAAM4H,EAAY,IAAI9I,KAAKC,aAAalB,KAAKmB,OAAQ,CAACf,aAAa,IACnE,OAAO,IAAI0B,OAAO,IAAIiI,EAAU7J,OAAO,KAAM6H,OAAOgB,QAAQ/I,KAAK6B,SAAU,IAAG,IAAK,MAGvFhC,EAAAiB,UAAAuB,uBAAA,WACI,IAAM0H,EAAY,IAAI9I,KAAKC,aAAalB,KAAKmB,OAAQ,CAACf,aAAa,IACnE,OAAO,IAAI0B,OAAO,IAAIiI,EAAU7J,QAAQ,GAAG6H,OAAOgB,QAAQ/I,KAAK6B,SAAU,IAAG,IAAK,MAGrFhC,EAAAiB,UAAAyB,sBAAA,WACI,GAAIvC,KAAK2J,SAAU,CACf,IAAMI,EAAY,IAAI9I,KAAKC,aAAalB,KAAKmB,OAAQ,CAACuI,MAAO,WAAYC,SAAU3J,KAAK2J,SAAUC,gBAAiB5J,KAAK4J,kBACxH,OAAO,IAAI9H,OAAO,IAAIiI,EAAU7J,OAAO,GAAG6I,QAAQ,MAAO,IAAIA,QAAQ/I,KAAK6B,SAAU,IAAIkH,QAAQ/I,KAAKgC,SAAU,IAAI+G,QAAQ/I,KAAKkC,OAAQ,IAAG,IAAK,KAGpJ,OAAO,IAAIJ,OAAO,KAAK,MAG3BjC,EAAAiB,UAAAkJ,OAAA,WACI,OAAsB,MAAdhK,KAAK+C,OAAiB/C,KAAK+C,MAAM6C,WAAW2B,OAAS,GAGjE1H,EAAAiB,UAAA+H,WAAA,WACI7I,KAAK6B,SAASwC,UAAa,EAC3BrE,KAAKgC,SAASqC,UAAa,EAC3BrE,KAAKkC,OAAOmC,UAAa,EACzBrE,KAAKoC,WAAWiC,UAAa,4CA9fV4F,EAAAA,cAxGdC,EAAA,CAARC,EAAAA,2CAEQD,EAAA,CAARC,EAAAA,sCAEQD,EAAA,CAARC,EAAAA,4CAEQD,EAAA,CAARC,EAAAA,sCAEQD,EAAA,CAARC,EAAAA,sCAEQD,EAAA,CAARC,EAAAA,sCAEQD,EAAA,CAARC,EAAAA,6CAEQD,EAAA,CAARC,EAAAA,wCAEQD,EAAA,CAARC,EAAAA,+CAEQD,EAAA,CAARC,EAAAA,2CAEQD,EAAA,CAARC,EAAAA,wCAEQD,EAAA,CAARC,EAAAA,uCAEQD,EAAA,CAARC,EAAAA,0CAEQD,EAAA,CAARC,EAAAA,2CAEQD,EAAA,CAARC,EAAAA,oCAEQD,EAAA,CAARC,EAAAA,yCAEQD,EAAA,CAARC,EAAAA,wCAEQD,EAAA,CAARC,EAAAA,qCAEQD,EAAA,CAARC,EAAAA,yCAEQD,EAAA,CAARC,EAAAA,4CAEQD,EAAA,CAARC,EAAAA,oCAEQD,EAAA,CAARC,EAAAA,wCAEQD,EAAA,CAARC,EAAAA,4CAEQD,EAAA,CAARC,EAAAA,mCAEQD,EAAA,CAARC,EAAAA,mCAEQD,EAAA,CAARC,EAAAA,iDAEQD,EAAA,CAARC,EAAAA,iDAEQD,EAAA,CAARC,EAAAA,oDAEQD,EAAA,CAARC,EAAAA,oDAEQD,EAAA,CAARC,EAAAA,mDAEQD,EAAA,CAARC,EAAAA,mDAEQD,EAAA,CAARC,EAAAA,oCAEQD,EAAA,CAARC,EAAAA,oCAEmBD,EAAA,CAAnBE,EAAAA,UAAU,sCAEDF,EAAA,CAATG,EAAAA,wCAESH,EAAA,CAATG,EAAAA,uCAvEQxK,EAAWqK,EAAA,CA1BvBI,EAAAA,UAAU,CACPC,SAAU,gBACVC,SAAU,0jGAqBVC,gBAAiBC,EAAAA,wBAAwBC,QACzCC,UAAW,CAACpL,MAEHK,GAAb,gBAgnBA,SAAAgL,KAAiC,OAApBA,EAAiBX,EAAA,CAL7BY,EAAAA,SAAS,CACNC,QAAS,CAACC,EAAAA,aAAaC,EAAAA,gBAAiBC,EAAAA,cACxCC,QAAS,CAACtL,GACVuL,aAAc,CAACvL,MAENgL","sourcesContent":["\nimport {NgModule,Component,ChangeDetectionStrategy, Input, ElementRef, ViewChild, OnInit, EventEmitter, Output, forwardRef} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {InputTextModule} from 'primeng/inputtext';\nimport { ButtonModule } from 'primeng/button';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\n\nexport const INPUTNUMBER_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => InputNumber),\n    multi: true\n};\n@Component({\n    selector: 'p-inputNumber',\n    template: `\n        <span [ngClass]=\"{'ui-inputnumber ui-widget': true, 'ui-inputwrapper-filled': this.filled(), 'ui-inputwrapper-focus': this.focused,\n                'ui-inputnumber-buttons-stacked': this.showButtons && this.buttonLayout === 'stacked', 'ui-inputnumber-buttons-horizontal': this.showButtons && this.buttonLayout === 'horizontal',\n                'ui-inputnumber-buttons-vertical': this.showButtons && this.buttonLayout === 'vertical'}\">\n            <input #input class=\"ui-inputnumber-input\" pInputText [value]=\"formattedValue()\" [attr.placeholder]=\"placeholder\" [attr.title]=\"title\" [attr.id]=\"inputId\"\n                [attr.size]=\"size\" [attr.name]=\"name\" [attr.autocomplete]=\"autocomplete\" [attr.maxlength]=\"maxlength\" [attr.tabindex]=\"tabindex\" [attr.aria-label]=\"ariaLabel\"\n                [attr.aria-required]=\"ariaRequired\" [disabled]=\"disabled\" [attr.required]=\"required\" [attr.aria-valumin]=\"min\" [attr.aria-valuemax]=\"max\"\n                (input)=\"onInput($event)\" (keydown)=\"onInputKeyDown($event)\" (keypress)=\"onInputKeyPress($event)\" (paste)=\"onPaste($event)\" (click)=\"onInputClick()\"\n                (focus)=\"onInputFocus($event)\" (blur)=\"onInputBlur($event)\">\n            <span class=\"ui-inputnumber-button-group\" *ngIf=\"showButtons && buttonLayout === 'stacked'\">\n                <button type=\"button\" pButton [ngClass]=\"{'ui-inputnumber-button ui-inputnumber-button-up': true}\" [class]=\"incrementButtonClass\" [icon]=\"incrementButtonIcon\" [disabled]=\"disabled\"\n                    (mousedown)=\"this.onUpButtonMouseDown($event)\" (mouseup)=\"onUpButtonMouseUp()\" (mouseleave)=\"onUpButtonMouseLeave()\" (keydown)=\"onUpButtonKeyDown($event)\" (keyup)=\"onUpButtonKeyUp()\"></button>\n                <button type=\"button\" pButton [ngClass]=\"{'ui-inputnumber-button ui-inputnumber-button-down': true}\" [class]=\"decrementButtonClass\" [icon]=\"decrementButtonIcon\" [disabled]=\"disabled\"\n                    (mousedown)=\"this.onDownButtonMouseDown($event)\" (mouseup)=\"onDownButtonMouseUp()\" (mouseleave)=\"onDownButtonMouseLeave()\" (keydown)=\"onDownButtonKeyDown($event)\" (keyup)=\"onDownButtonKeyUp()\"></button>\n            </span>\n            <button type=\"button\" pButton [ngClass]=\"{'ui-inputnumber-button ui-inputnumber-button-up': true}\" [class]=\"incrementButtonClass\" [icon]=\"incrementButtonIcon\" *ngIf=\"showButtons && buttonLayout !== 'stacked'\" [disabled]=\"disabled\"\n                (mousedown)=\"this.onUpButtonMouseDown($event)\" (mouseup)=\"onUpButtonMouseUp()\" (mouseleave)=\"onUpButtonMouseLeave()\" (keydown)=\"onUpButtonKeyDown($event)\" (keyup)=\"onUpButtonKeyUp()\"></button>\n            <button type=\"button\" pButton [ngClass]=\"{'ui-inputnumber-button ui-inputnumber-button-down': true}\" [class]=\"decrementButtonClass\" [icon]=\"decrementButtonIcon\" *ngIf=\"showButtons && buttonLayout !== 'stacked'\" [disabled]=\"disabled\"\n                (mousedown)=\"this.onDownButtonMouseDown($event)\" (mouseup)=\"onDownButtonMouseUp()\" (mouseleave)=\"onDownButtonMouseLeave()\" (keydown)=\"onDownButtonKeyDown($event)\" (keyup)=\"onDownButtonKeyUp()\"></button>\n        </span>\n    `,\n    changeDetection: ChangeDetectionStrategy.Default,\n    providers: [INPUTNUMBER_VALUE_ACCESSOR]\n})\nexport class InputNumber implements OnInit,ControlValueAccessor {\n    @Input() showButtons: boolean = false;\n\n    @Input() format: boolean = true;\n\n    @Input() buttonLayout: string = \"stacked\";\n\n    @Input() prefix: string;\n\n    @Input() locale: string;\n\n    @Input() suffix: string;\n\n    @Input() localeMatcher: string;\n\n    @Input() currency: string;\n\n    @Input() currencyDisplay: string;\n\n    @Input() useGrouping: boolean = true;\n\n    @Input() disabled: boolean;\n\n    @Input() inputId: string;\n\n    @Input() styleClass: string;\n\n    @Input() placeholder: string;\n\n    @Input() size: number;\n\n    @Input() maxlength: number;\n\n    @Input() tabindex: string;\n\n    @Input() title: string;\n\n    @Input() ariaLabel: string;\n\n    @Input() ariaRequired: boolean;\n\n    @Input() name: string;\n\n    @Input() required: boolean;\n\n    @Input() autocomplete: string;\n\n    @Input() min: number;\n\n    @Input() max: number;\n\n    @Input() minFractionDigits: number;\n\n    @Input() maxFractionDigits: number;\n\n    @Input() incrementButtonClass: string;\n\n    @Input() decrementButtonClass: string;\n\n    @Input() incrementButtonIcon: string = 'pi pi-chevron-up';\n\n    @Input() decrementButtonIcon: string = 'pi pi-chevron-down';\n\n    @Input() mode: string = \"decimal\";\n\n    @Input() step: number = 1;\n\n    @ViewChild('input') input: ElementRef;\n\n    @Output() onFocus: EventEmitter<any> = new EventEmitter();\n\n    @Output() onBlur: EventEmitter<any> = new EventEmitter();\n\n    value: number;\n\n    onModelChange: Function = () => {};\n\n    onModelTouched: Function = () => {};\n\n    focused: boolean;\n\n    isSpecialChar: boolean;\n\n    timer: any;\n\n    lastValue: string;\n\n    _numeral: any;\n\n    numberFormat: any;\n\n    _decimal: any;\n\n    _group: any;\n\n    _minusSign: any;\n\n    _currency: any;\n\n    _prefix: any;\n\n    _suffix: any;\n\n    _index: any;\n\n    constructor(public el: ElementRef) {}\n\n    ngOnInit() {\n        this.numberFormat = new Intl.NumberFormat(this.locale, this.getOptions());\n        const numerals = [...new Intl.NumberFormat(this.locale, {useGrouping: false}).format(9876543210)].reverse();\n        const index = new Map(numerals.map((d, i) => [d, i]));\n        this._numeral = new RegExp(`[${numerals.join('')}]`, 'g');\n        this._decimal = this.getDecimalExpression();\n        this._group = this.getGroupingExpression();\n        this._minusSign = this.getMinusSignExpression();\n        this._currency = this.getCurrencyExpression();\n        this._suffix = new RegExp(`[${this.suffix||''}]`, 'g');\n        this._prefix = new RegExp(`[${this.prefix||''}]`, 'g');\n        this._index = d => index.get(d);\n    }\n\n    formatValue(value) {\n        if (value != null) {\n            if (this.format) {\n                let formatter = new Intl.NumberFormat(this.locale, this.getOptions());\n                let formattedValue = formatter.format(value);\n                if (this.prefix) {\n                    formattedValue = this.prefix + formattedValue;\n                }\n\n                if (this.suffix) {\n                    formattedValue = formattedValue + this.suffix;\n                }\n\n                return formattedValue;\n            }\n\n            return value;\n        }\n\n        return '';\n    }\n\n    formattedValue() {\n        return this.formatValue(this.value);\n    }\n\n    onInput(event) {\n        if (this.isSpecialChar) {\n            event.target.value = this.lastValue;\n        }\n        this.isSpecialChar = false;\n    }\n\n    onInputKeyDown(event) {\n        this.lastValue = event.target.value;\n        if (event.shiftKey || event.altKey) {\n            this.isSpecialChar = true;\n            return;\n        }\n\n        let selectionStart = event.target.selectionStart;\n        let selectionEnd = event.target.selectionEnd;\n        let inputValue = event.target.value;\n\n        if (event.altKey) {\n            event.preventDefault();\n        }\n\n        switch (event.which) {\n            //up\n            case 38:\n                this.spin(event, 1);\n                event.preventDefault();\n            break;\n\n            //down\n            case 40:\n                this.spin(event, -1);\n                event.preventDefault();\n            break;\n\n            //left\n            case 37:\n                if (!this.isNumeralChar(inputValue.charAt(selectionStart - 1))) {\n                    event.preventDefault();\n                }\n            break;\n\n            //right\n            case 39:\n                if (!this.isNumeralChar(inputValue.charAt(selectionStart))) {\n                    event.preventDefault();\n                }\n            break;\n\n            //backspace\n            case 8: {\n                event.preventDefault();\n                let newValueStr = null;\n\n                if (selectionStart === selectionEnd) {\n                    let deleteChar = inputValue.charAt(selectionStart - 1);\n                    let decimalCharIndex = inputValue.search(this._decimal);\n                    this._decimal.lastIndex = 0;\n\n                    if (this.isNumeralChar(deleteChar)) {\n                        if (this._group.test(deleteChar)) {\n                            this._group.lastIndex = 0;\n                            newValueStr = inputValue.slice(0, selectionStart - 2) + inputValue.slice(selectionStart - 1);\n                        }\n                        else if (this._decimal.test(deleteChar)) {\n                            this._decimal.lastIndex = 0;\n                            this.input.nativeElement.setSelectionRange(selectionStart - 1, selectionStart - 1);\n                        }\n                        else if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n                            newValueStr = inputValue.slice(0, selectionStart - 1) + '0' + inputValue.slice(selectionStart);\n                        }\n                        else {\n                            newValueStr = inputValue.slice(0, selectionStart - 1) + inputValue.slice(selectionStart);\n                        }\n                    }\n\n                    if (newValueStr != null) {\n                        this.updateValue(event, newValueStr, 'delete-single');\n                    }\n                }\n                else {\n                    newValueStr = this.deleteRange(inputValue, selectionStart, selectionEnd);\n                    this.updateValue(event, newValueStr, 'delete-range');\n                }\n\n                break;\n            }\n\n            default:\n            break;\n        }\n    }\n\n    onInputKeyPress(event) {\n        event.preventDefault();\n        let code = event.which || event.keyCode;\n        let char = String.fromCharCode(code);\n\n        if ((48 <= code && code <= 57) || this.isMinusSign(char)) {\n            this.insert(event, char);\n        }\n    }\n\n    onPaste(event) {\n        event.preventDefault();\n        let data = (event.clipboardData || window['clipboardData']).getData('Text');\n        if (data) {\n            let filteredData = this.parseValue(data);\n            if (filteredData != null) {\n                this.insert(event, filteredData.toString());\n            }\n        }\n    }\n\n    onInputClick() {\n        this.initCursor();\n    }\n\n    onInputFocus(event) {\n        this.focused = true;\n        this.onFocus.emit(event);\n    }\n\n    onInputBlur(event) {\n        this.focused = false;\n\n        let newValue = this.validateValue(this.parseValue(this.input.nativeElement.value));\n        this.input.nativeElement.value = this.formatValue(newValue);\n        this.input.nativeElement.setAttribute('aria-valuenow', newValue);\n        this.updateModel(event, newValue);\n\n        this.onBlur.emit(event);\n    }\n\n    onUpButtonMouseDown(event) {\n        this.input.nativeElement.focus();\n        this.repeat(event, null, 1);\n        event.preventDefault();\n    }\n\n    onUpButtonMouseUp() {\n        this.clearTimer();\n    }\n\n    onUpButtonMouseLeave() {\n        this.clearTimer();\n    }\n\n    onUpButtonKeyDown(event) {\n        if (event.keyCode === 32 || event.keyCode === 13) {\n            this.repeat(event, null, 1);\n        }\n    }\n\n    onUpButtonKeyUp() {\n        this.clearTimer();\n    }\n\n    onDownButtonMouseDown(event) {\n        this.input.nativeElement.focus();\n        this.repeat(event, null, -1);\n        event.preventDefault();\n    }\n\n    onDownButtonMouseUp() {\n        this.clearTimer();\n    }\n\n    onDownButtonMouseLeave() {\n        this.clearTimer();\n    }\n\n    onDownButtonKeyUp() {\n        this.clearTimer();\n    }\n\n    onDownButtonKeyDown(event) {\n        if (event.keyCode === 32 || event.keyCode === 13) {\n            this.repeat(event, null, -1);\n        }\n    }\n\n    spin(event, dir) {\n        let step = this.step * dir;\n        let currentValue = this.parseValue(this.input.nativeElement.value) || 0;\n        let newValue = this.validateValue(currentValue + step);\n        if (this.maxlength && this.maxlength < this.formatValue(newValue).length) {\n            return;\n        }\n        \n        this.updateInput(newValue, 'spin');\n        this.updateModel(event, newValue);\n    }\n\n    repeat(event, interval, dir) {\n        let i = interval || 500;\n\n        this.clearTimer();\n        this.timer = setTimeout(() => {\n            this.repeat(event, 40, dir);\n        }, i);\n\n        this.spin(event, dir);\n    }\n\n    clearTimer() {\n        if (this.timer) {\n            clearInterval(this.timer);\n        }\n    }\n\n    insert(event, text) {\n        let selectionStart = this.input.nativeElement.selectionStart;\n        let selectionEnd = this.input.nativeElement.selectionEnd;\n        let inputValue = this.input.nativeElement.value.trim();\n        let maxFractionDigits = this.numberFormat.resolvedOptions().maximumFractionDigits;\n        let newValueStr;\n        let decimalCharIndex = inputValue.search(this._decimal);\n        this._decimal.lastIndex = 0;\n\n        if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n            if ((selectionStart + text.length - (decimalCharIndex + 1)) <= maxFractionDigits) {\n                newValueStr = inputValue.slice(0, selectionStart) + text + inputValue.slice(selectionStart + text.length);\n                this.updateValue(event, newValueStr, 'insert');\n            }\n        }\n        else {\n            newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);\n            this.updateValue(event, newValueStr, 'insert');\n        }\n    }\n\n    insertText(value, text, start, end) {\n        let newValueStr;\n\n        if ((end - start) === value.length)\n            newValueStr = text;\n        else if (start === 0)\n            newValueStr = text + value.slice(end);\n        else if (end === value.length)\n            newValueStr = value.slice(0, start) + text;\n        else\n            newValueStr = value.slice(0, start) + text + value.slice(end);\n\n        return newValueStr;\n    }\n\n    initCursor() {\n        let selectionStart = this.input.nativeElement.selectionStart;\n        let inputValue = this.input.nativeElement.value;\n        let valueLength = inputValue.length;\n        let index = null;\n\n        let char = inputValue.charAt(selectionStart);\n        if (this.isNumeralChar(char)) {\n            return;\n        }\n\n        //left\n        let i = selectionStart - 1;\n        while (i >= 0) {\n            char = inputValue.charAt(i);\n            if (this.isNumeralChar(char)) {\n                index = i;\n                break;\n            }\n            else {\n                i--;\n            }\n        }\n\n        if (index !== null) {\n            this.input.nativeElement.setSelectionRange(index + 1, index + 1);\n        }\n        else {\n            i = selectionStart + 1;\n            while (i < valueLength) {\n                char = inputValue.charAt(i);\n                if (this.isNumeralChar(char)) {\n                    index = i;\n                    break;\n                }\n                else {\n                    i++;\n                }\n            }\n\n            if (index !== null) {\n                this.input.nativeElement.setSelectionRange(index, index);\n            }\n        }\n    }\n\n    updateInput(value, operation) {\n        let currentLength = this.input.nativeElement.value.length;\n\n        if (currentLength === 0) {\n            this.input.nativeElement.value = this.formatValue(value);\n            this.input.nativeElement.setSelectionRange(0, 0);\n            this.initCursor();\n            this.input.nativeElement.setSelectionRange(this.input.nativeElement.selectionStart + 1, this.input.nativeElement.selectionStart + 1);\n        }\n        else {\n            let selectionStart = this.input.nativeElement.selectionEnd;\n            let selectionEnd = this.input.nativeElement.selectionEnd;\n            let formattedValue = this.formatValue(value);\n            if (this.maxlength && this.maxlength < formattedValue.length) {\n                return;\n            }\n            \n            this.input.nativeElement.value = this.formatValue(value);\n            let newLength = this.input.nativeElement.value.length;\n\n            if (newLength === currentLength) {\n                if (operation === 'insert')\n                    this.input.nativeElement.setSelectionRange(selectionEnd + 1, selectionEnd + 1);\n                else if (operation === 'delete-single')\n                    this.input.nativeElement.setSelectionRange(selectionEnd - 1, selectionEnd - 1);\n                else if (operation === 'delete-range')\n                    this.input.nativeElement.setSelectionRange(selectionStart, selectionStart);\n                else if (operation === 'spin')\n                    this.input.nativeElement.setSelectionRange(selectionStart, selectionEnd);\n            }\n            else {\n                selectionEnd = selectionEnd + (newLength - currentLength);\n                this.input.nativeElement.setSelectionRange(selectionEnd, selectionEnd);\n            }\n        }\n\n        this.input.nativeElement.setAttribute('aria-valuenow', value);\n    }\n\n    updateModel(event, value) {\n        this.value = value;\n        this.onModelChange(value);\n    }\n\n    updateValue(event, valueStr, operation) {\n        if (valueStr != null) {\n            let newValue = this.parseValue(valueStr);\n            this.updateInput(newValue, operation);\n        }\n    }\n\n    validateValue(value) {\n        if (this.min !== null && value < this.min) {\n            return this.min;\n        }\n\n        if (this.max !== null && value > this.max) {\n            return this.max;\n        }\n\n        return value;\n    }\n\n    deleteRange(value, start, end) {\n        let newValueStr;\n\n        if ((end - start) === value.length)\n            newValueStr = '';\n        else if (start === 0)\n            newValueStr = value.slice(end);\n        else if (end === value.length)\n            newValueStr = value.slice(0, start);\n        else\n            newValueStr = value.slice(0, start) + value.slice(end);\n\n        return newValueStr;\n    }\n\n    isNumeralChar(char) {\n        if (char.length === 1 && (this._numeral.test(char) || this._decimal.test(char) || this._group.test(char) || this._minusSign.test(char))) {\n            this.resetRegex();\n            return true;\n        }\n\n        return false;\n    }\n\n    isMinusSign(char) {\n        if (this._minusSign.test(char)) {\n            this._minusSign.lastIndex = 0;\n            return true;\n        }\n\n        return false;\n    }\n\n    parseValue(text) {\n        let filteredText = text.trim()\n                            .replace(/\\s/g, '')\n                            .replace(this._currency, '')\n                            .replace(this._group, '')\n                            .replace(this._suffix, '')\n                            .replace(this._prefix, '')\n                            .replace(this._minusSign, '-')\n                            .replace(this._decimal, '.')\n                            .replace(this._numeral, this._index);\n\n        if (filteredText) {\n            let parsedValue = +filteredText;\n            return isNaN(parsedValue) ? null : parsedValue;\n        }\n\n        return null;\n    }\n\n    writeValue(value: any) : void {\n        this.value = value;\n    }\n\n    registerOnChange(fn: Function): void {\n        this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn: Function): void {\n        this.onModelTouched = fn;\n    }\n\n    setDisabledState(val: boolean): void {\n        this.disabled = val;\n    }\n\n    getOptions() {\n        return {\n            localeMatcher: this.localeMatcher,\n            style: this.mode,\n            currency: this.currency,\n            currencyDisplay: this.currencyDisplay,\n            useGrouping: this.useGrouping,\n            minimumFractionDigits: this.minFractionDigits,\n            maximumFractionDigits: this.maxFractionDigits\n        };\n    }\n\n    getDecimalExpression() {\n        const formatter = new Intl.NumberFormat(this.locale, {useGrouping: false});\n        return new RegExp(`[${formatter.format(1.1).trim().replace(this._numeral, '')}]`, 'g');\n    }\n\n    getGroupingExpression() {\n        const formatter = new Intl.NumberFormat(this.locale, {useGrouping: true});\n        return new RegExp(`[${formatter.format(1000).trim().replace(this._numeral, '')}]`, 'g');\n    }\n\n    getMinusSignExpression() {\n        const formatter = new Intl.NumberFormat(this.locale, {useGrouping: false});\n        return new RegExp(`[${formatter.format(-1).trim().replace(this._numeral, '')}]`, 'g');\n    }\n\n    getCurrencyExpression() {\n        if (this.currency) {\n            const formatter = new Intl.NumberFormat(this.locale, {style: 'currency', currency: this.currency, currencyDisplay: this.currencyDisplay});\n            return new RegExp(`[${formatter.format(1).replace(/\\s/g, '').replace(this._numeral, '').replace(this._decimal, '').replace(this._group, '')}]`, 'g');\n        }\n\n        return new RegExp(`[]`,'g');\n    }\n\n    filled() {\n        return (this.value != null && this.value.toString().length > 0)\n    }\n\n    resetRegex() {\n        this._numeral.lastIndex =  0;\n        this._decimal.lastIndex =  0;\n        this._group.lastIndex =  0;\n        this._minusSign.lastIndex =  0;\n    }\n}\n\n@NgModule({\n    imports: [CommonModule,InputTextModule, ButtonModule],\n    exports: [InputNumber],\n    declarations: [InputNumber]\n})\nexport class InputNumberModule { }\n"]}