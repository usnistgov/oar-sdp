{"version":3,"sources":["ng://primeng/table/table.ts"],"names":["TableService","this","sortSource","Subject","selectionSource","contextMenuSource","valueSource","totalRecordsSource","columnsSource","sortSource$","asObservable","selectionSource$","contextMenuSource$","valueSource$","totalRecordsSource$","columnsSource$","prototype","onSort","sortMeta","next","onSelectionChange","onContextMenu","data","onValueChange","value","onTotalRecordsChange","onColumnsChange","columns","__decorate","Injectable","Table","el","zone","tableService","cd","pageLinks","alwaysShowPaginator","paginatorPosition","paginatorDropdownScrollHeight","currentPageReportTemplate","defaultSortOrder","sortMode","resetPageOnSort","selectionChange","EventEmitter","contextMenuSelectionChange","contextMenuSelectionMode","rowTrackBy","index","item","lazy","lazyLoadOnInit","compareSelectionBy","csvSeparator","exportFilename","filters","filterDelay","expandedRowKeys","editingRowKeys","rowExpandMode","virtualScrollDelay","virtualRowHeight","columnResizeMode","loadingIcon","showLoader","stateStorage","editMode","onRowSelect","onRowUnselect","onPage","onFilter","onLazyLoad","onRowExpand","onRowCollapse","onContextMenuSelect","onColResize","onColReorder","onRowReorder","onEditInit","onEditComplete","onEditCancel","onHeaderCheckboxToggle","sortFunction","firstChange","rowsChange","onStateSave","onStateRestore","_value","_totalRecords","_first","selectionKeys","_sortOrder","ngOnInit","virtualScroll","emit","createLazyLoadMetadata","restoringFilter","initialized","ngAfterContentInit","_this","templates","forEach","getType","captionTemplate","template","headerTemplate","bodyTemplate","loadingBodyTemplate","footerTemplate","summaryTemplate","colGroupTemplate","expandedRowTemplate","frozenRowsTemplate","frozenHeaderTemplate","frozenBodyTemplate","frozenFooterTemplate","frozenColGroupTemplate","emptyMessageTemplate","paginatorLeftTemplate","paginatorRightTemplate","ngAfterViewInit","isStateful","resizableColumns","restoreColumnWidths","clearCache","scrollable","scrollableViewChild","scrollableFrozenViewChild","ngOnChanges","simpleChange","stateRestored","restoreState","currentValue","totalRecords","length","sortField","sortSingle","multiSortMeta","sortMultiple","hasFilter","_filter","_columns","reorderableColumns","columnOrderStateRestored","restoreColumnOrder","_sortField","sortOrder","_multiSortMeta","selection","_selection","preventSelectionSetterPropagation","updateSelectionKeys","Object","defineProperty","val","cols","_rows","dataKey","Array","isArray","_b","__values","_c","done","String","ObjectUtils","resolveFieldData","onPageChange","event","first","rows","saveState","anchorRowIndex","resetScrollTop","sort","originalEvent","field","metaKey","ctrlKey","getSortMeta","order","push","restoringSort","customSort","mode","data1","data2","value1","value2","result","localeCompare","multisortField","multisortmeta","i","isSorted","sorted","handleRowClick","target","targetNode","nodeName","parentNode","parentElement","DomHandler","hasClass","selectionMode","isMultipleSelectionMode","shiftKey","clearSelection","rangeRowIndex","clearSelectionRange","rowIndex","selectRange","rowData","selected","isSelected","metaSelection","rowTouched","metaKeySelection","dataKeyValue","isSingleSelectionMode","selectionIndex_1","findIndexInSelection","filter","type","__spread","selectionIndex_2","handleRowTouchEnd","handleRowRightClick","contextMenu","contextMenuSelection","show","rangeStart","rangeEnd","paginator","rangeRowData","filteredValue","this_1","selectionIndex","undefined","equals","toggleRowWithRadio","toggleRowWithCheckbox","selectionIndex_3","toggleRowsWithCheckbox","check","slice","checked","matchMode","filterTimeout","clearTimeout","isFilterBlank","setTimeout","filterGlobal","trim","globalFilterFieldsArray","globalFilterFields","Error","localMatch","globalMatch","localFiltered","prop","hasOwnProperty","filterMeta","filterField","filterValue","filterMatchMode","dataFieldValue","filterConstraint","FilterUtils","filterLocale","j","globalFilterField","markForCheck","empty","globalFilter","reset","exportCSV","options","csv","selectionOnly","column","exportable","header","record","i_1","cellData","exportFunction","replace","blob","Blob","window","navigator","msSaveOrOpenBlob","link","document","createElement","style","display","body","appendChild","download","setAttribute","URL","createObjectURL","click","open","encodeURI","removeChild","scrollToVirtualIndex","scrollTo","top","updateEditingCell","cell","editingCell","editingCellData","editingCellField","editingCellRowIndex","bindDocumentEditListener","isEditingCellValid","find","documentEditListener","editingCellClick","removeClass","unbindDocumentEditListener","addEventListener","removeEventListener","initRowEdit","saveRowEdit","rowElement","cancelRowEdit","toggleRow","preventDefault","isRowExpanded","isRowEditing","onColumnResizeBegin","containerLeft","getOffset","containerViewChild","nativeElement","left","lastResizerHelperX","pageX","scrollLeft","onColumnResize","addClass","resizeHelperViewChild","height","offsetHeight","onColumnResizeEnd","delta","offsetLeft","columnWidth","offsetWidth","minWidth","parseInt","newColumnWidth","nextColumn","nextElementSibling","offsetParent","nextColumnWidth","nextColumnMinWidth","scrollableView","findParentScrollableView","scrollableBodyTable","findSingle","scrollableHeaderTable","scrollableFooterTable","resizeColumnIndex","resizeColGroup","width","setScrollableItemsWidthOnExpandResize","tableViewChild","containerWidth","element","scrollableBody","scrollableHeader","scrollableFooter","scrollableBodyTableWidth","scrollableHeaderTableWidth","isContainerInViewport","setWidth","container","table","calculateScrollbarWidth","parent_1","colGroup","children","col","nextCol","onColumnDragStart","columnElement","reorderIconWidth","getHiddenElementOuterWidth","reorderIndicatorUpViewChild","reorderIconHeight","getHiddenElementOuterHeight","reorderIndicatorDownViewChild","draggedColumn","dataTransfer","setData","onColumnDragEnter","dropHeader","containerOffset","dropHeaderOffset","dragIndex","indexWithinGroup","dropIndex","targetLeft","columnCenter","Math","ceil","dropPosition","dropEffect","onColumnDragLeave","onColumnDrop","dropColumn","allowDrop","reorderArray","runOutsideAngular","draggable","onRowDragStart","rowDragging","draggedRowIndex","onRowDragOver","rowY","getWindowScrollTop","pageY","rowMidY","getOuterHeight","prevRowElement","previousElementSibling","droppedRowIndex","onRowDragLeave","onRowDragEnd","onRowDrop","isEmpty","getBlockableElement","getStorage","localStorage","sessionStorage","stateKey","storage","state","saveColumnWidths","saveColumnOrder","keys","setItem","JSON","stringify","clearState","removeItem","stateString","getItem","state_1","parse","columnWidthsState","columnWidths","tableWidthState","tableWidth","Promise","resolve","then","widths","map","getOuterWidth","join","widths_1","split","headerCols","bodyCols","columnOrder_1","key","columnOrder","reorderedColumns_1","findColumnByKey","ngOnDestroy","ElementRef","NgZone","ChangeDetectorRef","Input","Output","ViewChild","ContentChildren","PrimeTemplate","Component","selector","providers","changeDetection","ChangeDetectionStrategy","Default","TableBody","dt","ScrollableView","loadedPages","subscription","subscribe","alignScrollBar","_scrollHeight","includes","console","log","ngAfterViewChecked","frozen","scrollableAlignerViewChild","calculateScrollbarHeight","frozenColumns","frozenView","frozenSiblingBody","bindEvents","scrollHeaderViewChild","headerScrollListener","onHeaderScroll","bind","scrollFooterViewChild","footerScrollListener","onFooterScroll","bodyScrollListener","onBodyScroll","virtualScrollBody","getElementRef","scrollBodyViewChild","unbindEvents","preventBodyScrollPropagation","scrollHeaderBoxViewChild","marginLeft","scrollFooterBoxViewChild","scrollTop","onScrollIndexChange","createPageRange","floor","page","loadPage","range","getPageCount","dataToRender","dataLength","scrollToIndex","hasVerticalOverflow","getDataLength","getViewportSize","scrollTableViewChild","scrollBarWidth","paddingRight","unsubscribe","CdkVirtualScrollViewport","SortableColumn","isEnabled","updateSortState","onClick","onEnterKey","pSortableColumnDisabled","HostListener","Directive","host","[class.ui-sortable-column]","[class.ui-state-highlight]","[attr.tabindex]","[attr.role]","[attr.aria-sort]","SortIcon","SelectableRow","onTouchEnd","onArrowDownKeyDown","row","currentTarget","nextRow","findNextSelectableRow","focus","onArrowUpKeyDown","prevRow","findPrevSelectableRow","onEnterKeyDown","pSelectableRowDisabled","[class.ui-selectable-row]","SelectableRowDblClick","ContextMenuRow","pContextMenuRowDisabled","[class.ui-contextmenu-selected]","RowToggler","pRowTogglerDisabled","ResizableColumn","resizer","className","resizerMouseDownListener","onMouseDown","bindDocumentEvents","documentMouseMoveListener","onDocumentMouseMove","documentMouseUpListener","onDocumentMouseUp","unbindDocumentEvents","which","pResizableColumnDisabled","ReorderableColumn","mouseDownListener","dragStartListener","onDragStart","dragOverListener","onDragEnter","dragEnterListener","dragLeaveListener","onDragLeave","onDragOver","onDrop","pReorderableColumnDisabled","EditableColumn","closeEditingCell","openCell","focusCellSelector","pFocusCellSelector","focusableElement","completed","onEscapeKeyDown","onShiftKeyDown","moveToPreviousCell","moveToNextCell","findCell","currentCell","targetCell","findPreviousEditableColumn","invokeElementMethod","findNextEditableColumn","prevCell","previousRow","lastElementChild","nextCell","firstElementChild","pEditableColumnDisabled","EditableRow","pEditableRowDisabled","InitEditableRow","editableRow","SaveEditableRow","CancelEditableRow","CellEditor","editableColumn","inputTemplate","outputTemplate","decorators","Optional","__param","TableRadioButton","disabled","onFocus","boxViewChild","onBlur","TableCheckbox","TableHeaderCheckbox","valueChangeSubscription","updateCheckedState","selectionChangeSubscription","isDisabled","isAllFilteredValuesChecked","ReorderableRowHandle","ReorderableRow","droppable","dragEndListener","onDragEnd","pReorderableRowDisabled","TableModule","NgModule","imports","CommonModule","PaginatorModule","ScrollingModule","exports","SharedModule","declarations"],"mappings":"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","sourcesContent":["import { NgModule, Component, HostListener, OnInit, OnDestroy, AfterViewInit, AfterViewChecked, Directive, Optional, AfterContentInit,\n    Input, Output, EventEmitter, ElementRef, ContentChildren, TemplateRef, QueryList, ViewChild, NgZone, ChangeDetectorRef, OnChanges, SimpleChanges, ChangeDetectionStrategy, Query} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PrimeTemplate, SharedModule } from 'primeng/api';\nimport { PaginatorModule } from 'primeng/paginator';\nimport { DomHandler } from 'primeng/dom';\nimport { ObjectUtils } from 'primeng/utils';\nimport { SortMeta } from 'primeng/api';\nimport { TableState } from 'primeng/api';\nimport { FilterMetadata } from 'primeng/api';\nimport { Injectable } from '@angular/core';\nimport { BlockableUI } from 'primeng/api';\nimport { Subject, Subscription } from 'rxjs';\nimport { FilterUtils } from 'primeng/utils';\nimport { ScrollingModule, CdkVirtualScrollViewport } from '@angular/cdk/scrolling';\n\n@Injectable()\nexport class TableService {\n\n    private sortSource = new Subject<SortMeta|SortMeta[]>();\n    private selectionSource = new Subject();\n    private contextMenuSource = new Subject<any>();\n    private valueSource = new Subject<any>();\n    private totalRecordsSource = new Subject<any>();\n    private columnsSource = new Subject();\n\n    sortSource$ = this.sortSource.asObservable();\n    selectionSource$ = this.selectionSource.asObservable();\n    contextMenuSource$ = this.contextMenuSource.asObservable();\n    valueSource$ = this.valueSource.asObservable();\n    totalRecordsSource$ = this.totalRecordsSource.asObservable();\n    columnsSource$ = this.columnsSource.asObservable();\n\n    onSort(sortMeta: SortMeta|SortMeta[]) {\n        this.sortSource.next(sortMeta);\n    }\n\n    onSelectionChange() {\n        this.selectionSource.next();\n    }\n\n    onContextMenu(data: any) {\n        this.contextMenuSource.next(data);\n    }\n\n    onValueChange(value: any) {\n        this.valueSource.next(value);\n    }\n\n    onTotalRecordsChange(value: number) {\n        this.totalRecordsSource.next(value);\n    }\n\n    onColumnsChange(columns: any[]) {\n        this.columnsSource.next(columns);\n    }\n}\n\n@Component({\n    selector: 'p-table',\n    template: `\n        <div #container [ngStyle]=\"style\" [class]=\"styleClass\"\n            [ngClass]=\"{'ui-table ui-widget': true, 'ui-table-responsive': responsive, 'ui-table-resizable': resizableColumns,\n                'ui-table-resizable-fit': (resizableColumns && columnResizeMode === 'fit'),\n                'ui-table-hoverable-rows': (rowHover||selectionMode), 'ui-table-auto-layout': autoLayout,\n                'ui-table-flex-scrollable': (scrollable && scrollHeight === 'flex')}\">\n            <div class=\"ui-table-loading ui-widget-overlay\" *ngIf=\"loading && showLoader\"></div>\n            <div class=\"ui-table-loading-content\" *ngIf=\"loading && showLoader\">\n                <i [class]=\"'ui-table-loading-icon pi-spin ' + loadingIcon\"></i>\n            </div>\n            <div *ngIf=\"captionTemplate\" class=\"ui-table-caption ui-widget-header\">\n                <ng-container *ngTemplateOutlet=\"captionTemplate\"></ng-container>\n            </div>\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" styleClass=\"ui-paginator-top\" [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && (paginatorPosition === 'top' || paginatorPosition =='both')\"\n                [templateLeft]=\"paginatorLeftTemplate\" [templateRight]=\"paginatorRightTemplate\" [dropdownAppendTo]=\"paginatorDropdownAppendTo\" [dropdownScrollHeight]=\"paginatorDropdownScrollHeight\"\n                [currentPageReportTemplate]=\"currentPageReportTemplate\" [showCurrentPageReport]=\"showCurrentPageReport\"></p-paginator>\n\n            <div class=\"ui-table-wrapper\" *ngIf=\"!scrollable\">\n                <table role=\"grid\" #table [ngClass]=\"tableStyleClass\" [ngStyle]=\"tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <thead class=\"ui-table-thead\">\n                        <ng-container *ngTemplateOutlet=\"headerTemplate; context: {$implicit: columns}\"></ng-container>\n                    </thead>\n                    <tbody class=\"ui-table-tbody\" [pTableBody]=\"columns\" [pTableBodyTemplate]=\"bodyTemplate\"></tbody>\n                    <tfoot *ngIf=\"footerTemplate\" class=\"ui-table-tfoot\">\n                        <ng-container *ngTemplateOutlet=\"footerTemplate; context {$implicit: columns}\"></ng-container>\n                    </tfoot>\n                </table>\n            </div>\n\n            <div class=\"ui-table-scrollable-wrapper\" *ngIf=\"scrollable\">\n               <div class=\"ui-table-scrollable-view ui-table-frozen-view\" *ngIf=\"frozenColumns||frozenBodyTemplate\" #scrollableFrozenView [pScrollableView]=\"frozenColumns\" [frozen]=\"true\" [ngStyle]=\"{width: frozenWidth}\" [scrollHeight]=\"scrollHeight\"></div>\n               <div class=\"ui-table-scrollable-view\" #scrollableView [pScrollableView]=\"columns\" [frozen]=\"false\" [scrollHeight]=\"scrollHeight\" [ngStyle]=\"{left: frozenWidth, width: 'calc(100% - '+frozenWidth+')'}\"></div>\n            </div>\n\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" styleClass=\"ui-paginator-bottom\" [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && (paginatorPosition === 'bottom' || paginatorPosition =='both')\"\n                [templateLeft]=\"paginatorLeftTemplate\" [templateRight]=\"paginatorRightTemplate\" [dropdownAppendTo]=\"paginatorDropdownAppendTo\" [dropdownScrollHeight]=\"paginatorDropdownScrollHeight\"\n                [currentPageReportTemplate]=\"currentPageReportTemplate\" [showCurrentPageReport]=\"showCurrentPageReport\"></p-paginator>\n\n                <div *ngIf=\"summaryTemplate\" class=\"ui-table-summary ui-widget-header\">\n                <ng-container *ngTemplateOutlet=\"summaryTemplate\"></ng-container>\n            </div>\n\n            <div #resizeHelper class=\"ui-column-resizer-helper ui-state-highlight\" style=\"display:none\" *ngIf=\"resizableColumns\"></div>\n\n            <span #reorderIndicatorUp class=\"pi pi-arrow-down ui-table-reorder-indicator-up\" style=\"display:none\" *ngIf=\"reorderableColumns\"></span>\n            <span #reorderIndicatorDown class=\"pi pi-arrow-up ui-table-reorder-indicator-down\" style=\"display:none\" *ngIf=\"reorderableColumns\"></span>\n        </div>\n    `,\n    providers: [TableService],\n    changeDetection: ChangeDetectionStrategy.Default\n})\nexport class Table implements OnInit, AfterViewInit, AfterContentInit, BlockableUI, OnChanges {\n\n    @Input() frozenColumns: any[];\n\n    @Input() frozenValue: any[];\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() tableStyle: any;\n\n    @Input() tableStyleClass: string;\n\n    @Input() paginator: boolean;\n\n    @Input() pageLinks: number = 5;\n\n    @Input() rowsPerPageOptions: any[];\n\n    @Input() alwaysShowPaginator: boolean = true;\n\n    @Input() paginatorPosition: string = 'bottom';\n\n    @Input() paginatorDropdownAppendTo: any;\n\n    @Input() paginatorDropdownScrollHeight: string = '200px';\n\n    @Input() currentPageReportTemplate: string = '{currentPage} of {totalPages}';\n\n    @Input() showCurrentPageReport: boolean;\n\n    @Input() defaultSortOrder: number = 1;\n\n    @Input() sortMode: string = 'single';\n\n    @Input() resetPageOnSort: boolean = true;\n\n    @Input() selectionMode: string;\n\n    @Output() selectionChange: EventEmitter<any> = new EventEmitter();\n\n    @Input() contextMenuSelection: any;\n\n    @Output() contextMenuSelectionChange: EventEmitter<any> = new EventEmitter();\n\n    @Input() contextMenuSelectionMode: string = \"separate\";\n\n    @Input() dataKey: string;\n\n    @Input() metaKeySelection: boolean;\n\n    @Input() rowTrackBy: Function = (index: number, item: any) => item;\n\n    @Input() lazy: boolean = false;\n\n    @Input() lazyLoadOnInit: boolean = true;\n\n    @Input() compareSelectionBy: string = 'deepEquals';\n\n    @Input() csvSeparator: string = ',';\n\n    @Input() exportFilename: string = 'download';\n\n    @Input() filters: { [s: string]: FilterMetadata; } = {};\n\n    @Input() globalFilterFields: string[];\n\n    @Input() filterDelay: number = 300;\n\n    @Input() filterLocale: string;\n\n    @Input() expandedRowKeys: { [s: string]: boolean; } = {};\n\n    @Input() editingRowKeys: { [s: string]: boolean; } = {};\n\n    @Input() rowExpandMode: string = 'multiple';\n\n    @Input() scrollable: boolean;\n\n    @Input() scrollHeight: string;\n\n    @Input() virtualScroll: boolean;\n\n    @Input() virtualScrollDelay: number = 150;\n\n    @Input() virtualRowHeight: number = 28;\n\n    @Input() frozenWidth: string;\n\n    @Input() responsive: boolean;\n\n    @Input() contextMenu: any;\n\n    @Input() resizableColumns: boolean;\n\n    @Input() columnResizeMode: string = 'fit';\n\n    @Input() reorderableColumns: boolean;\n\n    @Input() loading: boolean;\n\n    @Input() loadingIcon: string = 'pi pi-spinner';\n\n    @Input() showLoader: boolean = true;\n\n    @Input() rowHover: boolean;\n\n    @Input() customSort: boolean;\n\n    @Input() autoLayout: boolean;\n\n    @Input() exportFunction;\n\n    @Input() stateKey: string;\n\n    @Input() stateStorage: string = 'session';\n\n    @Input() editMode: string = 'cell';\n\n    @Input() minBufferPx: number;\n\n    @Input() maxBufferPx: number;\n\n    @Output() onRowSelect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onRowUnselect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onPage: EventEmitter<any> = new EventEmitter();\n\n    @Output() onSort: EventEmitter<any> = new EventEmitter();\n\n    @Output() onFilter: EventEmitter<any> = new EventEmitter();\n\n    @Output() onLazyLoad: EventEmitter<any> = new EventEmitter();\n\n    @Output() onRowExpand: EventEmitter<any> = new EventEmitter();\n\n    @Output() onRowCollapse: EventEmitter<any> = new EventEmitter();\n\n    @Output() onContextMenuSelect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onColResize: EventEmitter<any> = new EventEmitter();\n\n    @Output() onColReorder: EventEmitter<any> = new EventEmitter();\n\n    @Output() onRowReorder: EventEmitter<any> = new EventEmitter();\n\n    @Output() onEditInit: EventEmitter<any> = new EventEmitter();\n\n    @Output() onEditComplete: EventEmitter<any> = new EventEmitter();\n\n    @Output() onEditCancel: EventEmitter<any> = new EventEmitter();\n\n    @Output() onHeaderCheckboxToggle: EventEmitter<any> = new EventEmitter();\n\n    @Output() sortFunction: EventEmitter<any> = new EventEmitter();\n\n    @Output() firstChange: EventEmitter<number> = new EventEmitter();\n\n    @Output() rowsChange: EventEmitter<number> = new EventEmitter();\n\n    @Output() onStateSave: EventEmitter<any> = new EventEmitter();\n\n    @Output() onStateRestore: EventEmitter<any> = new EventEmitter();\n\n    @ViewChild('container') containerViewChild: ElementRef;\n\n    @ViewChild('resizeHelper') resizeHelperViewChild: ElementRef;\n\n    @ViewChild('reorderIndicatorUp') reorderIndicatorUpViewChild: ElementRef;\n\n    @ViewChild('reorderIndicatorDown') reorderIndicatorDownViewChild: ElementRef;\n\n    @ViewChild('table') tableViewChild: ElementRef;\n\n    @ViewChild('scrollableView') scrollableViewChild;\n\n    @ViewChild('scrollableFrozenView') scrollableFrozenViewChild;\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<PrimeTemplate>;\n\n    _value: any[] = [];\n\n    _columns: any[];\n\n    _totalRecords: number = 0;\n\n    _first: number = 0;\n\n    _rows: number;\n\n    filteredValue: any[];\n\n    headerTemplate: TemplateRef<any>;\n\n    bodyTemplate: TemplateRef<any>;\n\n    loadingBodyTemplate: TemplateRef<any>;\n\n    captionTemplate: TemplateRef<any>;\n\n    frozenRowsTemplate: TemplateRef<any>;\n\n    footerTemplate: TemplateRef<any>;\n\n    summaryTemplate: TemplateRef<any>;\n\n    colGroupTemplate: TemplateRef<any>;\n\n    expandedRowTemplate: TemplateRef<any>;\n\n    frozenHeaderTemplate: TemplateRef<any>;\n\n    frozenBodyTemplate: TemplateRef<any>;\n\n    frozenFooterTemplate: TemplateRef<any>;\n\n    frozenColGroupTemplate: TemplateRef<any>;\n\n    emptyMessageTemplate: TemplateRef<any>;\n\n    paginatorLeftTemplate: TemplateRef<any>;\n\n    paginatorRightTemplate: TemplateRef<any>;\n\n    selectionKeys: any = {};\n\n    lastResizerHelperX: number;\n\n    reorderIconWidth: number;\n\n    reorderIconHeight: number;\n\n    draggedColumn: any;\n\n    draggedRowIndex: number;\n\n    droppedRowIndex: number;\n\n    rowDragging: boolean;\n\n    dropPosition: number;\n\n    editingCell: Element;\n\n    editingCellData: any;\n\n    editingCellField: any;\n\n    editingCellRowIndex: number;\n\n    editingCellClick: boolean;\n\n    documentEditListener: any;\n\n    _multiSortMeta: SortMeta[];\n\n    _sortField: string;\n\n    _sortOrder: number = 1;\n\n    preventSelectionSetterPropagation: boolean;\n\n    _selection: any;\n\n    anchorRowIndex: number;\n\n    rangeRowIndex: number;\n\n    filterTimeout: any;\n\n    initialized: boolean;\n\n    rowTouched: boolean;\n\n    restoringSort: boolean;\n\n    restoringFilter: boolean;\n\n    stateRestored: boolean;\n\n    columnOrderStateRestored: boolean;\n\n    columnWidthsState: string;\n\n    tableWidthState: string;\n\n    constructor(public el: ElementRef, public zone: NgZone, public tableService: TableService, public cd: ChangeDetectorRef) {}\n\n    ngOnInit() {\n        if (this.lazy && this.lazyLoadOnInit) {\n            if (!this.virtualScroll) {\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\n            }\n            \n            if (this.restoringFilter) {\n                this.restoringFilter = false;\n            }\n        }\n\n        this.initialized = true;\n    }\n\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch (item.getType()) {\n                case 'caption':\n                    this.captionTemplate = item.template;\n                break;\n\n                case 'header':\n                    this.headerTemplate = item.template;\n                break;\n\n                case 'body':\n                    this.bodyTemplate = item.template;\n                break;\n\n                case 'loadingbody':\n                    this.loadingBodyTemplate = item.template;\n                break;\n\n                case 'footer':\n                    this.footerTemplate = item.template;\n                break;\n\n                case 'summary':\n                    this.summaryTemplate = item.template;\n                break;\n\n                case 'colgroup':\n                    this.colGroupTemplate = item.template;\n                break;\n\n                case 'rowexpansion':\n                    this.expandedRowTemplate = item.template;\n                break;\n\n                case 'frozenrows':\n                    this.frozenRowsTemplate = item.template;\n                break;\n\n                case 'frozenheader':\n                    this.frozenHeaderTemplate = item.template;\n                break;\n\n                case 'frozenbody':\n                    this.frozenBodyTemplate = item.template;\n                break;\n\n                case 'frozenfooter':\n                    this.frozenFooterTemplate = item.template;\n                break;\n\n                case 'frozencolgroup':\n                    this.frozenColGroupTemplate = item.template;\n                break;\n\n                case 'emptymessage':\n                    this.emptyMessageTemplate = item.template;\n                break;\n\n                case 'paginatorleft':\n                    this.paginatorLeftTemplate = item.template;\n                break;\n\n                case 'paginatorright':\n                    this.paginatorRightTemplate = item.template;\n                break;\n            }\n        });\n    }\n\n    ngAfterViewInit() {\n        if (this.isStateful() && this.resizableColumns) {\n            this.restoreColumnWidths();\n        }\n    }\n\n    clearCache() {\n        if (this.scrollable) {\n            if (this.scrollableViewChild) {\n                this.scrollableViewChild.clearCache();\n            }\n\n            if (this.scrollableFrozenViewChild) {\n                this.scrollableViewChild.clearCache();\n            }\n        }\n    }\n\n    ngOnChanges(simpleChange: SimpleChanges) {\n        if (simpleChange.value) {\n            if (this.isStateful() && !this.stateRestored) {\n                this.restoreState();\n            }\n\n            this._value = simpleChange.value.currentValue;\n\n            if (!this.lazy) {\n                this.clearCache();\n                this.totalRecords = (this._value ? this._value.length : 0);\n\n                if (this.sortMode == 'single' && this.sortField)\n                    this.sortSingle();\n                else if (this.sortMode == 'multiple' && this.multiSortMeta)\n                    this.sortMultiple();\n                else if (this.hasFilter())       //sort already filters\n                    this._filter();\n            }\n\n            this.tableService.onValueChange(simpleChange.value.currentValue);\n        }\n\n        if (simpleChange.columns) {\n            this._columns = simpleChange.columns.currentValue;\n            this.tableService.onColumnsChange(simpleChange.columns.currentValue);\n\n            if (this._columns && this.isStateful() && this.reorderableColumns && !this.columnOrderStateRestored ) {\n                this.restoreColumnOrder();\n            }\n        }\n\n        if (simpleChange.sortField) {\n            this._sortField = simpleChange.sortField.currentValue;\n\n            //avoid triggering lazy load prior to lazy initialization at onInit\n            if ( !this.lazy || this.initialized ) {\n                if (this.sortMode === 'single') {\n                    this.sortSingle();\n                }\n            }\n        }\n\n        if (simpleChange.sortOrder) {\n            this._sortOrder = simpleChange.sortOrder.currentValue;\n\n            //avoid triggering lazy load prior to lazy initialization at onInit\n            if ( !this.lazy || this.initialized ) {\n                if (this.sortMode === 'single') {\n                    this.sortSingle();\n                }\n            }\n        }\n\n        if (simpleChange.multiSortMeta) {\n            this._multiSortMeta = simpleChange.multiSortMeta.currentValue;\n            if (this.sortMode === 'multiple') {\n                this.sortMultiple();\n            }\n        }\n\n        if (simpleChange.selection) {\n            this._selection = simpleChange.selection.currentValue;\n\n            if (!this.preventSelectionSetterPropagation) {\n                this.updateSelectionKeys();\n                this.tableService.onSelectionChange();\n            }\n            this.preventSelectionSetterPropagation = false;\n        }\n    }\n\n    @Input() get value(): any[] {\n        return this._value;\n    }\n    set value(val: any[]) {\n        this._value = val;\n    }\n\n    @Input() get columns(): any[] {\n        return this._columns;\n    }\n    set columns(cols: any[]) {\n        this._columns = cols;\n    }\n\n    @Input() get first(): number {\n        return this._first;\n    }\n    set first(val: number) {\n        this._first = val;\n    }\n\n    @Input() get rows(): number {\n        return this._rows;\n    }\n    set rows(val: number) {\n        this._rows = val;\n    }\n\n    @Input() get totalRecords(): number {\n        return this._totalRecords;\n    }\n    set totalRecords(val: number) {\n        this._totalRecords = val;\n        this.tableService.onTotalRecordsChange(this._totalRecords);\n    }\n\n    @Input() get sortField(): string {\n        return this._sortField;\n    }\n\n    set sortField(val: string) {\n        this._sortField = val;\n    }\n\n    @Input() get sortOrder(): number {\n        return this._sortOrder;\n    }\n    set sortOrder(val: number) {\n        this._sortOrder = val;\n    }\n\n    @Input() get multiSortMeta(): SortMeta[] {\n        return this._multiSortMeta;\n    }\n\n    set multiSortMeta(val: SortMeta[]) {\n        this._multiSortMeta = val;\n    }\n\n    @Input() get selection(): any {\n        return this._selection;\n    }\n\n    set selection(val: any) {\n        this._selection = val;\n    }\n\n    updateSelectionKeys() {\n        if (this.dataKey && this._selection) {\n            this.selectionKeys = {};\n            if (Array.isArray(this._selection)) {\n                for(let data of this._selection) {\n                    this.selectionKeys[String(ObjectUtils.resolveFieldData(data, this.dataKey))] = 1;\n                }\n            }\n            else {\n                this.selectionKeys[String(ObjectUtils.resolveFieldData(this._selection, this.dataKey))] = 1;\n            }\n        }\n    }\n\n    onPageChange(event) {\n        this.first = event.first;\n        this.rows = event.rows;\n\n        if (this.lazy) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n\n        this.onPage.emit({\n            first: this.first,\n            rows: this.rows\n        });\n\n        this.firstChange.emit(this.first);\n        this.rowsChange.emit(this.rows);\n        this.tableService.onValueChange(this.value);\n\n        if (this.isStateful()) {\n            this.saveState();\n        }\n\n        this.anchorRowIndex = null;\n\n        if (this.scrollable) {\n            this.resetScrollTop();\n        }\n    }\n\n    sort(event) {\n        let originalEvent = event.originalEvent;\n\n        if (this.sortMode === 'single') {\n            this._sortOrder = (this.sortField === event.field) ? this.sortOrder * -1 : this.defaultSortOrder;\n            this._sortField = event.field;\n            this.sortSingle();\n\n            if (this.resetPageOnSort) {\n                this._first = 0;\n                this.firstChange.emit(this._first);\n\n                if (this.scrollable) {\n                    this.resetScrollTop();\n                }\n            }\n        }\n        if (this.sortMode === 'multiple') {\n            let metaKey = originalEvent.metaKey || originalEvent.ctrlKey;\n            let sortMeta = this.getSortMeta(event.field);\n\n            if (sortMeta) {\n                if (!metaKey) {\n                    this._multiSortMeta = [{ field: event.field, order: sortMeta.order * -1 }];\n\n                    if (this.resetPageOnSort) {\n                        this._first = 0;\n                        this.firstChange.emit(this._first);\n                        \n                        if (this.scrollable) {\n                            this.resetScrollTop();\n                        }\n                    }\n                }\n                else {\n                    sortMeta.order = sortMeta.order * -1;\n                }\n            }\n            else {\n                if (!metaKey || !this.multiSortMeta) {\n                    this._multiSortMeta = [];\n\n                    if (this.resetPageOnSort) {\n                        this._first = 0;\n                        this.firstChange.emit(this._first);\n                    }\n                }\n                this._multiSortMeta.push({ field: event.field, order: this.defaultSortOrder });\n            }\n\n            this.sortMultiple();\n        }\n\n        if (this.isStateful()) {\n            this.saveState();\n        }\n\n        this.anchorRowIndex = null;\n    }\n\n    sortSingle() {\n        if (this.sortField && this.sortOrder) {\n            if (this.restoringSort) {\n                this.restoringSort = false;\n            }\n\n            if (this.lazy) {\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\n            }\n            else if (this.value) {\n                if (this.customSort) {\n                    this.sortFunction.emit({\n                        data: this.value,\n                        mode: this.sortMode,\n                        field: this.sortField,\n                        order: this.sortOrder\n                    });\n                }\n                else {\n                    this.value.sort((data1, data2) => {\n                        let value1 = ObjectUtils.resolveFieldData(data1, this.sortField);\n                        let value2 = ObjectUtils.resolveFieldData(data2, this.sortField);\n                        let result = null;\n\n                        if (value1 == null && value2 != null)\n                            result = -1;\n                        else if (value1 != null && value2 == null)\n                            result = 1;\n                        else if (value1 == null && value2 == null)\n                            result = 0;\n                        else if (typeof value1 === 'string' && typeof value2 === 'string')\n                            result = value1.localeCompare(value2);\n                        else\n                            result = (value1 < value2) ? -1 : (value1 > value2) ? 1 : 0;\n\n                        return (this.sortOrder * result);\n                    });\n                }\n\n                if (this.hasFilter()) {\n                    this._filter();\n                }\n            }\n\n            let sortMeta: SortMeta = {\n                field: this.sortField,\n                order: this.sortOrder\n            };\n\n            this.onSort.emit(sortMeta);\n            this.tableService.onSort(sortMeta);\n        }\n    }\n\n    sortMultiple() {\n        if (this.multiSortMeta) {\n            if (this.lazy) {\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\n            }\n            else if (this.value) {\n                if (this.customSort) {\n                    this.sortFunction.emit({\n                        data: this.value,\n                        mode: this.sortMode,\n                        multiSortMeta: this.multiSortMeta\n                    });\n                }\n                else {\n                    this.value.sort((data1, data2) => {\n                        return this.multisortField(data1, data2, this.multiSortMeta, 0);\n                    });\n                }\n\n                if (this.hasFilter()) {\n                    this._filter();\n                }\n            }\n\n            this.onSort.emit({\n                multisortmeta: this.multiSortMeta\n            });\n            this.tableService.onSort(this.multiSortMeta);\n        }\n    }\n\n    multisortField(data1, data2, multiSortMeta, index) {\n        let value1 = ObjectUtils.resolveFieldData(data1, multiSortMeta[index].field);\n        let value2 = ObjectUtils.resolveFieldData(data2, multiSortMeta[index].field);\n        let result = null;\n\n        if (value1 == null && value2 != null)\n            result = -1;\n        else if (value1 != null && value2 == null)\n            result = 1;\n        else if (value1 == null && value2 == null)\n            result = 0;\n        else if (typeof value1 == 'string' || value1 instanceof String) {\n            if (value1.localeCompare && (value1 != value2)) {\n                return (multiSortMeta[index].order * value1.localeCompare(value2));\n            }\n        }\n        else {\n            result = (value1 < value2) ? -1 : 1;\n        }\n\n        if (value1 == value2) {\n            return (multiSortMeta.length - 1) > (index) ? (this.multisortField(data1, data2, multiSortMeta, index + 1)) : 0;\n        }\n\n        return (multiSortMeta[index].order * result);\n    }\n\n    getSortMeta(field: string) {\n        if (this.multiSortMeta && this.multiSortMeta.length) {\n            for (let i = 0; i < this.multiSortMeta.length; i++) {\n                if (this.multiSortMeta[i].field === field) {\n                    return this.multiSortMeta[i];\n                }\n            }\n        }\n\n        return null;\n    }\n\n    isSorted(field: string) {\n        if (this.sortMode === 'single') {\n            return (this.sortField && this.sortField === field);\n        }\n        else if (this.sortMode === 'multiple') {\n            let sorted = false;\n            if (this.multiSortMeta)Â {\n                for(let i = 0; i < this.multiSortMeta.length; i++) {\n                    if (this.multiSortMeta[i].field == field)Â {\n                        sorted = true;\n                        break;\n                    }\n                }\n            }\n            return sorted;\n        }\n    }\n\n    handleRowClick(event) {\n        let target = (<HTMLElement> event.originalEvent.target);\n        let targetNode = target.nodeName;\n        let parentNode = target.parentElement && target.parentElement.nodeName;\n        if (targetNode == 'INPUT' || targetNode == 'BUTTON' || targetNode == 'A' ||\n            parentNode == 'INPUT' || parentNode == 'BUTTON' || parentNode == 'A' ||\n            (DomHandler.hasClass(event.originalEvent.target, 'ui-clickable'))) {\n            return;\n        }\n\n        if (this.selectionMode) {\n            this.preventSelectionSetterPropagation = true;\n            if (this.isMultipleSelectionMode() && event.originalEvent.shiftKey && this.anchorRowIndex != null) {\n                DomHandler.clearSelection();\n                if (this.rangeRowIndex != null) {\n                    this.clearSelectionRange(event.originalEvent);\n                }\n\n                this.rangeRowIndex = event.rowIndex;\n                this.selectRange(event.originalEvent, event.rowIndex);\n            }\n            else {\n                let rowData = event.rowData;\n                let selected = this.isSelected(rowData);\n                let metaSelection = this.rowTouched ? false : this.metaKeySelection;\n                let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(rowData, this.dataKey)) : null;\n                this.anchorRowIndex = event.rowIndex;\n                this.rangeRowIndex = event.rowIndex;\n\n                if (metaSelection) {\n                    let metaKey = event.originalEvent.metaKey||event.originalEvent.ctrlKey;\n\n                    if (selected && metaKey) {\n                        if (this.isSingleSelectionMode()) {\n                            this._selection = null;\n                            this.selectionKeys = {};\n                            this.selectionChange.emit(null);\n                        }\n                        else {\n                            let selectionIndex = this.findIndexInSelection(rowData);\n                            this._selection = this.selection.filter((val,i) => i!=selectionIndex);\n                            this.selectionChange.emit(this.selection);\n                            if (dataKeyValue) {\n                                delete this.selectionKeys[dataKeyValue];\n                            }\n                        }\n\n                        this.onRowUnselect.emit({originalEvent: event.originalEvent, data: rowData, type: 'row'});\n                    }\n                    else {\n                        if (this.isSingleSelectionMode()) {\n                            this._selection = rowData;\n                            this.selectionChange.emit(rowData);\n                            if (dataKeyValue) {\n                                this.selectionKeys = {};\n                                this.selectionKeys[dataKeyValue] = 1;\n                            }\n                        }\n                        else if (this.isMultipleSelectionMode()) {\n                            if (metaKey) {\n                                this._selection = this.selection||[];\n                            }\n                            else {\n                                this._selection = [];\n                                this.selectionKeys = {};\n                            }\n\n                            this._selection = [...this.selection,rowData];\n                            this.selectionChange.emit(this.selection);\n                            if (dataKeyValue) {\n                                this.selectionKeys[dataKeyValue] = 1;\n                            }\n                        }\n\n                        this.onRowSelect.emit({originalEvent: event.originalEvent, data: rowData, type: 'row', index: event.rowIndex});\n                    }\n                }\n                else {\n                    if (this.selectionMode === 'single') {\n                        if (selected) {\n                            this._selection = null;\n                            this.selectionKeys = {};\n                            this.selectionChange.emit(this.selection);\n                            this.onRowUnselect.emit({ originalEvent: event.originalEvent, data: rowData, type: 'row' });\n                        }\n                        else {\n                            this._selection = rowData;\n                            this.selectionChange.emit(this.selection);\n                            this.onRowSelect.emit({ originalEvent: event.originalEvent, data: rowData, type: 'row', index: event.rowIndex });\n                            if (dataKeyValue) {\n                                this.selectionKeys = {};\n                                this.selectionKeys[dataKeyValue] = 1;\n                            }\n                        }\n                    }\n                    else if (this.selectionMode === 'multiple') {\n                        if (selected) {\n                            let selectionIndex = this.findIndexInSelection(rowData);\n                            this._selection = this.selection.filter((val, i) => i != selectionIndex);\n                            this.selectionChange.emit(this.selection);\n                            this.onRowUnselect.emit({ originalEvent: event.originalEvent, data: rowData, type: 'row' });\n                            if (dataKeyValue) {\n                                delete this.selectionKeys[dataKeyValue];\n                            }\n                        }\n                        else {\n                            this._selection = this.selection ? [...this.selection, rowData] : [rowData];\n                            this.selectionChange.emit(this.selection);\n                            this.onRowSelect.emit({ originalEvent: event.originalEvent, data: rowData, type: 'row', index: event.rowIndex });\n                            if (dataKeyValue) {\n                                this.selectionKeys[dataKeyValue] = 1;\n                            }\n                        }\n                    }\n                }\n            }\n\n            this.tableService.onSelectionChange();\n\n            if (this.isStateful()) {\n                this.saveState();\n            }\n        }\n\n        this.rowTouched = false;\n    }\n\n    handleRowTouchEnd(event) {\n        this.rowTouched = true;\n    }\n\n    handleRowRightClick(event) {\n        if (this.contextMenu) {\n            const rowData = event.rowData;\n\n            if (this.contextMenuSelectionMode === 'separate') {\n                this.contextMenuSelection = rowData;\n                this.contextMenuSelectionChange.emit(rowData);\n                this.onContextMenuSelect.emit({originalEvent: event.originalEvent, data: rowData, index: event.rowIndex});\n                this.contextMenu.show(event.originalEvent);\n                this.tableService.onContextMenu(rowData);\n            }\n            else if (this.contextMenuSelectionMode === 'joint') {\n                this.preventSelectionSetterPropagation = true;\n                let selected = this.isSelected(rowData);\n                let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(rowData, this.dataKey)) : null;\n\n                if (!selected) {\n                    if (this.isSingleSelectionMode()) {\n                        this.selection = rowData;\n                        this.selectionChange.emit(rowData);\n                    }\n                    else if (this.isMultipleSelectionMode()) {\n                        this.selection = [rowData];\n                        this.selectionChange.emit(this.selection);\n                    }\n\n                    if (dataKeyValue) {\n                        this.selectionKeys[dataKeyValue] = 1;\n                    }\n                }\n\n                this.contextMenu.show(event.originalEvent);\n                this.onContextMenuSelect.emit({originalEvent: event, data: rowData, index: event.rowIndex});\n            }\n        }\n    }\n\n    selectRange(event: MouseEvent, rowIndex: number) {\n        let rangeStart, rangeEnd;\n\n        if (this.anchorRowIndex > rowIndex) {\n            rangeStart = rowIndex;\n            rangeEnd = this.anchorRowIndex;\n        }\n        else if (this.anchorRowIndex < rowIndex) {\n            rangeStart = this.anchorRowIndex;\n            rangeEnd = rowIndex;\n        }\n        else {\n            rangeStart = rowIndex;\n            rangeEnd = rowIndex;\n        }\n\n        if (this.lazy && this.paginator) {\n            rangeStart -= this.first;\n            rangeEnd -= this.first;\n        }\n\n        for(let i = rangeStart; i <= rangeEnd; i++) {\n            let rangeRowData = this.filteredValue ? this.filteredValue[i] : this.value[i];\n            if (!this.isSelected(rangeRowData)) {\n                this._selection = [...this.selection, rangeRowData];\n                let dataKeyValue: string = this.dataKey ? String(ObjectUtils.resolveFieldData(rangeRowData, this.dataKey)) : null;\n                if (dataKeyValue) {\n                    this.selectionKeys[dataKeyValue] = 1;\n                }\n                this.onRowSelect.emit({originalEvent: event, data: rangeRowData, type: 'row'});\n            }\n        }\n\n        this.selectionChange.emit(this.selection);\n    }\n\n    clearSelectionRange(event: MouseEvent) {\n        let rangeStart, rangeEnd;\n\n        if (this.rangeRowIndex > this.anchorRowIndex) {\n            rangeStart = this.anchorRowIndex;\n            rangeEnd = this.rangeRowIndex;\n        }\n        else if (this.rangeRowIndex < this.anchorRowIndex) {\n            rangeStart = this.rangeRowIndex;\n            rangeEnd = this.anchorRowIndex;\n        }\n        else {\n            rangeStart = this.rangeRowIndex;\n            rangeEnd = this.rangeRowIndex;\n        }\n\n        for(let i = rangeStart; i <= rangeEnd; i++) {\n            let rangeRowData = this.value[i];\n            let selectionIndex = this.findIndexInSelection(rangeRowData);\n            this._selection = this.selection.filter((val,i) => i!=selectionIndex);\n            let dataKeyValue: string = this.dataKey ? String(ObjectUtils.resolveFieldData(rangeRowData, this.dataKey)) : null;\n            if (dataKeyValue) {\n                delete this.selectionKeys[dataKeyValue];\n            }\n            this.onRowUnselect.emit({originalEvent: event, data: rangeRowData, type: 'row'});\n        }\n    }\n\n    isSelected(rowData) {\n        if (rowData && this.selection) {\n            if (this.dataKey) {\n                return this.selectionKeys[ObjectUtils.resolveFieldData(rowData, this.dataKey)] !== undefined;\n            }\n            else {\n                if (this.selection instanceof Array)\n                    return this.findIndexInSelection(rowData) > -1;\n                else\n                    return this.equals(rowData, this.selection);\n            }\n        }\n\n        return false;\n    }\n\n    findIndexInSelection(rowData: any) {\n        let index: number = -1;\n        if (this.selection && this.selection.length) {\n            for (let i = 0; i < this.selection.length; i++) {\n                if (this.equals(rowData, this.selection[i])) {\n                    index = i;\n                    break;\n                }\n            }\n        }\n\n        return index;\n    }\n\n    toggleRowWithRadio(event: any, rowData:any) {\n        this.preventSelectionSetterPropagation = true;\n\n        if (this.selection != rowData) {\n            this._selection = rowData;\n            this.selectionChange.emit(this.selection);\n            this.onRowSelect.emit({originalEvent: event.originalEvent, index: event.rowIndex, data: rowData, type: 'radiobutton'});\n\n            if (this.dataKey) {\n                this.selectionKeys = {};\n                this.selectionKeys[String(ObjectUtils.resolveFieldData(rowData, this.dataKey))] = 1;\n            }\n        }\n        else {\n            this._selection = null;\n            this.selectionChange.emit(this.selection);\n            this.onRowUnselect.emit({originalEvent: event.originalEvent, index: event.rowIndex, data: rowData, type: 'radiobutton'});\n        }\n\n        this.tableService.onSelectionChange();\n\n        if (this.isStateful()) {\n            this.saveState();\n        }\n    }\n\n    toggleRowWithCheckbox(event, rowData: any) {\n        this.selection = this.selection||[];\n        let selected = this.isSelected(rowData);\n        let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(rowData, this.dataKey)) : null;\n        this.preventSelectionSetterPropagation = true;\n\n        if (selected) {\n            let selectionIndex = this.findIndexInSelection(rowData);\n            this._selection = this.selection.filter((val, i) => i != selectionIndex);\n            this.selectionChange.emit(this.selection);\n            this.onRowUnselect.emit({ originalEvent: event.originalEvent, index: event.rowIndex, data: rowData, type: 'checkbox' });\n            if (dataKeyValue) {\n                delete this.selectionKeys[dataKeyValue];\n            }\n        }\n        else {\n            this._selection = this.selection ? [...this.selection, rowData] : [rowData];\n            this.selectionChange.emit(this.selection);\n            this.onRowSelect.emit({ originalEvent: event.originalEvent, index: event.rowIndex, data: rowData, type: 'checkbox' });\n            if (dataKeyValue) {\n                this.selectionKeys[dataKeyValue] = 1;\n            }\n        }\n\n        this.tableService.onSelectionChange();\n\n        if (this.isStateful()) {\n            this.saveState();\n        }\n    }\n\n    toggleRowsWithCheckbox(event: Event, check: boolean) {\n        this._selection = check ? this.filteredValue ? this.filteredValue.slice(): this.value.slice() : [];\n        this.preventSelectionSetterPropagation = true;\n        this.updateSelectionKeys();\n        this.selectionChange.emit(this._selection);\n        this.tableService.onSelectionChange();\n        this.onHeaderCheckboxToggle.emit({originalEvent: event, checked: check});\n\n        if (this.isStateful()) {\n            this.saveState();\n        }\n    }\n\n    equals(data1, data2) {\n        return this.compareSelectionBy === 'equals' ? (data1 === data2) : ObjectUtils.equals(data1, data2, this.dataKey);\n    }\n\n    filter(value, field, matchMode) {\n        if (this.filterTimeout) {\n            clearTimeout(this.filterTimeout);\n        }\n\n        if (!this.isFilterBlank(value)) {\n            this.filters[field] = { value: value, matchMode: matchMode };\n        } else if (this.filters[field]) {\n            delete this.filters[field];\n        }\n\n        this.filterTimeout = setTimeout(() => {\n            this._filter();\n            this.filterTimeout = null;\n        }, this.filterDelay);\n\n        this.anchorRowIndex = null;\n    }\n\n    filterGlobal(value, matchMode) {\n        this.filter(value, 'global', matchMode);\n    }\n\n    isFilterBlank(filter: any): boolean {\n        if (filter !== null && filter !== undefined) {\n            if ((typeof filter === 'string' && filter.trim().length == 0) || (filter instanceof Array && filter.length == 0))\n                return true;\n            else\n                return false;\n        }\n        return true;\n    }\n\n    _filter() {\n        if (!this.restoringFilter) {\n            this.first = 0;\n            this.firstChange.emit(this.first);\n        }\n\n        if (this.lazy) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n        else {\n            if (!this.value) {\n                return;\n            }\n\n            if (!this.hasFilter()) {\n                this.filteredValue = null;\n                if (this.paginator) {\n                    this.totalRecords = this.value ? this.value.length : 0;\n                }\n            }\n            else {\n                let globalFilterFieldsArray;\n                if (this.filters['global']) {\n                    if (!this.columns && !this.globalFilterFields)\n                        throw new Error('Global filtering requires dynamic columns or globalFilterFields to be defined.');\n                    else\n                        globalFilterFieldsArray = this.globalFilterFields||this.columns;\n                }\n\n                this.filteredValue = [];\n\n                for (let i = 0; i < this.value.length; i++) {\n                    let localMatch = true;\n                    let globalMatch = false;\n                    let localFiltered = false;\n\n                    for (let prop in this.filters) {\n                        if (this.filters.hasOwnProperty(prop) && prop !== 'global') {\n                            localFiltered = true;\n                            let filterMeta = this.filters[prop];\n                            let filterField = prop;\n                            let filterValue = filterMeta.value;\n                            let filterMatchMode = filterMeta.matchMode || 'startsWith';\n                            let dataFieldValue = ObjectUtils.resolveFieldData(this.value[i], filterField);\n                            let filterConstraint = FilterUtils[filterMatchMode];\n\n                            if (!filterConstraint(dataFieldValue, filterValue, this.filterLocale)) {\n                                localMatch = false;\n                            }\n\n                            if (!localMatch) {\n                                break;\n                            }\n                        }\n                    }\n\n                    if (this.filters['global'] && !globalMatch && globalFilterFieldsArray) {\n                        for(let j = 0; j < globalFilterFieldsArray.length; j++) {\n                            let globalFilterField = globalFilterFieldsArray[j].field||globalFilterFieldsArray[j];\n                            globalMatch = FilterUtils[this.filters['global'].matchMode](ObjectUtils.resolveFieldData(this.value[i], globalFilterField), this.filters['global'].value, this.filterLocale);\n\n                            if (globalMatch) {\n                                break;\n                            }\n                        }\n                    }\n\n                    let matches: boolean;\n                    if (this.filters['global']) {\n                        matches = localFiltered ? (localFiltered && localMatch && globalMatch) : globalMatch;\n                    }\n                    else {\n                        matches = localFiltered && localMatch;\n                    }\n\n                    if (matches) {\n                        this.filteredValue.push(this.value[i]);\n                    }\n                }\n\n                if (this.filteredValue.length === this.value.length) {\n                    this.filteredValue = null;\n                }\n\n                if (this.paginator) {\n                    this.totalRecords = this.filteredValue ? this.filteredValue.length : this.value ? this.value.length : 0;\n                }\n            }\n        }\n\n        this.onFilter.emit({\n            filters: this.filters,\n            filteredValue: this.filteredValue || this.value\n        });\n\n        this.tableService.onValueChange(this.value);\n\n        if (this.isStateful() && !this.restoringFilter) {\n            this.saveState();\n        }\n\n        if (this.restoringFilter) {\n            this.restoringFilter = false;\n        }\n\n        this.cd.markForCheck();\n\n        if (this.scrollable) {\n            this.resetScrollTop();\n        }\n    }\n\n    hasFilter() {\n        let empty = true;\n        for (let prop in this.filters) {\n            if (this.filters.hasOwnProperty(prop)) {\n                empty = false;\n                break;\n            }\n        }\n\n        return !empty;\n    }\n\n    createLazyLoadMetadata(): any {\n        return {\n            first: this.first,\n            rows: this.rows,\n            sortField: this.sortField,\n            sortOrder: this.sortOrder,\n            filters: this.filters,\n            globalFilter: this.filters && this.filters['global'] ? this.filters['global'].value : null,\n            multiSortMeta: this.multiSortMeta\n        };\n    }\n\n    public reset() {\n        this._sortField = null;\n        this._sortOrder = this.defaultSortOrder;\n        this._multiSortMeta = null;\n        this.tableService.onSort(null);\n\n        this.filteredValue = null;\n        this.filters = {};\n\n        this.first = 0;\n        this.firstChange.emit(this.first);\n\n        if (this.lazy) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n        else {\n            this.totalRecords = (this._value ? this._value.length : 0);\n        }\n    }\n\n    public exportCSV(options?: any) {\n        let data = this.filteredValue || this.value;\n        let csv = '';\n\n        if (options && options.selectionOnly) {\n            data = this.selection || [];\n        }\n\n        //headers\n        for (let i = 0; i < this.columns.length; i++) {\n            let column = this.columns[i];\n            if (column.exportable !== false && column.field) {\n                csv += '\"' + (column.header || column.field) + '\"';\n\n                if (i < (this.columns.length - 1)) {\n                    csv += this.csvSeparator;\n                }\n            }\n        }\n\n        //body\n        data.forEach((record, i) => {\n            csv += '\\n';\n            for (let i = 0; i < this.columns.length; i++) {\n                let column = this.columns[i];\n                if (column.exportable !== false && column.field) {\n                    let cellData = ObjectUtils.resolveFieldData(record, column.field);\n\n                    if (cellData != null) {\n                        if (this.exportFunction) {\n                            cellData = this.exportFunction({\n                                data: cellData,\n                                field: column.field\n                            });\n                        }\n                        else\n                            cellData = String(cellData).replace(/\"/g, '\"\"');\n                    }\n                    else\n                        cellData = '';\n\n\n                    csv += '\"' + cellData + '\"';\n\n                    if (i < (this.columns.length - 1)) {\n                        csv += this.csvSeparator;\n                    }\n                }\n            }\n        });\n\n        let blob = new Blob([csv], {\n            type: 'text/csv;charset=utf-8;'\n        });\n\n        if (window.navigator.msSaveOrOpenBlob) {\n            navigator.msSaveOrOpenBlob(blob, this.exportFilename + '.csv');\n        }\n        else {\n            let link = document.createElement(\"a\");\n            link.style.display = 'none';\n            document.body.appendChild(link);\n            if (link.download !== undefined) {\n                link.setAttribute('href', URL.createObjectURL(blob));\n                link.setAttribute('download', this.exportFilename + '.csv');\n                link.click();\n            }\n            else {\n                csv = 'data:text/csv;charset=utf-8,' + csv;\n                window.open(encodeURI(csv));\n            }\n            document.body.removeChild(link);\n        }\n    }\n\n    public resetScrollTop() {\n        if (this.virtualScroll)\n            this.scrollToVirtualIndex(0);\n        else\n            this.scrollTo({top: 0});\n    }\n\n    public scrollToVirtualIndex(index: number) {\n        if (this.scrollableViewChild) {\n            this.scrollableViewChild.scrollToVirtualIndex(index);\n        }\n\n        if (this.scrollableFrozenViewChild) {\n            this.scrollableFrozenViewChild.scrollToVirtualIndex(index);\n        }\n    }\n\n    public scrollTo(options) {\n        if (this.scrollableViewChild) {\n            this.scrollableViewChild.scrollTo(options);\n        }\n\n        if (this.scrollableFrozenViewChild) {\n            this.scrollableFrozenViewChild.scrollTo(options);\n        }\n    }\n\n    updateEditingCell(cell, data, field, index) {\n        this.editingCell = cell;\n        this.editingCellData = data;\n        this.editingCellField = field;\n        this.editingCellRowIndex = index;\n        this.bindDocumentEditListener();\n    }\n\n    isEditingCellValid() {\n        return (this.editingCell && DomHandler.find(this.editingCell, '.ng-invalid.ng-dirty').length === 0);\n    }\n\n    bindDocumentEditListener() {\n        if (!this.documentEditListener) {\n            this.documentEditListener = (event) => {\n                if (this.editingCell && !this.editingCellClick && this.isEditingCellValid()) {\n                    DomHandler.removeClass(this.editingCell, 'ui-editing-cell');\n                    this.editingCell = null;\n                    this.onEditComplete.emit({ field: this.editingCellField, data: this.editingCellData, originalEvent: event, index: this.editingCellRowIndex });\n                    this.editingCellField = null;\n                    this.editingCellData = null;\n                    this.editingCellRowIndex = null;\n                    this.unbindDocumentEditListener();\n                }\n\n                this.editingCellClick = false;\n            };\n\n            document.addEventListener('click', this.documentEditListener);\n        }\n    }\n\n    unbindDocumentEditListener() {\n        if (this.documentEditListener) {\n            document.removeEventListener('click', this.documentEditListener);\n            this.documentEditListener = null;\n        }\n    }\n\n    initRowEdit(rowData: any) {\n        let dataKeyValue = String(ObjectUtils.resolveFieldData(rowData, this.dataKey));\n        this.editingRowKeys[dataKeyValue] = true;\n    }\n\n    saveRowEdit(rowData: any, rowElement: HTMLTableRowElement) {\n        if (DomHandler.find(rowElement, '.ng-invalid.ng-dirty').length === 0) {\n            let dataKeyValue = String(ObjectUtils.resolveFieldData(rowData, this.dataKey));\n            delete this.editingRowKeys[dataKeyValue];\n        }\n    }\n\n    cancelRowEdit(rowData: any) {\n        let dataKeyValue = String(ObjectUtils.resolveFieldData(rowData, this.dataKey));\n        delete this.editingRowKeys[dataKeyValue];\n    }\n\n    toggleRow(rowData: any, event?: Event) {\n        if (!this.dataKey) {\n            throw new Error('dataKey must be defined to use row expansion');\n        }\n\n        let dataKeyValue = String(ObjectUtils.resolveFieldData(rowData, this.dataKey));\n\n        if (this.expandedRowKeys[dataKeyValue] != null) {\n            delete this.expandedRowKeys[dataKeyValue];\n            this.onRowCollapse.emit({\n                originalEvent: event,\n                data: rowData\n            });\n        }\n        else {\n            if (this.rowExpandMode === 'single') {\n                this.expandedRowKeys = {};\n            }\n\n            this.expandedRowKeys[dataKeyValue] = true;\n            this.onRowExpand.emit({\n                originalEvent: event,\n                data: rowData\n            });\n        }\n\n        if (event) {\n            event.preventDefault();\n        }\n\n        if (this.isStateful()) {\n            this.saveState();\n        }\n    }\n\n    isRowExpanded(rowData: any): boolean {\n        return this.expandedRowKeys[String(ObjectUtils.resolveFieldData(rowData, this.dataKey))] === true;\n    }\n\n    isRowEditing(rowData: any): boolean {\n        return this.editingRowKeys[String(ObjectUtils.resolveFieldData(rowData, this.dataKey))] === true;\n    }\n\n    isSingleSelectionMode() {\n        return this.selectionMode === 'single';\n    }\n\n    isMultipleSelectionMode() {\n        return this.selectionMode === 'multiple';\n    }\n\n    onColumnResizeBegin(event) {\n        let containerLeft = DomHandler.getOffset(this.containerViewChild.nativeElement).left;\n        this.lastResizerHelperX = (event.pageX - containerLeft + this.containerViewChild.nativeElement.scrollLeft);\n        this.onColumnResize(event);\n        event.preventDefault();\n    }\n\n    onColumnResize(event) {\n        let containerLeft = DomHandler.getOffset(this.containerViewChild.nativeElement).left;\n        DomHandler.addClass(this.containerViewChild.nativeElement, 'ui-unselectable-text');\n        this.resizeHelperViewChild.nativeElement.style.height = this.containerViewChild.nativeElement.offsetHeight + 'px';\n        this.resizeHelperViewChild.nativeElement.style.top = 0 + 'px';\n        this.resizeHelperViewChild.nativeElement.style.left = (event.pageX - containerLeft + this.containerViewChild.nativeElement.scrollLeft) + 'px';\n\n        this.resizeHelperViewChild.nativeElement.style.display = 'block';\n    }\n\n    onColumnResizeEnd(event, column) {\n        let delta = this.resizeHelperViewChild.nativeElement.offsetLeft - this.lastResizerHelperX;\n        let columnWidth = column.offsetWidth;\n        let minWidth = parseInt(column.style.minWidth || 15);\n\n        if (columnWidth + delta < minWidth) {\n            delta = minWidth - columnWidth;\n        }\n\n        const newColumnWidth = columnWidth + delta;\n\n        if (newColumnWidth >= minWidth) {\n            if (this.columnResizeMode === 'fit') {\n                let nextColumn = column.nextElementSibling;\n                while (!nextColumn.offsetParent) {\n                    nextColumn = nextColumn.nextElementSibling;\n                }\n\n                if (nextColumn) {\n                    let nextColumnWidth = nextColumn.offsetWidth - delta;\n                    let nextColumnMinWidth = nextColumn.style.minWidth || 15;\n\n                    if (newColumnWidth > 15 && nextColumnWidth > parseInt(nextColumnMinWidth)) {\n                        if (this.scrollable) {\n                            let scrollableView = this.findParentScrollableView(column);\n                            let scrollableBodyTable = DomHandler.findSingle(scrollableView, '.ui-table-scrollable-body table');\n                            let scrollableHeaderTable = DomHandler.findSingle(scrollableView, 'table.ui-table-scrollable-header-table');\n                            let scrollableFooterTable = DomHandler.findSingle(scrollableView, 'table.ui-table-scrollable-footer-table');\n                            let resizeColumnIndex = DomHandler.index(column);\n\n                            this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                            this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                            this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                        }\n                        else {\n                            column.style.width = newColumnWidth + 'px';\n                            if (nextColumn) {\n                                nextColumn.style.width = nextColumnWidth + 'px';\n                            }\n                        }\n                    }\n                }\n            }\n            else if (this.columnResizeMode === 'expand') {\n                if (newColumnWidth > minWidth) {\n                    if (this.scrollable) {\n                        this.setScrollableItemsWidthOnExpandResize(column, newColumnWidth, delta);\n                    }\n                    else {\n                        this.tableViewChild.nativeElement.style.width = this.tableViewChild.nativeElement.offsetWidth + delta + 'px';\n                        column.style.width = newColumnWidth + 'px';\n                        let containerWidth = this.tableViewChild.nativeElement.style.width;\n                        this.containerViewChild.nativeElement.style.width = containerWidth + 'px';\n                    }\n                }\n            }\n\n            this.onColResize.emit({\n                element: column,\n                delta: delta\n            });\n\n            if (this.isStateful()) {\n                this.saveState();\n            }\n        }\n\n        this.resizeHelperViewChild.nativeElement.style.display = 'none';\n        DomHandler.removeClass(this.containerViewChild.nativeElement, 'ui-unselectable-text');\n    }\n\n    setScrollableItemsWidthOnExpandResize(column, newColumnWidth, delta) {\n        let scrollableView = column ? this.findParentScrollableView(column) : this.containerViewChild.nativeElement;\n        let scrollableBody = DomHandler.findSingle(scrollableView, '.ui-table-scrollable-body');\n        let scrollableHeader = DomHandler.findSingle(scrollableView, '.ui-table-scrollable-header');\n        let scrollableFooter = DomHandler.findSingle(scrollableView, '.ui-table-scrollable-footer');\n        let scrollableBodyTable = DomHandler.findSingle(scrollableBody, '.ui-table-scrollable-body table');\n        let scrollableHeaderTable = DomHandler.findSingle(scrollableHeader, 'table.ui-table-scrollable-header-table');\n        let scrollableFooterTable = DomHandler.findSingle(scrollableFooter, 'table.ui-table-scrollable-footer-table');\n\n        const scrollableBodyTableWidth = column ? scrollableBodyTable.offsetWidth + delta : newColumnWidth;\n        const scrollableHeaderTableWidth = column ? scrollableHeaderTable.offsetWidth + delta : newColumnWidth;\n        const isContainerInViewport = this.containerViewChild.nativeElement.offsetWidth >= scrollableBodyTableWidth;\n\n        let setWidth = (container, table, width, isContainerInViewport) => {\n            if (container && table) {\n                container.style.width = isContainerInViewport ? width + DomHandler.calculateScrollbarWidth(scrollableBody) + 'px' : 'auto'\n                table.style.width = width + 'px';\n            }\n        };\n\n        setWidth(scrollableBody, scrollableBodyTable, scrollableBodyTableWidth, isContainerInViewport);\n        setWidth(scrollableHeader, scrollableHeaderTable, scrollableHeaderTableWidth, isContainerInViewport);\n        setWidth(scrollableFooter, scrollableFooterTable, scrollableHeaderTableWidth, isContainerInViewport);\n\n        if (column) {\n            let resizeColumnIndex = DomHandler.index(column);\n\n            this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, null);\n            this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, null);\n            this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, null);\n        }\n    }\n\n    findParentScrollableView(column) {\n        if (column) {\n            let parent = column.parentElement;\n            while (parent && !DomHandler.hasClass(parent, 'ui-table-scrollable-view')) {\n                parent = parent.parentElement;\n            }\n\n            return parent;\n        }\n        else {\n            return null;\n        }\n    }\n\n    resizeColGroup(table, resizeColumnIndex, newColumnWidth, nextColumnWidth) {\n        if (table) {\n            let colGroup = table.children[0].nodeName === 'COLGROUP' ? table.children[0] : null;\n\n            if (colGroup) {\n                let col = colGroup.children[resizeColumnIndex];\n                let nextCol = col.nextElementSibling;\n                col.style.width = newColumnWidth + 'px';\n\n                if (nextCol && nextColumnWidth) {\n                    nextCol.style.width = nextColumnWidth + 'px';\n                }\n            }\n            else {\n                throw \"Scrollable tables require a colgroup to support resizable columns\";\n            }\n        }\n    }\n\n    onColumnDragStart(event, columnElement) {\n        this.reorderIconWidth = DomHandler.getHiddenElementOuterWidth(this.reorderIndicatorUpViewChild.nativeElement);\n        this.reorderIconHeight = DomHandler.getHiddenElementOuterHeight(this.reorderIndicatorDownViewChild.nativeElement);\n        this.draggedColumn = columnElement;\n        event.dataTransfer.setData('text', 'b');    // For firefox\n    }\n\n    onColumnDragEnter(event, dropHeader) {\n        if (this.reorderableColumns && this.draggedColumn && dropHeader) {\n            event.preventDefault();\n            let containerOffset = DomHandler.getOffset(this.containerViewChild.nativeElement);\n            let dropHeaderOffset = DomHandler.getOffset(dropHeader);\n\n            if (this.draggedColumn != dropHeader) {\n                let dragIndex = DomHandler.indexWithinGroup(this.draggedColumn, 'preorderablecolumn');\n                let dropIndex = DomHandler.indexWithinGroup(dropHeader, 'preorderablecolumn');\n                let targetLeft = dropHeaderOffset.left - containerOffset.left;\n                let targetTop = containerOffset.top - dropHeaderOffset.top;\n                let columnCenter = dropHeaderOffset.left + dropHeader.offsetWidth / 2;\n\n                this.reorderIndicatorUpViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top - (this.reorderIconHeight - 1) + 'px';\n                this.reorderIndicatorDownViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top + dropHeader.offsetHeight + 'px';\n\n                if (event.pageX > columnCenter) {\n                    this.reorderIndicatorUpViewChild.nativeElement.style.left = (targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.reorderIndicatorDownViewChild.nativeElement.style.left = (targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.dropPosition = 1;\n                }\n                else {\n                    this.reorderIndicatorUpViewChild.nativeElement.style.left = (targetLeft - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.reorderIndicatorDownViewChild.nativeElement.style.left = (targetLeft - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.dropPosition = -1;\n                }\n\n                if ((dropIndex - dragIndex === 1 && this.dropPosition === -1) || (dropIndex - dragIndex === -1 && this.dropPosition === 1)) {\n                    this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n                    this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n                }\n                else {\n                    this.reorderIndicatorUpViewChild.nativeElement.style.display = 'block';\n                    this.reorderIndicatorDownViewChild.nativeElement.style.display = 'block';\n                }\n            }\n            else {\n                event.dataTransfer.dropEffect = 'none';\n            }\n        }\n    }\n\n    onColumnDragLeave(event) {\n        if (this.reorderableColumns && this.draggedColumn) {\n            event.preventDefault();\n            this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n            this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n        }\n    }\n\n    onColumnDrop(event, dropColumn) {\n        event.preventDefault();\n        if (this.draggedColumn) {\n            let dragIndex = DomHandler.indexWithinGroup(this.draggedColumn, 'preorderablecolumn');\n            let dropIndex = DomHandler.indexWithinGroup(dropColumn, 'preorderablecolumn');\n            let allowDrop = (dragIndex != dropIndex);\n            if (allowDrop && ((dropIndex - dragIndex == 1 && this.dropPosition === -1) || (dragIndex - dropIndex == 1 && this.dropPosition === 1))) {\n                allowDrop = false;\n            }\n\n            if (allowDrop && ((dropIndex < dragIndex && this.dropPosition === 1))) {\n                dropIndex = dropIndex + 1;\n            }\n\n            if (allowDrop && ((dropIndex > dragIndex && this.dropPosition === -1))) {\n                dropIndex = dropIndex - 1;\n            }\n\n            if (allowDrop) {\n                ObjectUtils.reorderArray(this.columns, dragIndex, dropIndex);\n\n                this.onColReorder.emit({\n                    dragIndex: dragIndex,\n                    dropIndex: dropIndex,\n                    columns: this.columns\n                });\n\n                if (this.isStateful()) {\n                    this.zone.runOutsideAngular(() => {\n                        setTimeout(() => {\n                            this.saveState();\n                        });\n                    });\n                }\n            }\n\n            this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n            this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n            this.draggedColumn.draggable = false;\n            this.draggedColumn = null;\n            this.dropPosition = null;\n        }\n    }\n\n    onRowDragStart(event, index) {\n        this.rowDragging = true;\n        this.draggedRowIndex = index;\n        event.dataTransfer.setData('text', 'b');    // For firefox\n    }\n\n    onRowDragOver(event, index, rowElement) {\n        if (this.rowDragging && this.draggedRowIndex !== index) {\n            let rowY = DomHandler.getOffset(rowElement).top + DomHandler.getWindowScrollTop();\n            let pageY = event.pageY;\n            let rowMidY = rowY + DomHandler.getOuterHeight(rowElement) / 2;\n            let prevRowElement = rowElement.previousElementSibling;\n\n            if (pageY < rowMidY) {\n                DomHandler.removeClass(rowElement, 'ui-table-dragpoint-bottom');\n\n                this.droppedRowIndex = index;\n                if (prevRowElement)\n                    DomHandler.addClass(prevRowElement, 'ui-table-dragpoint-bottom');\n                else\n                    DomHandler.addClass(rowElement, 'ui-table-dragpoint-top');\n            }\n            else {\n                if (prevRowElement)\n                    DomHandler.removeClass(prevRowElement, 'ui-table-dragpoint-bottom');\n                else\n                    DomHandler.addClass(rowElement, 'ui-table-dragpoint-top');\n\n                this.droppedRowIndex = index + 1;\n                DomHandler.addClass(rowElement, 'ui-table-dragpoint-bottom');\n            }\n        }\n    }\n\n    onRowDragLeave(event, rowElement) {\n        let prevRowElement = rowElement.previousElementSibling;\n        if (prevRowElement) {\n            DomHandler.removeClass(prevRowElement, 'ui-table-dragpoint-bottom');\n        }\n\n        DomHandler.removeClass(rowElement, 'ui-table-dragpoint-bottom');\n        DomHandler.removeClass(rowElement, 'ui-table-dragpoint-top');\n    }\n\n    onRowDragEnd(event) {\n        this.rowDragging = false;\n        this.draggedRowIndex = null;\n        this.droppedRowIndex = null;\n    }\n\n    onRowDrop(event, rowElement) {\n        if (this.droppedRowIndex != null) {\n            let dropIndex = (this.draggedRowIndex > this.droppedRowIndex) ? this.droppedRowIndex : (this.droppedRowIndex === 0) ? 0 : this.droppedRowIndex - 1;\n            ObjectUtils.reorderArray(this.value, this.draggedRowIndex, dropIndex);\n\n            this.onRowReorder.emit({\n                dragIndex: this.draggedRowIndex,\n                dropIndex: dropIndex\n            });\n        }\n        //cleanup\n        this.onRowDragLeave(event, rowElement);\n        this.onRowDragEnd(event);\n    }\n\n    isEmpty() {\n        let data = this.filteredValue||this.value;\n        return data == null || data.length == 0;\n    }\n\n    getBlockableElement(): HTMLElementÂ {\n        return this.el.nativeElement.children[0];\n    }\n\n    getStorage() {\n        switch(this.stateStorage) {\n            case 'local':\n                return window.localStorage;\n\n            case 'session':\n                return window.sessionStorage;\n\n            default:\n                throw new Error(this.stateStorage + ' is not a valid value for the state storage, supported values are \"local\" and \"session\".');\n        }\n    }\n\n    isStateful() {\n        return this.stateKey != null;\n    }\n\n    saveState() {\n        const storage = this.getStorage();\n        let state: TableState = {};\n\n        if (this.paginator) {\n            state.first = this.first;\n            state.rows = this.rows;\n        }\n\n        if (this.sortField) {\n            state.sortField = this.sortField;\n            state.sortOrder = this.sortOrder;\n        }\n\n        if (this.multiSortMeta) {\n            state.multiSortMeta = this.multiSortMeta;\n        }\n\n        if (this.hasFilter()) {\n            state.filters = this.filters;\n        }\n\n        if (this.resizableColumns) {\n            this.saveColumnWidths(state);\n        }\n\n        if (this.reorderableColumns) {\n            this.saveColumnOrder(state);\n        }\n\n        if (this.selection) {\n            state.selection = this.selection;\n        }\n\n        if (Object.keys(this.expandedRowKeys).length) {\n            state.expandedRowKeys = this.expandedRowKeys;\n        }\n\n        if (Object.keys(state).length) {\n            storage.setItem(this.stateKey, JSON.stringify(state));\n        }\n\n        this.onStateSave.emit(state);\n    }\n\n    clearState() {\n        const storage = this.getStorage();\n\n        if (this.stateKey) {\n            storage.removeItem(this.stateKey);\n        }\n    }\n\n    restoreState() {\n        const storage = this.getStorage();\n        const stateString = storage.getItem(this.stateKey);\n\n        if (stateString) {\n            let state: TableState = JSON.parse(stateString);\n\n            if (this.paginator) {\n                this.first = state.first;\n                this.rows = state.rows;\n                this.firstChange.emit(this.first);\n                this.rowsChange.emit(this.rows);\n            }\n\n            if (state.sortField) {\n                this.restoringSort = true;\n                this._sortField = state.sortField;\n                this._sortOrder = state.sortOrder;\n            }\n\n            if (state.multiSortMeta) {\n                this.restoringSort = true;\n                this._multiSortMeta = state.multiSortMeta;\n            }\n\n            if (state.filters) {\n                this.restoringFilter = true;\n                this.filters = state.filters;\n            }\n\n            if (this.resizableColumns) {\n                this.columnWidthsState = state.columnWidths;\n                this.tableWidthState = state.tableWidth;\n            }\n\n            if (state.expandedRowKeys) {\n                this.expandedRowKeys = state.expandedRowKeys;\n            }\n\n            if (state.selection) {\n                Promise.resolve(null).then(() => this.selectionChange.emit(state.selection));\n            }\n\n            this.stateRestored = true;\n\n            this.onStateRestore.emit(state);\n        }\n    }\n\n    saveColumnWidths(state) {\n        let widths = [];\n        let headers = DomHandler.find(this.containerViewChild.nativeElement, '.ui-table-thead > tr:first-child > th');\n        headers.map(header => widths.push(DomHandler.getOuterWidth(header)));\n        state.columnWidths = widths.join(',');\n\n        if (this.columnResizeMode === 'expand') {\n            state.tableWidth = this.scrollable ? DomHandler.findSingle(this.containerViewChild.nativeElement, '.ui-table-scrollable-header-table').style.width :\n                                                DomHandler.getOuterWidth(this.tableViewChild.nativeElement) + 'px';\n        }\n    }\n\n    restoreColumnWidths() {\n        if (this.columnWidthsState) {\n            let widths = this.columnWidthsState.split(',');\n\n            if (this.columnResizeMode === 'expand' && this.tableWidthState) {\n                if (this.scrollable) {\n                    this.setScrollableItemsWidthOnExpandResize(null, this.tableWidthState, 0);\n                }\n                else {\n                    this.tableViewChild.nativeElement.style.width = this.tableWidthState;\n                    this.containerViewChild.nativeElement.style.width = this.tableWidthState;\n                }\n            }\n\n            if (this.scrollable) {\n                let headerCols = DomHandler.find(this.containerViewChild.nativeElement, '.ui-table-scrollable-header-table > colgroup > col');\n                let bodyCols = DomHandler.find(this.containerViewChild.nativeElement, '.ui-table-scrollable-body table > colgroup > col');\n\n                headerCols.map((col, index) => col.style.width = widths[index] + 'px');\n                bodyCols.map((col, index) => col.style.width = widths[index] + 'px');\n            }\n            else {\n                let headers = DomHandler.find(this.tableViewChild.nativeElement, '.ui-table-thead > tr:first-child > th');\n                headers.map((header, index) => header.style.width = widths[index] + 'px');\n            }\n        }\n    }\n\n    saveColumnOrder(state) {\n        if (this.columns) {\n            let columnOrder: string[] = [];\n            this.columns.map(column => {\n                columnOrder.push(column.field||column.key)\n            });\n\n            state.columnOrder = columnOrder;\n        }\n    }\n\n    restoreColumnOrder() {\n        const storage = this.getStorage();\n        const stateString = storage.getItem(this.stateKey);\n        if (stateString) {\n            let state: TableState = JSON.parse(stateString);\n            let columnOrder = state.columnOrder;\n            if (columnOrder) {\n                let reorderedColumns = [];\n                columnOrder.map(key => reorderedColumns.push(this.findColumnByKey(key)));\n                this.columnOrderStateRestored = true;\n                this.columns = reorderedColumns;\n            }\n        }\n    }\n\n    findColumnByKey(key) {\n        if (this.columns) {\n            for (let col of this.columns) {\n                if (col.key === key || col.field === key)\n                    return col;\n                else\n                    continue;\n            }\n        }\n        else {\n            return null;\n        }\n    }\n\n    ngOnDestroy() {\n        this.unbindDocumentEditListener();\n        this.editingCell = null;\n        this.initialized = null;\n    }\n}\n\n@Component({\n    selector: '[pTableBody]',\n    template: `\n        <ng-container *ngIf=\"!dt.expandedRowTemplate && !dt.virtualScroll\">\n            <ng-template ngFor let-rowData let-rowIndex=\"index\" [ngForOf]=\"(dt.paginator && !dt.lazy) ? ((dt.filteredValue||dt.value) | slice:dt.first:(dt.first + dt.rows)) : (dt.filteredValue||dt.value)\" [ngForTrackBy]=\"dt.rowTrackBy\">\n                <ng-container *ngTemplateOutlet=\"template; context: {$implicit: rowData, rowIndex: dt.paginator ? (dt.first + rowIndex) : rowIndex, columns: columns, editing: (dt.editMode === 'row' && dt.isRowEditing(rowData))}\"></ng-container>\n            </ng-template>\n        </ng-container>\n        <ng-container *ngIf=\"!dt.expandedRowTemplate && dt.virtualScroll\">\n            <ng-template cdkVirtualFor let-rowData let-rowIndex=\"index\" [cdkVirtualForOf]=\"dt.value\" [cdkVirtualForTrackBy]=\"dt.rowTrackBy\">\n                <ng-container *ngTemplateOutlet=\"rowData ? template: dt.loadingBodyTemplate; context: {$implicit: rowData, rowIndex: dt.paginator ? (dt.first + rowIndex) : rowIndex, columns: columns, editing: (dt.editMode === 'row' && dt.isRowEditing(rowData))}\"></ng-container>\n            </ng-template>\n        </ng-container>\n        <ng-container *ngIf=\"dt.expandedRowTemplate\">\n            <ng-template ngFor let-rowData let-rowIndex=\"index\" [ngForOf]=\"(dt.paginator && !dt.lazy) ? ((dt.filteredValue||dt.value) | slice:dt.first:(dt.first + dt.rows)) : (dt.filteredValue||dt.value)\" [ngForTrackBy]=\"dt.rowTrackBy\">\n                <ng-container *ngTemplateOutlet=\"template; context: {$implicit: rowData, rowIndex: dt.paginator ? (dt.first + rowIndex) : rowIndex, columns: columns, expanded: dt.isRowExpanded(rowData), editing: (dt.editMode === 'row' && dt.isRowEditing(rowData))}\"></ng-container>\n                <ng-container *ngIf=\"dt.isRowExpanded(rowData)\">\n                    <ng-container *ngTemplateOutlet=\"dt.expandedRowTemplate; context: {$implicit: rowData, rowIndex: dt.paginator ? (dt.first + rowIndex) : rowIndex, columns: columns}\"></ng-container>\n                </ng-container>\n            </ng-template>\n        </ng-container>\n        <ng-container *ngIf=\"dt.loading\">\n            <ng-container *ngTemplateOutlet=\"dt.loadingBodyTemplate; context: {$implicit: columns, frozen: frozen}\"></ng-container>\n        </ng-container>\n        <ng-container *ngIf=\"dt.isEmpty() && !dt.loading\">\n            <ng-container *ngTemplateOutlet=\"dt.emptyMessageTemplate; context: {$implicit: columns, frozen: frozen}\"></ng-container>\n        </ng-container>\n    `\n})\nexport class TableBody {\n\n    @Input(\"pTableBody\") columns: any[];\n\n    @Input(\"pTableBodyTemplate\") template: TemplateRef<any>;\n\n    @Input() frozen: boolean;\n\n    constructor(public dt: Table) {}\n}\n\n@Component({\n    selector: '[pScrollableView]',\n    template: `\n        <div #scrollHeader class=\"ui-table-scrollable-header ui-widget-header\">\n            <div #scrollHeaderBox class=\"ui-table-scrollable-header-box\">\n                <table class=\"ui-table-scrollable-header-table\" [ngClass]=\"dt.tableStyleClass\" [ngStyle]=\"dt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? dt.frozenColGroupTemplate||dt.colGroupTemplate : dt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <thead class=\"ui-table-thead\">\n                        <ng-container *ngTemplateOutlet=\"frozen ? dt.frozenHeaderTemplate||dt.headerTemplate : dt.headerTemplate; context {$implicit: columns}\"></ng-container>\n                    </thead>\n                    <tbody class=\"ui-table-tbody\">\n                        <ng-template ngFor let-rowData let-rowIndex=\"index\" [ngForOf]=\"dt.frozenValue\" [ngForTrackBy]=\"dt.rowTrackBy\">\n                            <ng-container *ngTemplateOutlet=\"dt.frozenRowsTemplate; context: {$implicit: rowData, rowIndex: rowIndex, columns: columns}\"></ng-container>\n                        </ng-template>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n        <ng-container *ngIf=\"!dt.virtualScroll; else virtualScrollTemplate\">\n            <div #scrollBody class=\"ui-table-scrollable-body\" [ngStyle]=\"{'max-height': dt.scrollHeight !== 'flex' ? scrollHeight : undefined}\">\n                <table #scrollTable [class]=\"dt.tableStyleClass\" [ngStyle]=\"dt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? dt.frozenColGroupTemplate||dt.colGroupTemplate : dt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <tbody class=\"ui-table-tbody\" [pTableBody]=\"columns\" [pTableBodyTemplate]=\"frozen ? dt.frozenBodyTemplate||dt.bodyTemplate : dt.bodyTemplate\" [frozen]=\"frozen\"></tbody>\n                </table>\n                <div #scrollableAligner style=\"background-color:transparent\" *ngIf=\"frozen\"></div>\n            </div>\n        </ng-container>\n        <ng-template #virtualScrollTemplate>\n            <cdk-virtual-scroll-viewport [itemSize]=\"dt.virtualRowHeight\" [style.height]=\"dt.scrollHeight !== 'flex' ? scrollHeight : undefined\" \n                    [minBufferPx]=\"dt.minBufferPx\" [maxBufferPx]=\"dt.maxBufferPx\" (scrolledIndexChange)=\"onScrollIndexChange($event)\" class=\"ui-table-virtual-scrollable-body\">\n                <table #scrollTable [class]=\"dt.tableStyleClass\" [ngStyle]=\"dt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? dt.frozenColGroupTemplate||dt.colGroupTemplate : dt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <tbody class=\"ui-table-tbody\" [pTableBody]=\"columns\" [pTableBodyTemplate]=\"frozen ? dt.frozenBodyTemplate||dt.bodyTemplate : dt.bodyTemplate\" [frozen]=\"frozen\"></tbody>\n                </table>\n                <div #scrollableAligner style=\"background-color:transparent\" *ngIf=\"frozen\"></div>\n            </cdk-virtual-scroll-viewport>\n        </ng-template>\n        <div #scrollFooter class=\"ui-table-scrollable-footer ui-widget-header\">\n            <div #scrollFooterBox class=\"ui-table-scrollable-footer-box\">\n                <table class=\"ui-table-scrollable-footer-table\" [ngClass]=\"dt.tableStyleClass\" [ngStyle]=\"dt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? dt.frozenColGroupTemplate||dt.colGroupTemplate : dt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <tfoot class=\"ui-table-tfoot\">\n                        <ng-container *ngTemplateOutlet=\"frozen ? dt.frozenFooterTemplate||dt.footerTemplate : dt.footerTemplate; context {$implicit: columns}\"></ng-container>\n                    </tfoot>\n                </table>\n            </div>\n        </div>\n    `\n})\nexport class ScrollableView implements AfterViewInit,OnDestroy,AfterViewChecked {\n\n    @Input(\"pScrollableView\") columns: any[];\n\n    @Input() frozen: boolean;\n\n    @ViewChild('scrollHeader') scrollHeaderViewChild: ElementRef;\n\n    @ViewChild('scrollHeaderBox') scrollHeaderBoxViewChild: ElementRef;\n\n    @ViewChild('scrollBody') scrollBodyViewChild: ElementRef;\n\n    @ViewChild('scrollTable') scrollTableViewChild: ElementRef;\n\n    @ViewChild('scrollFooter') scrollFooterViewChild: ElementRef;\n\n    @ViewChild('scrollFooterBox') scrollFooterBoxViewChild: ElementRef;\n\n    @ViewChild('scrollableAligner') scrollableAlignerViewChild: ElementRef;\n\n    @ViewChild(CdkVirtualScrollViewport) virtualScrollBody: CdkVirtualScrollViewport;\n\n    headerScrollListener: any;\n\n    bodyScrollListener: any;\n\n    footerScrollListener: any;\n\n    frozenSiblingBody: HTMLDivElement;\n\n    subscription: Subscription;\n\n    initialized: boolean;\n\n    preventBodyScrollPropagation: boolean;\n\n    loadedPages: number[] = [];\n\n    _scrollHeight: string;\n\n    @Input() get scrollHeight(): string {\n        return this._scrollHeight;\n    }\n    set scrollHeight(val: string) {\n        this._scrollHeight = val;\n        if (val != null && (val.includes('%') || val.includes('calc'))) {\n            console.log('Percentage scroll height calculation is removed in favor of the more performant CSS based flex mode, use scrollHeight=\"flex\" instead.')\n        }\n    }\n\n    constructor(public dt: Table, public el: ElementRef, public zone: NgZone) {\n        this.subscription = this.dt.tableService.valueSource$.subscribe(() => {\n            this.zone.runOutsideAngular(() => {\n                setTimeout(() => {\n                    this.alignScrollBar();\n                }, 50);\n            });\n        });\n\n        this.initialized = false;\n     }\n\n    ngAfterViewChecked() {\n        if (!this.initialized && this.el.nativeElement.offsetParent) {\n            this.alignScrollBar();\n            this.initialized = true;\n        }\n    }\n\n    ngAfterViewInit() {\n        if (!this.frozen) {\n            if (this.dt.frozenColumns || this.dt.frozenBodyTemplate) {\n                DomHandler.addClass(this.el.nativeElement, 'ui-table-unfrozen-view');\n            }\n\n            let frozenView = this.el.nativeElement.previousElementSibling;\n            if (frozenView) {\n                if (this.dt.virtualScroll)\n                    this.frozenSiblingBody = DomHandler.findSingle(frozenView, '.ui-table-virtual-scrollable-body');\n                else\n                    this.frozenSiblingBody = DomHandler.findSingle(frozenView, '.ui-table-scrollable-body');\n            }\n        }\n        else {\n            if (this.scrollableAlignerViewChild && this.scrollableAlignerViewChild.nativeElement) {\n                this.scrollableAlignerViewChild.nativeElement.style.height = DomHandler.calculateScrollbarHeight() + 'px';\n            }\n        }\n\n        this.bindEvents();\n        this.alignScrollBar();\n    }\n\n    bindEvents() {\n        this.zone.runOutsideAngular(() => {\n            if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n                this.headerScrollListener = this.onHeaderScroll.bind(this);\n                this.scrollHeaderViewChild.nativeElement.addEventListener('scroll', this.headerScrollListener);\n            }\n\n            if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n                this.footerScrollListener = this.onFooterScroll.bind(this);\n                this.scrollFooterViewChild.nativeElement.addEventListener('scroll', this.footerScrollListener);\n            }\n\n            if (!this.frozen) {\n                this.bodyScrollListener = this.onBodyScroll.bind(this);\n\n                if (this.dt.virtualScroll)\n                    this.virtualScrollBody.getElementRef().nativeElement.addEventListener('scroll', this.bodyScrollListener);\n                else\n                    this.scrollBodyViewChild.nativeElement.addEventListener('scroll', this.bodyScrollListener);\n            }\n        });\n    }\n\n    unbindEvents() {\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n            this.scrollHeaderViewChild.nativeElement.removeEventListener('scroll', this.headerScrollListener);\n        }\n\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n            this.scrollFooterViewChild.nativeElement.removeEventListener('scroll', this.footerScrollListener);\n        }\n\n        if (this.scrollBodyViewChild && this.scrollBodyViewChild.nativeElement) {\n            this.scrollBodyViewChild.nativeElement.removeEventListener('scroll', this.bodyScrollListener);\n        }\n\n        if (this.virtualScrollBody && this.virtualScrollBody.getElementRef()) {\n            this.virtualScrollBody.getElementRef().nativeElement.removeEventListener('scroll', this.bodyScrollListener);\n        }\n    }\n\n    onHeaderScroll() {\n        const scrollLeft = this.scrollHeaderViewChild.nativeElement.scrollLeft;\n\n        this.scrollBodyViewChild.nativeElement.scrollLeft = scrollLeft;\n\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n            this.scrollFooterViewChild.nativeElement.scrollLeft = scrollLeft;\n        }\n\n        this.preventBodyScrollPropagation = true;\n    }\n\n    onFooterScroll() {\n        const scrollLeft = this.scrollFooterViewChild.nativeElement.scrollLeft;\n        this.scrollBodyViewChild.nativeElement.scrollLeft = scrollLeft;\n\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n            this.scrollHeaderViewChild.nativeElement.scrollLeft = scrollLeft;\n        }\n\n        this.preventBodyScrollPropagation = true;\n    }\n\n    onBodyScroll(event) {\n        if (this.preventBodyScrollPropagation) {\n            this.preventBodyScrollPropagation = false;\n            return;\n        }\n\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n            this.scrollHeaderBoxViewChild.nativeElement.style.marginLeft = -1 * event.target.scrollLeft + 'px';\n        }\n\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n            this.scrollFooterBoxViewChild.nativeElement.style.marginLeft = -1 * event.target.scrollLeft + 'px';\n        }\n\n        if (this.frozenSiblingBody) {\n            this.frozenSiblingBody.scrollTop = event.target.scrollTop;\n        }\n    }\n\n    onScrollIndexChange(index: number) {\n        if (this.dt.lazy) {\n            let pageRange = this.createPageRange(Math.floor(index / this.dt.rows));\n            pageRange.forEach(page => this.loadPage(page));\n        }\n    }\n\n    createPageRange(page: number) {\n        let range: number[] = [];\n\n        if (page !== 0) {\n            range.push(page - 1);\n        }\n        range.push(page);\n        if (page !== (this.getPageCount() - 1)) {\n            range.push(page + 1);\n        }\n\n        return range;\n    }\n\n    loadPage(page: number) {\n        if (!this.loadedPages.includes(page)) {\n            this.dt.onLazyLoad.emit({\n                first: this.dt.rows * page, \n                rows: this.dt.rows,\n                sortField: this.dt.sortField,\n                sortOrder: this.dt.sortOrder,\n                filters: this.dt.filters,\n                globalFilter: this.dt.filters && this.dt.filters['global'] ? this.dt.filters['global'].value : null,\n                multiSortMeta: this.dt.multiSortMeta\n            });\n            this.loadedPages.push(page);\n        }\n    }\n\n    clearCache() {\n        this.loadedPages = [];\n    }\n\n    getPageCount() {\n        let dataToRender = this.dt.filteredValue || this.dt.value;\n        let dataLength = dataToRender ? dataToRender.length: 0;\n        return Math.ceil(dataLength / this.dt.rows);\n    }\n\n    scrollToVirtualIndex(index: number): void {\n        if (this.virtualScrollBody) {\n            this.virtualScrollBody.scrollToIndex(index);\n        }\n    }\n\n    scrollTo(options): void {\n        if (this.virtualScrollBody) {\n            this.virtualScrollBody.scrollTo(options);\n        }\n        else {\n            if (this.scrollBodyViewChild.nativeElement.scrollTo) {\n                this.scrollBodyViewChild.nativeElement.scrollTo(options);\n            }\n            else {\n                this.scrollBodyViewChild.nativeElement.scrollLeft = options.left;\n                this.scrollBodyViewChild.nativeElement.scrollTop = options.top;\n            }\n        }\n    }\n\n    hasVerticalOverflow() {\n        if (this.dt.virtualScroll)\n            return (this.virtualScrollBody.getDataLength() * this.dt.virtualRowHeight) > this.virtualScrollBody.getViewportSize();\n        else\n            return DomHandler.getOuterHeight(this.scrollTableViewChild.nativeElement) > DomHandler.getOuterHeight(this.scrollBodyViewChild.nativeElement);\n    }\n\n    alignScrollBar() {\n        if (!this.frozen) {\n            let scrollBarWidth = this.hasVerticalOverflow() ? DomHandler.calculateScrollbarWidth() : 0;\n            this.scrollHeaderBoxViewChild.nativeElement.style.paddingRight = scrollBarWidth + 'px';\n\n            if (this.scrollFooterBoxViewChild && this.scrollFooterBoxViewChild.nativeElement) {\n                this.scrollFooterBoxViewChild.nativeElement.style.paddingRight = scrollBarWidth + 'px';\n            }\n        }\n        this.initialized = false;\n    }\n\n    ngOnDestroy() {\n        this.unbindEvents();\n\n        this.frozenSiblingBody = null;\n\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n\n        this.initialized = false;\n    }\n}\n\n@Directive({\n    selector: '[pSortableColumn]',\n    host: {\n        '[class.ui-sortable-column]': 'isEnabled()',\n        '[class.ui-state-highlight]': 'sorted',\n        '[attr.tabindex]': 'isEnabled() ? \"0\" : null',\n        '[attr.role]': '\"columnheader\"',\n        '[attr.aria-sort]': 'sortOrder'\n    }\n})\nexport class SortableColumn implements OnInit, OnDestroy {\n\n    @Input(\"pSortableColumn\") field: string;\n\n    @Input() pSortableColumnDisabled: boolean;\n\n    sorted: boolean;\n\n    sortOrder: string;\n\n    subscription: Subscription;\n\n    constructor(public dt: Table) {\n        if (this.isEnabled()) {\n            this.subscription = this.dt.tableService.sortSource$.subscribe(sortMeta => {\n                this.updateSortState();\n            });\n        }\n    }\n\n    ngOnInit() {\n        if (this.isEnabled()) {\n            this.updateSortState();\n        }\n    }\n\n    updateSortState() {\n        this.sorted = this.dt.isSorted(this.field);\n        this.sortOrder = this.sorted ? (this.dt.sortOrder === 1 ? 'ascending' : 'descending') : 'none';\n    }\n\n    @HostListener('click', ['$event'])\n    onClick(event: MouseEvent) {\n        if (this.isEnabled()) {\n            this.updateSortState();\n            this.dt.sort({\n                originalEvent: event,\n                field: this.field\n            });\n\n            DomHandler.clearSelection();\n        }\n    }\n\n    @HostListener('keydown.enter', ['$event'])\n    onEnterKey(event: MouseEvent) {\n        this.onClick(event);\n    }\n\n    isEnabled() {\n        return this.pSortableColumnDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n}\n\n\n@Component({\n    selector: 'p-sortIcon',\n    template: `\n        <i class=\"ui-sortable-column-icon pi pi-fw\" [ngClass]=\"{'pi-sort-amount-up-alt': sortOrder === 1, 'pi-sort-amount-down': sortOrder === -1, 'pi-sort-alt': sortOrder === 0}\"></i>\n    `\n})\nexport class SortIcon implements OnInit, OnDestroy {\n\n    @Input() field: string;\n\n    subscription: Subscription;\n\n    sortOrder: number;\n\n    constructor(public dt: Table) {\n        this.subscription = this.dt.tableService.sortSource$.subscribe(sortMeta => {\n            this.updateSortState();\n        });\n    }\n\n    ngOnInit() {\n        this.updateSortState();\n    }\n\n    onClick(event){\n        event.preventDefault();\n    }\n\n    updateSortState() {\n        if (this.dt.sortMode === 'single') {\n            this.sortOrder = this.dt.isSorted(this.field) ? this.dt.sortOrder : 0;\n        }\n        else if (this.dt.sortMode === 'multiple') {\n            let sortMeta = this.dt.getSortMeta(this.field);\n            this.sortOrder = sortMeta ? sortMeta.order: 0;\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n}\n\n@Directive({\n    selector: '[pSelectableRow]',\n    host: {\n        '[class.ui-selectable-row]': 'isEnabled()',\n        '[class.ui-state-highlight]': 'selected',\n        '[attr.tabindex]': 'isEnabled() ? 0 : undefined'\n    }\n})\nexport class SelectableRow implements OnInit, OnDestroy {\n\n    @Input(\"pSelectableRow\") data: any;\n\n    @Input(\"pSelectableRowIndex\") index: number;\n\n    @Input() pSelectableRowDisabled: boolean;\n\n    selected: boolean;\n\n    subscription: Subscription;\n\n    constructor(public dt: Table, public tableService: TableService) {\n        if (this.isEnabled()) {\n            this.subscription = this.dt.tableService.selectionSource$.subscribe(() => {\n                this.selected = this.dt.isSelected(this.data);\n            });\n        }\n    }\n\n    ngOnInit() {\n        if (this.isEnabled()) {\n            this.selected = this.dt.isSelected(this.data);\n        }\n    }\n\n    @HostListener('click', ['$event'])\n    onClick(event: Event) {\n        if (this.isEnabled()) {\n            this.dt.handleRowClick({\n                originalEvent: event,\n                rowData: this.data,\n                rowIndex: this.index\n            });\n        }\n    }\n\n    @HostListener('touchend', ['$event'])\n    onTouchEnd(event: Event) {\n        if (this.isEnabled()) {\n            this.dt.handleRowTouchEnd(event);\n        }\n    }\n\n    @HostListener('keydown.arrowdown', ['$event'])\n    onArrowDownKeyDown(event: KeyboardEvent) {\n        if (!this.isEnabled()) {\n            return;\n        }\n\n        const row = <HTMLTableRowElement>event.currentTarget;\n        const nextRow = this.findNextSelectableRow(row);\n\n        if (nextRow) {\n            nextRow.focus();\n        }\n\n        event.preventDefault();\n    }\n\n    @HostListener('keydown.arrowup', ['$event'])\n    onArrowUpKeyDown(event: KeyboardEvent) {\n        if (!this.isEnabled()) {\n            return;\n        }\n\n        const row = <HTMLTableRowElement>event.currentTarget;\n        const prevRow = this.findPrevSelectableRow(row);\n\n        if (prevRow) {\n            prevRow.focus();\n        }\n\n        event.preventDefault();\n    }\n\n    @HostListener('keydown.enter', ['$event'])\n    onEnterKeyDown(event: KeyboardEvent) {\n        if (!this.isEnabled()) {\n            return;\n        }\n\n        this.dt.handleRowClick({\n            originalEvent: event,\n            rowData: this.data,\n            rowIndex: this.index\n        });\n    }\n\n    findNextSelectableRow(row: HTMLTableRowElement): HTMLTableRowElement {\n        let nextRow = <HTMLTableRowElement> row.nextElementSibling;\n        if (nextRow) {\n            if (DomHandler.hasClass(nextRow, 'ui-selectable-row'))\n                return nextRow;\n            else\n                return this.findNextSelectableRow(nextRow);\n        }\n        else {\n            return null;\n        }\n    }\n\n    findPrevSelectableRow(row: HTMLTableRowElement): HTMLTableRowElement {\n        let prevRow = <HTMLTableRowElement> row.previousElementSibling;\n        if (prevRow) {\n            if (DomHandler.hasClass(prevRow, 'ui-selectable-row'))\n                return prevRow;\n            else\n                return this.findPrevSelectableRow(prevRow);\n        }\n        else {\n            return null;\n        }\n    }\n\n    isEnabled() {\n        return this.pSelectableRowDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n}\n\n@Directive({\n    selector: '[pSelectableRowDblClick]',\n    host: {\n        '[class.ui-selectable-row]': 'isEnabled()',\n        '[class.ui-state-highlight]': 'selected'\n    }\n})\nexport class SelectableRowDblClick implements OnInit, OnDestroy {\n\n    @Input(\"pSelectableRowDblClick\") data: any;\n\n    @Input(\"pSelectableRowIndex\") index: number;\n\n    @Input() pSelectableRowDisabled: boolean;\n\n    selected: boolean;\n\n    subscription: Subscription;\n\n    constructor(public dt: Table, public tableService: TableService) {\n        if (this.isEnabled()) {\n            this.subscription = this.dt.tableService.selectionSource$.subscribe(() => {\n                this.selected = this.dt.isSelected(this.data);\n            });\n        }\n    }\n\n    ngOnInit() {\n        if (this.isEnabled()) {\n            this.selected = this.dt.isSelected(this.data);\n        }\n    }\n\n    @HostListener('dblclick', ['$event'])\n    onClick(event: Event) {\n        if (this.isEnabled()) {\n            this.dt.handleRowClick({\n                originalEvent: event,\n                rowData: this.data,\n                rowIndex: this.index\n            });\n        }\n    }\n\n    isEnabled() {\n        return this.pSelectableRowDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n}\n\n@Directive({\n    selector: '[pContextMenuRow]',\n    host: {\n        '[class.ui-contextmenu-selected]': 'selected',\n        '[attr.tabindex]': 'isEnabled() ? 0 : undefined'\n    }\n})\nexport class ContextMenuRow {\n\n    @Input(\"pContextMenuRow\") data: any;\n\n    @Input(\"pContextMenuRowIndex\") index: number;\n\n    @Input() pContextMenuRowDisabled: boolean;\n\n    selected: boolean;\n\n    subscription: Subscription;\n\n    constructor(public dt: Table, public tableService: TableService, private el: ElementRef) {\n        if (this.isEnabled()) {\n            this.subscription = this.dt.tableService.contextMenuSource$.subscribe((data) => {\n                this.selected = this.dt.equals(this.data, data);\n            });\n        }\n    }\n\n    @HostListener('contextmenu', ['$event'])\n    onContextMenu(event: Event) {\n        if (this.isEnabled()) {\n            this.dt.handleRowRightClick({\n                originalEvent: event,\n                rowData: this.data,\n                rowIndex: this.index\n            });\n\n            this.el.nativeElement.focus();\n            event.preventDefault();\n        }\n    }\n\n    isEnabled() {\n        return this.pContextMenuRowDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n}\n\n@Directive({\n    selector: '[pRowToggler]'\n})\nexport class RowToggler {\n\n    @Input('pRowToggler') data: any;\n\n    @Input() pRowTogglerDisabled: boolean;\n\n    constructor(public dt: Table) { }\n\n    @HostListener('click', ['$event'])\n    onClick(event: Event) {\n        if (this.isEnabled()) {\n            this.dt.toggleRow(this.data, event);\n            event.preventDefault();\n        }\n    }\n\n    isEnabled() {\n        return this.pRowTogglerDisabled !== true;\n    }\n}\n\n@Directive({\n    selector: '[pResizableColumn]'\n})\nexport class ResizableColumn implements AfterViewInit, OnDestroy {\n\n    @Input() pResizableColumnDisabled: boolean;\n\n    resizer: HTMLSpanElement;\n\n    resizerMouseDownListener: any;\n\n    documentMouseMoveListener: any;\n\n    documentMouseUpListener: any;\n\n    constructor(public dt: Table, public el: ElementRef, public zone: NgZone) { }\n\n    ngAfterViewInit() {\n        if (this.isEnabled()) {\n            DomHandler.addClass(this.el.nativeElement, 'ui-resizable-column');\n            this.resizer = document.createElement('span');\n            this.resizer.className = 'ui-column-resizer ui-clickable';\n            this.el.nativeElement.appendChild(this.resizer);\n\n            this.zone.runOutsideAngular(() => {\n                this.resizerMouseDownListener = this.onMouseDown.bind(this);\n                this.resizer.addEventListener('mousedown', this.resizerMouseDownListener);\n            });\n        }\n    }\n\n    bindDocumentEvents() {\n        this.zone.runOutsideAngular(() => {\n            this.documentMouseMoveListener = this.onDocumentMouseMove.bind(this);\n            document.addEventListener('mousemove', this.documentMouseMoveListener);\n\n            this.documentMouseUpListener = this.onDocumentMouseUp.bind(this);\n            document.addEventListener('mouseup', this.documentMouseUpListener);\n        });\n    }\n\n    unbindDocumentEvents() {\n        if (this.documentMouseMoveListener) {\n            document.removeEventListener('mousemove', this.documentMouseMoveListener);\n            this.documentMouseMoveListener = null;\n        }\n\n        if (this.documentMouseUpListener) {\n            document.removeEventListener('mouseup', this.documentMouseUpListener);\n            this.documentMouseUpListener = null;\n        }\n    }\n\n    onMouseDown(event: MouseEvent) {\n        if (event.which === 1) {\n            this.dt.onColumnResizeBegin(event);\n            this.bindDocumentEvents();\n        }\n    }\n\n    onDocumentMouseMove(event: MouseEvent) {\n        this.dt.onColumnResize(event);\n    }\n\n    onDocumentMouseUp(event: MouseEvent) {\n        this.dt.onColumnResizeEnd(event, this.el.nativeElement);\n        this.unbindDocumentEvents();\n    }\n\n    isEnabled() {\n        return this.pResizableColumnDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.resizerMouseDownListener) {\n            this.resizer.removeEventListener('mousedown', this.resizerMouseDownListener);\n        }\n\n        this.unbindDocumentEvents();\n    }\n}\n\n@Directive({\n    selector: '[pReorderableColumn]'\n})\nexport class ReorderableColumn implements AfterViewInit, OnDestroy {\n\n    @Input() pReorderableColumnDisabled: boolean;\n\n    dragStartListener: any;\n\n    dragOverListener: any;\n\n    dragEnterListener: any;\n\n    dragLeaveListener: any;\n\n    mouseDownListener: any;\n\n    constructor(public dt: Table, public el: ElementRef, public zone: NgZone) { }\n\n    ngAfterViewInit() {\n        if (this.isEnabled()) {\n            this.bindEvents();\n        }\n    }\n\n    bindEvents() {\n        this.zone.runOutsideAngular(() => {\n            this.mouseDownListener = this.onMouseDown.bind(this);\n            this.el.nativeElement.addEventListener('mousedown', this.mouseDownListener);\n\n            this.dragStartListener = this.onDragStart.bind(this);\n            this.el.nativeElement.addEventListener('dragstart', this.dragStartListener);\n\n            this.dragOverListener = this.onDragEnter.bind(this);\n            this.el.nativeElement.addEventListener('dragover', this.dragOverListener);\n\n            this.dragEnterListener = this.onDragEnter.bind(this);\n            this.el.nativeElement.addEventListener('dragenter', this.dragEnterListener);\n\n            this.dragLeaveListener = this.onDragLeave.bind(this);\n            this.el.nativeElement.addEventListener('dragleave', this.dragLeaveListener);\n        });\n    }\n\n    unbindEvents() {\n        if (this.mouseDownListener) {\n            document.removeEventListener('mousedown', this.mouseDownListener);\n            this.mouseDownListener = null;\n        }\n\n        if (this.dragOverListener) {\n            document.removeEventListener('dragover', this.dragOverListener);\n            this.dragOverListener = null;\n        }\n\n        if (this.dragEnterListener) {\n            document.removeEventListener('dragenter', this.dragEnterListener);\n            this.dragEnterListener = null;\n        }\n\n        if (this.dragEnterListener) {\n            document.removeEventListener('dragenter', this.dragEnterListener);\n            this.dragEnterListener = null;\n        }\n\n        if (this.dragLeaveListener) {\n            document.removeEventListener('dragleave', this.dragLeaveListener);\n            this.dragLeaveListener = null;\n        }\n    }\n\n    onMouseDown(event) {\n        if (event.target.nodeName === 'INPUT' || event.target.nodeName === 'TEXTAREA' || DomHandler.hasClass(event.target, 'ui-column-resizer'))\n            this.el.nativeElement.draggable = false;\n        else\n            this.el.nativeElement.draggable = true;\n    }\n\n    onDragStart(event) {\n        this.dt.onColumnDragStart(event, this.el.nativeElement);\n    }\n\n    onDragOver(event) {\n        event.preventDefault();\n    }\n\n    onDragEnter(event) {\n        this.dt.onColumnDragEnter(event, this.el.nativeElement);\n    }\n\n    onDragLeave(event) {\n        this.dt.onColumnDragLeave(event);\n    }\n\n    @HostListener('drop', ['$event'])\n    onDrop(event) {\n        if (this.isEnabled()) {\n            this.dt.onColumnDrop(event, this.el.nativeElement);\n        }\n    }\n\n    isEnabled() {\n        return this.pReorderableColumnDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        this.unbindEvents();\n    }\n\n}\n\n@Directive({\n    selector: '[pEditableColumn]'\n})\nexport class EditableColumn implements AfterViewInit {\n\n    @Input(\"pEditableColumn\") data: any;\n\n    @Input(\"pEditableColumnField\") field: any;\n\n    @Input(\"pEditableColumnRowIndex\") rowIndex: number;\n\n    @Input() pEditableColumnDisabled: boolean;\n\n    @Input() pFocusCellSelector: string;\n\n    constructor(public dt: Table, public el: ElementRef, public zone: NgZone) {}\n\n    ngAfterViewInit() {\n        if (this.isEnabled()) {\n            DomHandler.addClass(this.el.nativeElement, 'ui-editable-column');\n        }\n    }\n\n    @HostListener('click', ['$event'])\n    onClick(event: MouseEvent) {\n        if (this.isEnabled()) {\n            this.dt.editingCellClick = true;\n\n            if (this.dt.editingCell) {\n                if (this.dt.editingCell !== this.el.nativeElement) {\n                    if (!this.dt.isEditingCellValid()) {\n                        return;\n                    }\n\n                    this.closeEditingCell(true, event);\n                    this.openCell();\n                }\n            }\n            else {\n                this.openCell();\n            }\n        }\n    }\n\n    openCell() {\n        this.dt.updateEditingCell(this.el.nativeElement, this.data, this.field, this.rowIndex);\n        DomHandler.addClass(this.el.nativeElement, 'ui-editing-cell');\n        this.dt.onEditInit.emit({field: this.field, data: this.data, index: this.rowIndex});\n        this.zone.runOutsideAngular(() => {\n            setTimeout(() => {\n                let focusCellSelector = this.pFocusCellSelector || 'input, textarea, select';\n                let focusableElement = DomHandler.findSingle(this.el.nativeElement, focusCellSelector);\n\n                if (focusableElement) {\n                    focusableElement.focus();\n                }\n            }, 50);\n        });\n    }\n\n    closeEditingCell(completed, event) {\n        if (completed)\n            this.dt.onEditComplete.emit({field: this.dt.editingCellField, data: this.dt.editingCellData, originalEvent: event, index: this.rowIndex});\n        else\n            this.dt.onEditCancel.emit({field: this.dt.editingCellField, data: this.dt.editingCellData, originalEvent: event, index: this.rowIndex});\n\n        DomHandler.removeClass(this.dt.editingCell, 'ui-editing-cell');\n        this.dt.editingCell = null;\n        this.dt.editingCellData = null;\n        this.dt.editingCellField = null;\n        this.dt.unbindDocumentEditListener();\n    }\n\n    @HostListener('keydown.enter', ['$event'])\n    onEnterKeyDown(event: KeyboardEvent) {\n        if (this.isEnabled()) {\n            if (this.dt.isEditingCellValid()) {\n                this.closeEditingCell(true, event);\n            }\n\n            event.preventDefault();\n        }\n    }\n\n    @HostListener('keydown.escape', ['$event'])\n    onEscapeKeyDown(event: KeyboardEvent) {\n        if (this.isEnabled()) {\n            if (this.dt.isEditingCellValid()) {\n                this.closeEditingCell(false, event);\n            }\n\n            event.preventDefault();\n        }\n    }\n\n    @HostListener('keydown.tab', ['$event'])\n    @HostListener('keydown.shift.tab', ['$event'])\n    @HostListener('keydown.meta.tab', ['$event'])\n    onShiftKeyDown(event: KeyboardEvent) {\n        if (this.isEnabled()) {\n            if (event.shiftKey)\n                this.moveToPreviousCell(event);\n            else{\n                this.moveToNextCell(event);\n            }\n        }\n    }\n\n    findCell(element) {\n        if (element) {\n            let cell = element;\n            while (cell && !DomHandler.hasClass(cell, 'ui-editing-cell')) {\n                cell = cell.parentElement;\n            }\n\n            return cell;\n        }\n        else {\n            return null;\n        }\n    }\n\n    moveToPreviousCell(event: KeyboardEvent) {\n        let currentCell = this.findCell(event.target);\n        if (currentCell) {\n            let targetCell = this.findPreviousEditableColumn(currentCell);\n\n            if (targetCell) {\n                if (this.dt.isEditingCellValid()) {\n                    this.closeEditingCell(true, event);\n                }\n\n                DomHandler.invokeElementMethod(event.target, 'blur');\n                DomHandler.invokeElementMethod(targetCell, 'click');\n                event.preventDefault();\n            }\n        }\n    }\n\n    moveToNextCell(event: KeyboardEvent) {\n        let currentCell = this.findCell(event.target);\n        if (currentCell) {\n            let targetCell = this.findNextEditableColumn(currentCell);\n\n            if (targetCell) {\n                if (this.dt.isEditingCellValid()) {\n                    this.closeEditingCell(true, event);\n                }\n\n                DomHandler.invokeElementMethod(event.target, 'blur');\n                DomHandler.invokeElementMethod(targetCell, 'click');\n                event.preventDefault();\n            }\n        }\n    }\n\n    findPreviousEditableColumn(cell: Element) {\n        let prevCell = cell.previousElementSibling;\n\n        if (!prevCell) {\n            let previousRow = cell.parentElement.previousElementSibling;\n            if (previousRow) {\n                prevCell = previousRow.lastElementChild;\n            }\n        }\n\n        if (prevCell) {\n            if (DomHandler.hasClass(prevCell, 'ui-editable-column'))\n                return prevCell;\n            else\n                return this.findPreviousEditableColumn(prevCell);\n        }\n        else {\n            return null;\n        }\n    }\n\n    findNextEditableColumn(cell: Element) {\n        let nextCell = cell.nextElementSibling;\n\n        if (!nextCell) {\n            let nextRow = cell.parentElement.nextElementSibling;\n            if (nextRow) {\n                nextCell = nextRow.firstElementChild;\n            }\n        }\n\n        if (nextCell) {\n            if (DomHandler.hasClass(nextCell, 'ui-editable-column'))\n                return nextCell;\n            else\n                return this.findNextEditableColumn(nextCell);\n        }\n        else {\n            return null;\n        }\n    }\n\n    isEnabled() {\n        return this.pEditableColumnDisabled !== true;\n    }\n\n}\n\n@Directive({\n    selector: '[pEditableRow]'\n})\nexport class EditableRow {\n\n    @Input(\"pEditableRow\") data: any;\n\n    @Input() pEditableRowDisabled: boolean;\n\n    constructor(public el: ElementRef) {}\n\n    isEnabled() {\n        return this.pEditableRowDisabled !== true;\n    }\n\n}\n\n@Directive({\n    selector: '[pInitEditableRow]'\n})\nexport class InitEditableRow {\n\n    constructor(public dt: Table, public editableRow: EditableRow) {}\n\n    @HostListener('click', ['$event'])\n    onClick(event: Event) {\n        this.dt.initRowEdit(this.editableRow.data);\n        event.preventDefault();\n    }\n\n}\n\n@Directive({\n    selector: '[pSaveEditableRow]'\n})\nexport class SaveEditableRow {\n\n    constructor(public dt: Table, public editableRow: EditableRow) {}\n\n    @HostListener('click', ['$event'])\n    onClick(event: Event) {\n        this.dt.saveRowEdit(this.editableRow.data, this.editableRow.el.nativeElement);\n        event.preventDefault();\n    }\n}\n\n@Directive({\n    selector: '[pCancelEditableRow]'\n})\nexport class CancelEditableRow {\n\n    constructor(public dt: Table, public editableRow: EditableRow) {}\n\n    @HostListener('click', ['$event'])\n    onClick(event: Event) {\n        this.dt.cancelRowEdit(this.editableRow.data);\n        event.preventDefault();\n    }\n}\n\n@Component({\n    selector: 'p-cellEditor',\n    template: `\n        <ng-container *ngIf=\"editing\">\n            <ng-container *ngTemplateOutlet=\"inputTemplate\"></ng-container>\n        </ng-container>\n        <ng-container *ngIf=\"!editing\">\n            <ng-container *ngTemplateOutlet=\"outputTemplate\"></ng-container>\n        </ng-container>\n    `\n})\nexport class CellEditor implements AfterContentInit {\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<PrimeTemplate>;\n\n    inputTemplate: TemplateRef<any>;\n\n    outputTemplate: TemplateRef<any>;\n\n    constructor(public dt: Table, @Optional() public editableColumn: EditableColumn, @Optional() public editableRow: EditableRow) { }\n\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch (item.getType()) {\n                case 'input':\n                    this.inputTemplate = item.template;\n                    break;\n\n                case 'output':\n                    this.outputTemplate = item.template;\n                    break;\n            }\n        });\n    }\n\n    get editing(): boolean {\n        return (this.dt.editingCell && this.editableColumn && this.dt.editingCell === this.editableColumn.el.nativeElement) ||\n                (this.editableRow && this.dt.editMode === 'row' && this.dt.isRowEditing(this.editableRow.data));\n    }\n\n}\n\n@Component({\n    selector: 'p-tableRadioButton',\n    template: `\n        <div class=\"ui-radiobutton ui-widget\" (click)=\"onClick($event)\">\n            <div class=\"ui-helper-hidden-accessible\">\n                <input type=\"radio\" [attr.id]=\"inputId\" [attr.name]=\"name\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\"\n                [disabled]=\"disabled\" [attr.aria-label]=\"ariaLabel\">\n            </div>\n            <div #box [ngClass]=\"{'ui-radiobutton-box ui-widget ui-state-default':true,\n                'ui-state-active':checked, 'ui-state-disabled':disabled}\" role=\"radio\" [attr.aria-checked]=\"checked\">\n                <span class=\"ui-radiobutton-icon ui-clickable\" [ngClass]=\"{'pi pi-circle-on':checked}\"></span>\n            </div>\n        </div>\n    `\n})\nexport class TableRadioButton  {\n\n    @Input() disabled: boolean;\n\n    @Input() value: any;\n\n    @Input() index: number;\n\n    @Input() inputId: string;\n\n    @Input() name: string;\n\n    @Input() ariaLabel: string;\n\n    @ViewChild('box') boxViewChild: ElementRef;\n\n    checked: boolean;\n\n    subscription: Subscription;\n\n    constructor(public dt: Table, public tableService: TableService) {\n        this.subscription = this.dt.tableService.selectionSource$.subscribe(() => {\n            this.checked = this.dt.isSelected(this.value);\n        });\n    }\n\n    ngOnInit() {\n        this.checked = this.dt.isSelected(this.value);\n    }\n\n    onClick(event: Event) {\n        if (!this.disabled) {\n            this.dt.toggleRowWithRadio({\n                originalEvent: event,\n                rowIndex: this.index\n            }, this.value);\n        }\n        DomHandler.clearSelection();\n    }\n\n    onFocus() {\n        DomHandler.addClass(this.boxViewChild.nativeElement, 'ui-state-focus');\n    }\n\n    onBlur() {\n        DomHandler.removeClass(this.boxViewChild.nativeElement, 'ui-state-focus');\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n}\n\n@Component({\n    selector: 'p-tableCheckbox',\n    template: `\n        <div class=\"ui-chkbox ui-widget\" (click)=\"onClick($event)\">\n            <div class=\"ui-helper-hidden-accessible\">\n                <input type=\"checkbox\" [attr.id]=\"inputId\" [attr.name]=\"name\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" [disabled]=\"disabled\"\n                [attr.required]=\"required\" [attr.aria-label]=\"ariaLabel\">\n            </div>\n            <div #box [ngClass]=\"{'ui-chkbox-box ui-widget ui-state-default':true,\n                'ui-state-active':checked, 'ui-state-disabled':disabled}\" role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <span class=\"ui-chkbox-icon ui-clickable\" [ngClass]=\"{'pi pi-check':checked}\"></span>\n            </div>\n        </div>\n    `\n})\nexport class TableCheckbox  {\n\n    @Input() disabled: boolean;\n\n    @Input() value: any;\n\n    @Input() index: number;\n\n    @Input() inputId: string;\n\n    @Input() name: string;\n\n    @Input() required: boolean;\n\n    @Input() ariaLabel: string;\n\n    @ViewChild('box') boxViewChild: ElementRef;\n\n    checked: boolean;\n\n    subscription: Subscription;\n\n    constructor(public dt: Table, public tableService: TableService) {\n        this.subscription = this.dt.tableService.selectionSource$.subscribe(() => {\n            this.checked = this.dt.isSelected(this.value);\n        });\n    }\n\n    ngOnInit() {\n        this.checked = this.dt.isSelected(this.value);\n    }\n\n    onClick(event: Event) {\n        if (!this.disabled) {\n            this.dt.toggleRowWithCheckbox({\n                originalEvent: event,\n                rowIndex: this.index\n            }, this.value);\n        }\n        DomHandler.clearSelection();\n    }\n\n    onFocus() {\n        DomHandler.addClass(this.boxViewChild.nativeElement, 'ui-state-focus');\n    }\n\n    onBlur() {\n        DomHandler.removeClass(this.boxViewChild.nativeElement, 'ui-state-focus');\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n}\n\n@Component({\n    selector: 'p-tableHeaderCheckbox',\n    template: `\n        <div class=\"ui-chkbox ui-widget\" (click)=\"onClick($event)\">\n            <div class=\"ui-helper-hidden-accessible\">\n                <input #cb type=\"checkbox\" [attr.id]=\"inputId\" [attr.name]=\"name\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\"\n                [disabled]=\"isDisabled()\" [attr.aria-label]=\"ariaLabel\">\n            </div>\n            <div #box [ngClass]=\"{'ui-chkbox-box ui-widget ui-state-default':true,\n                'ui-state-active':checked, 'ui-state-disabled': isDisabled()}\" role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <span class=\"ui-chkbox-icon ui-clickable\" [ngClass]=\"{'pi pi-check':checked}\"></span>\n            </div>\n        </div>\n    `\n})\nexport class TableHeaderCheckbox  {\n\n    @ViewChild('box') boxViewChild: ElementRef;\n\n    @Input() disabled: boolean;\n\n    @Input() inputId: string;\n\n    @Input() name: string;\n\n    @Input() ariaLabel: string;\n\n    checked: boolean;\n\n    selectionChangeSubscription: Subscription;\n\n    valueChangeSubscription: Subscription;\n\n    constructor(public dt: Table, public tableService: TableService) {\n        this.valueChangeSubscription = this.dt.tableService.valueSource$.subscribe(() => {\n            this.checked = this.updateCheckedState();\n        });\n\n        this.selectionChangeSubscription = this.dt.tableService.selectionSource$.subscribe(() => {\n            this.checked = this.updateCheckedState();\n        });\n    }\n\n    ngOnInit() {\n        this.checked = this.updateCheckedState();\n    }\n\n    onClick(event: Event) {\n        if (!this.disabled) {\n            if (this.dt.value && this.dt.value.length > 0) {\n                this.dt.toggleRowsWithCheckbox(event, !this.checked);\n            }\n        }\n\n        DomHandler.clearSelection();\n    }\n\n    onFocus() {\n        DomHandler.addClass(this.boxViewChild.nativeElement, 'ui-state-focus');\n    }\n\n    onBlur() {\n        DomHandler.removeClass(this.boxViewChild.nativeElement, 'ui-state-focus');\n    }\n\n    isDisabled() {\n        return this.disabled || !this.dt.value || !this.dt.value.length;\n    }\n\n    ngOnDestroy() {\n        if (this.selectionChangeSubscription) {\n            this.selectionChangeSubscription.unsubscribe();\n        }\n\n        if (this.valueChangeSubscription) {\n            this.valueChangeSubscription.unsubscribe();\n        }\n    }\n\n    updateCheckedState() {\n        if (this.dt.filteredValue) {\n            const val = this.dt.filteredValue;\n            return (val && val.length > 0 && this.dt.selection && this.dt.selection.length > 0 && this.isAllFilteredValuesChecked());\n        }\n        else {\n            const val = this.dt.value;\n            return (val && val.length > 0 && this.dt.selection && this.dt.selection.length > 0 && this.dt.selection.length === val.length);\n        }\n    }\n\n    isAllFilteredValuesChecked() {\n        if (!this.dt.filteredValue) {\n            return false;\n        }\n        else {\n            for (let rowData of this.dt.filteredValue) {\n                if (!this.dt.isSelected(rowData)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n\n}\n\n@Directive({\n    selector: '[pReorderableRowHandle]'\n})\nexport class ReorderableRowHandle implements AfterViewInit {\n\n    @Input(\"pReorderableRowHandle\") index: number;\n\n    constructor(public el: ElementRef) {}\n\n    ngAfterViewInit() {\n        DomHandler.addClass(this.el.nativeElement, 'ui-table-reorderablerow-handle');\n    }\n}\n\n@Directive({\n    selector: '[pReorderableRow]'\n})\nexport class ReorderableRow implements AfterViewInit {\n\n    @Input(\"pReorderableRow\") index: number;\n\n    @Input() pReorderableRowDisabled: boolean;\n\n    mouseDownListener: any;\n\n    dragStartListener: any;\n\n    dragEndListener: any;\n\n    dragOverListener: any;\n\n    dragLeaveListener: any;\n\n    dropListener: any;\n\n    constructor(public dt: Table, public el: ElementRef, public zone: NgZone) {}\n\n    ngAfterViewInit() {\n        if (this.isEnabled()) {\n            this.el.nativeElement.droppable = true;\n            this.bindEvents();\n        }\n    }\n\n    bindEvents() {\n        this.zone.runOutsideAngular(() => {\n            this.mouseDownListener = this.onMouseDown.bind(this);\n            this.el.nativeElement.addEventListener('mousedown', this.mouseDownListener);\n\n            this.dragStartListener = this.onDragStart.bind(this);\n            this.el.nativeElement.addEventListener('dragstart', this.dragStartListener);\n\n            this.dragEndListener = this.onDragEnd.bind(this);\n            this.el.nativeElement.addEventListener('dragend', this.dragEndListener);\n\n            this.dragOverListener = this.onDragOver.bind(this);\n            this.el.nativeElement.addEventListener('dragover', this.dragOverListener);\n\n            this.dragLeaveListener = this.onDragLeave.bind(this);\n            this.el.nativeElement.addEventListener('dragleave', this.dragLeaveListener);\n        });\n    }\n\n    unbindEvents() {\n        if (this.mouseDownListener) {\n            document.removeEventListener('mousedown', this.mouseDownListener);\n            this.mouseDownListener = null;\n        }\n\n        if (this.dragStartListener) {\n            document.removeEventListener('dragstart', this.dragStartListener);\n            this.dragStartListener = null;\n        }\n\n        if (this.dragEndListener) {\n            document.removeEventListener('dragend', this.dragEndListener);\n            this.dragEndListener = null;\n        }\n\n        if (this.dragOverListener) {\n            document.removeEventListener('dragover', this.dragOverListener);\n            this.dragOverListener = null;\n        }\n\n        if (this.dragLeaveListener) {\n            document.removeEventListener('dragleave', this.dragLeaveListener);\n            this.dragLeaveListener = null;\n        }\n    }\n\n    onMouseDown(event) {\n        if (DomHandler.hasClass(event.target, 'ui-table-reorderablerow-handle'))\n            this.el.nativeElement.draggable = true;\n        else\n            this.el.nativeElement.draggable = false;\n    }\n\n    onDragStart(event) {\n        this.dt.onRowDragStart(event, this.index);\n    }\n\n    onDragEnd(event) {\n        this.dt.onRowDragEnd(event);\n        this.el.nativeElement.draggable = false;\n    }\n\n    onDragOver(event) {\n        this.dt.onRowDragOver(event, this.index, this.el.nativeElement);\n        event.preventDefault();\n    }\n\n    onDragLeave(event) {\n        this.dt.onRowDragLeave(event, this.el.nativeElement);\n    }\n\n    isEnabled() {\n        return this.pReorderableRowDisabled !== true;\n    }\n\n    @HostListener('drop', ['$event'])\n    onDrop(event) {\n        if (this.isEnabled() && this.dt.rowDragging) {\n            this.dt.onRowDrop(event, this.el.nativeElement);\n        }\n\n        event.preventDefault()\n    }\n}\n\n@NgModule({\n    imports: [CommonModule,PaginatorModule,ScrollingModule],\n    exports: [Table,SharedModule,SortableColumn,SelectableRow,RowToggler,ContextMenuRow,ResizableColumn,ReorderableColumn,EditableColumn,CellEditor,SortIcon,TableRadioButton,TableCheckbox,TableHeaderCheckbox,ReorderableRowHandle,ReorderableRow,SelectableRowDblClick,EditableRow,InitEditableRow,SaveEditableRow,CancelEditableRow,ScrollingModule],\n    declarations: [Table,SortableColumn,SelectableRow,RowToggler,ContextMenuRow,ResizableColumn,ReorderableColumn,EditableColumn,CellEditor,TableBody,ScrollableView,SortIcon,TableRadioButton,TableCheckbox,TableHeaderCheckbox,ReorderableRowHandle,ReorderableRow,SelectableRowDblClick,EditableRow,InitEditableRow,SaveEditableRow,CancelEditableRow]\n})\nexport class TableModule { }\n"]}