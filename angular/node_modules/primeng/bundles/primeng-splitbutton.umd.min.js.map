{"version":3,"sources":["ng://primeng/splitbutton/splitbutton.ts"],"names":["SplitButton","el","renderer","router","cd","this","iconPos","onClick","EventEmitter","onDropdownClick","showTransitionOptions","hideTransitionOptions","overlayVisible","ariaId","UniqueComponentId","prototype","onDefaultButtonClick","event","emit","itemClick","item","disabled","preventDefault","url","command","originalEvent","show","onOverlayAnimationStart","toState","overlay","element","appendOverlay","style","zIndex","String","DomHandler","zindex","alignOverlay","bindDocumentClickListener","bindDocumentResizeListener","onOverlayHide","onDropdownButtonClick","dropdownClick","appendTo","absolutePosition","containerViewChild","nativeElement","relativePosition","document","body","appendChild","minWidth","getWidth","children","restoreOverlayAppend","_this","documentClickListener","listen","unbindDocumentClickListener","markForCheck","documentResizeListener","onWindowResize","bind","window","addEventListener","unbindDocumentResizeListener","removeEventListener","ngOnDestroy","ElementRef","Renderer2","Router","ChangeDetectorRef","__decorate","Input","Output","ViewChild","Component","selector","template","animations","trigger","state","transform","opacity","transition","animate","changeDetection","ChangeDetectionStrategy","Default","SplitButtonModule","NgModule","imports","CommonModule","ButtonModule","RouterModule","exports","declarations"],"mappings":"kgCAAAA,EAAA,WA2GI,SAAAA,EAAmBC,EAAuBC,EAA4BC,EAAuBC,GAA1EC,KAAAJ,GAAAA,EAAuBI,KAAAH,SAAAA,EAA4BG,KAAAF,OAAAA,EAAuBE,KAAAD,GAAAA,EA9CpFC,KAAAC,QAAkB,OAIjBD,KAAAE,QAA6B,IAAIC,EAAAA,aAEjCH,KAAAI,gBAAqC,IAAID,EAAAA,aAkB1CH,KAAAK,sBAAgC,iBAEhCL,KAAAM,sBAAgC,gBAQlCN,KAAAO,gBAA0B,EAa7BP,KAAKQ,OAASC,EAAAA,oBAAsB,QAgI5C,OA7HId,EAAAe,UAAAC,qBAAA,SAAqBC,GACjBZ,KAAKE,QAAQW,KAAKD,IAGtBjB,EAAAe,UAAAI,UAAA,SAAUF,EAAcG,GAChBA,EAAKC,SACLJ,EAAMK,kBAILF,EAAKG,KACNN,EAAMK,iBAGNF,EAAKI,SACLJ,EAAKI,QAAQ,CACTC,cAAeR,EACfG,KAAMA,IAIdf,KAAKO,gBAAiB,IAG1BZ,EAAAe,UAAAW,KAAA,WACIrB,KAAKO,gBAAkBP,KAAKO,gBAGhCZ,EAAAe,UAAAY,wBAAA,SAAwBV,GACpB,OAAQA,EAAMW,SACV,IAAK,UACDvB,KAAKwB,QAAUZ,EAAMa,QACrBzB,KAAK0B,gBACL1B,KAAKwB,QAAQG,MAAMC,OAASC,SAASC,EAAAA,WAAWC,QAChD/B,KAAKgC,eACLhC,KAAKiC,4BACLjC,KAAKkC,6BACT,MAEA,IAAK,OACDlC,KAAKmC,kBAKjBxC,EAAAe,UAAA0B,sBAAA,SAAsBxB,GAClBZ,KAAKI,gBAAgBS,KAAKD,GAC1BZ,KAAKqC,eAAgB,EACrBrC,KAAKqB,QAGT1B,EAAAe,UAAAsB,aAAA,WACQhC,KAAKsC,SACLR,EAAAA,WAAWS,iBAAiBvC,KAAKwB,QAASxB,KAAKwC,mBAAmBC,eAElEX,EAAAA,WAAWY,iBAAiB1C,KAAKwB,QAASxB,KAAKwC,mBAAmBC,gBAG1E9C,EAAAe,UAAAgB,cAAA,WACQ1B,KAAKsC,WACiB,SAAlBtC,KAAKsC,SACLK,SAASC,KAAKC,YAAY7C,KAAKwB,SAE/BM,EAAAA,WAAWe,YAAY7C,KAAKwB,QAASxB,KAAKsC,UAEzCtC,KAAKwB,QAAQG,MAAMmB,WACpB9C,KAAKwB,QAAQG,MAAMmB,SAAWhB,EAAAA,WAAWiB,SAAS/C,KAAKJ,GAAG6C,cAAcO,SAAS,IAAM,QAKnGrD,EAAAe,UAAAuC,qBAAA,WACQjD,KAAKwB,SAAWxB,KAAKsC,UACrBtC,KAAKJ,GAAG6C,cAAcI,YAAY7C,KAAKwB,UAI/C7B,EAAAe,UAAAuB,0BAAA,WAAA,IAAAiB,EAAAlD,KACSA,KAAKmD,wBACNnD,KAAKmD,sBAAwBnD,KAAKH,SAASuD,OAAO,WAAY,SAAS,WAC/DF,EAAKb,cACLa,EAAKb,eAAgB,GAGrBa,EAAK3C,gBAAiB,EACtB2C,EAAKG,8BACLH,EAAKnD,GAAGuD,qBAMxB3D,EAAAe,UAAA2C,4BAAA,WACQrD,KAAKmD,wBACLnD,KAAKmD,wBACLnD,KAAKmD,sBAAwB,OAIrCxD,EAAAe,UAAAwB,2BAAA,WACIlC,KAAKuD,uBAAyBvD,KAAKwD,eAAeC,KAAKzD,MACvD0D,OAAOC,iBAAiB,SAAU3D,KAAKuD,yBAG3C5D,EAAAe,UAAAkD,6BAAA,WACQ5D,KAAKuD,yBACLG,OAAOG,oBAAoB,SAAU7D,KAAKuD,wBAC1CvD,KAAKuD,uBAAyB,OAItC5D,EAAAe,UAAA8C,eAAA,WACIxD,KAAKO,gBAAiB,GAG1BZ,EAAAe,UAAAyB,cAAA,WACInC,KAAKqD,8BACLrD,KAAK4D,+BACL5D,KAAKwB,QAAU,MAGnB7B,EAAAe,UAAAoD,YAAA,WACI9D,KAAKiD,uBACLjD,KAAKmC,0DA/Hc4B,EAAAA,kBAA6BC,EAAAA,iBAA0BC,EAAAA,cAAmBC,EAAAA,qBAlDxFC,EAAA,CAARC,EAAAA,qCAEQD,EAAA,CAARC,EAAAA,oCAEQD,EAAA,CAARC,EAAAA,uCAEQD,EAAA,CAARC,EAAAA,qCAESD,EAAA,CAATE,EAAAA,wCAESF,EAAA,CAATE,EAAAA,gDAEQF,EAAA,CAARC,EAAAA,qCAEQD,EAAA,CAARC,EAAAA,0CAEQD,EAAA,CAARC,EAAAA,yCAEQD,EAAA,CAARC,EAAAA,8CAEQD,EAAA,CAARC,EAAAA,wCAEQD,EAAA,CAARC,EAAAA,wCAEQD,EAAA,CAARC,EAAAA,wCAEQD,EAAA,CAARC,EAAAA,mCAEQD,EAAA,CAARC,EAAAA,qDAEQD,EAAA,CAARC,EAAAA,qDAEuBD,EAAA,CAAvBG,EAAAA,UAAU,uDAEcH,EAAA,CAAxBG,EAAAA,UAAU,qDApCF3E,EAAWwE,EAAA,CA7CvBI,EAAAA,UAAU,CACPC,SAAU,gBACVC,SAAU,2vFA2BVC,WAAY,CACRC,EAAAA,QAAQ,mBAAoB,CACxBC,EAAAA,MAAM,OAAQjD,EAAAA,MAAM,CAChBkD,UAAW,iBACXC,QAAS,KAEbF,EAAAA,MAAM,UAAWjD,EAAAA,MAAM,CACnBkD,UAAW,gBACXC,QAAS,KAEbC,EAAAA,WAAW,kBAAmBC,EAAAA,QAAQ,6BACtCD,EAAAA,WAAW,kBAAmBC,EAAAA,QAAQ,gCAG9CC,gBAAiBC,EAAAA,wBAAwBC,WAEhCxF,GAvDb,gBAmPA,SAAAyF,KAAiC,OAApBA,EAAiBjB,EAAA,CAL7BkB,EAAAA,SAAS,CACNC,QAAS,CAACC,EAAAA,aAAaC,EAAAA,aAAaC,EAAAA,cACpCC,QAAS,CAAC/F,EAAY6F,EAAAA,aAAaC,EAAAA,cACnCE,aAAc,CAAChG,MAENyF","sourcesContent":["import {NgModule,Component,ElementRef,OnDestroy,Input,Output,EventEmitter,Renderer2,ChangeDetectorRef,ViewChild,ChangeDetectionStrategy} from '@angular/core';\nimport {trigger,state,style,transition,animate,AnimationEvent} from '@angular/animations';\nimport {CommonModule} from '@angular/common';\nimport {DomHandler} from 'primeng/dom';\nimport {MenuItem} from 'primeng/api';\nimport {ButtonModule} from 'primeng/button';\nimport {Router} from '@angular/router';\nimport {RouterModule} from '@angular/router';\nimport { UniqueComponentId } from 'primeng/utils';\n\n@Component({\n    selector: 'p-splitButton',\n    template: `\n        <div #container [ngClass]=\"{'ui-splitbutton ui-buttonset ui-widget':true}\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <button #defaultbtn type=\"button\" pButton [icon]=\"icon\" [iconPos]=\"iconPos\" [label]=\"label\" [cornerStyleClass]=\"dir === 'rtl' ? 'ui-corner-right': 'ui-corner-left'\" (click)=\"onDefaultButtonClick($event)\" [disabled]=\"disabled\" [attr.tabindex]=\"tabindex\">\n            </button><button type=\"button\" pButton class=\"ui-splitbutton-menubutton\" icon=\"pi pi-chevron-down\" [cornerStyleClass]=\"dir === 'rtl' ? 'ui-corner-left': 'ui-corner-right'\" (click)=\"onDropdownButtonClick($event)\" [disabled]=\"disabled\"></button>\n            <div [attr.id]=\"ariaId + '_overlay'\" #overlay [ngClass]=\"'ui-menu ui-menu-dynamic ui-widget ui-widget-content ui-corner-all ui-helper-clearfix ui-shadow'\" *ngIf=\"overlayVisible\"\n                    [ngStyle]=\"menuStyle\" [class]=\"menuStyleClass\"\n                    [@overlayAnimation]=\"{value: 'visible', params: {showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions}}\" (@overlayAnimation.start)=\"onOverlayAnimationStart($event)\">\n                <ul class=\"ui-menu-list ui-helper-reset\" role=\"menu\">\n                    <ng-template ngFor let-item [ngForOf]=\"model\">\n                        <li *ngIf=\"item.separator\" class=\"ui-menu-separator ui-widget-content\" [ngClass]=\"{'ui-helper-hidden': item.visible === false}\" role=\"separator\">\n                        <li class=\"ui-menuitem ui-widget ui-corner-all\" role=\"menuitem\" *ngIf=\"item.visible !== false && !item.separator\" role=\"none\">\n                            <a *ngIf=\"!item.routerLink\" [attr.href]=\"item.url\" class=\"ui-menuitem-link ui-corner-all\" [attr.target]=\"item.target\" role=\"menuitem\"\n                                [ngClass]=\"{'ui-state-disabled':item.disabled}\" (click)=\"itemClick($event, item)\">\n                                <span [ngClass]=\"'ui-menuitem-icon'\" [class]=\"item.icon\" *ngIf=\"item.icon\"></span>\n                                <span class=\"ui-menuitem-text\">{{item.label}}</span>\n                            </a>\n                            <a *ngIf=\"item.routerLink\" [routerLink]=\"item.routerLink\" [queryParams]=\"item.queryParams\"\n                                class=\"ui-menuitem-link ui-corner-all\" [attr.target]=\"item.target\" [ngClass]=\"{'ui-state-disabled':item.disabled}\" (click)=\"itemClick($event, item)\">\n                                <span [ngClass]=\"'ui-menuitem-icon'\" [class]=\"item.icon\" *ngIf=\"item.icon\"></span>\n                                <span class=\"ui-menuitem-text\">{{item.label}}</span>\n                            </a>\n                        </li>\n                    </ng-template>\n                </ul>\n            </div>\n        </div>\n    `,\n    animations: [\n        trigger('overlayAnimation', [\n            state('void', style({\n                transform: 'translateY(5%)',\n                opacity: 0\n            })),\n            state('visible', style({\n                transform: 'translateY(0)',\n                opacity: 1\n            })),\n            transition('void => visible', animate('{{showTransitionParams}}')),\n            transition('visible => void', animate('{{hideTransitionParams}}'))\n        ])\n    ],\n    changeDetection: ChangeDetectionStrategy.Default\n})\nexport class SplitButton implements OnDestroy {\n\n    @Input() model: MenuItem[];\n\n    @Input() icon: string;\n\n    @Input() iconPos: string = 'left';\n        \n    @Input() label: string;\n    \n    @Output() onClick: EventEmitter<any> = new EventEmitter();\n    \n    @Output() onDropdownClick: EventEmitter<any> = new EventEmitter();\n    \n    @Input() style: any;\n    \n    @Input() styleClass: string;\n    \n    @Input() menuStyle: any;\n    \n    @Input() menuStyleClass: string;\n    \n    @Input() disabled: boolean;\n\n    @Input() tabindex: number;\n    \n    @Input() appendTo: any;\n    \n    @Input() dir: string;\n\n    @Input() showTransitionOptions: string = '225ms ease-out';\n\n    @Input() hideTransitionOptions: string = '195ms ease-in';\n\n    @ViewChild('container') containerViewChild: ElementRef;\n    \n    @ViewChild('defaultbtn') buttonViewChild: ElementRef;\n\n    overlay: HTMLDivElement;\n                    \n    public overlayVisible: boolean = false;\n    \n    public documentClickListener: any;\n    \n    public dropdownClick: boolean;\n    \n    public shown: boolean;\n\n    ariaId: string;\n\n    documentResizeListener: any;\n\n    constructor(public el: ElementRef, public renderer: Renderer2, public router: Router, public cd: ChangeDetectorRef) {\n        this.ariaId = UniqueComponentId() + '_list';\n    }\n                \n    onDefaultButtonClick(event: Event) {\n        this.onClick.emit(event);\n    }\n    \n    itemClick(event: Event, item: MenuItem)Â {\n        if (item.disabled) {\n            event.preventDefault();\n            return;\n        }\n        \n        if (!item.url) {\n            event.preventDefault();\n        }\n        \n        if (item.command) {            \n            item.command({\n                originalEvent: event,\n                item: item\n            });\n        }\n        \n        this.overlayVisible = false;\n    }\n    \n    show() {\n        this.overlayVisible = !this.overlayVisible;\n    }\n\n    onOverlayAnimationStart(event: AnimationEvent) {\n        switch (event.toState) {\n            case 'visible':\n                this.overlay = event.element;\n                this.appendOverlay();\n                this.overlay.style.zIndex = String(++DomHandler.zindex);\n                this.alignOverlay();\n                this.bindDocumentClickListener();\n                this.bindDocumentResizeListener();\n            break;\n\n            case 'void':\n                this.onOverlayHide();\n            break;\n        }\n    }\n        \n    onDropdownButtonClick(event: Event) {\n        this.onDropdownClick.emit(event);\n        this.dropdownClick = true;\n        this.show();\n    }\n\n    alignOverlay() {\n        if (this.appendTo)\n            DomHandler.absolutePosition(this.overlay, this.containerViewChild.nativeElement);\n        else\n            DomHandler.relativePosition(this.overlay, this.containerViewChild.nativeElement);\n    }\n\n    appendOverlay() {\n        if (this.appendTo) {\n            if (this.appendTo === 'body')\n                document.body.appendChild(this.overlay);\n            else\n                DomHandler.appendChild(this.overlay, this.appendTo);\n\n            if (!this.overlay.style.minWidth) {\n                this.overlay.style.minWidth = DomHandler.getWidth(this.el.nativeElement.children[0]) + 'px';\n            }\n        }\n    }\n\n    restoreOverlayAppend() {\n        if (this.overlay && this.appendTo) {\n            this.el.nativeElement.appendChild(this.overlay);\n        }\n    }\n    \n    bindDocumentClickListener() {\n        if (!this.documentClickListener) {\n            this.documentClickListener = this.renderer.listen('document', 'click', () => {\n                if (this.dropdownClick) {\n                    this.dropdownClick = false;\n                }\n                else {\n                    this.overlayVisible = false;\n                    this.unbindDocumentClickListener();\n                    this.cd.markForCheck();\n                }\n            });\n        }\n    }\n    \n    unbindDocumentClickListener() {\n        if (this.documentClickListener) {\n            this.documentClickListener();\n            this.documentClickListener = null;\n        }\n    }\n    \n    bindDocumentResizeListener() {\n        this.documentResizeListener = this.onWindowResize.bind(this);\n        window.addEventListener('resize', this.documentResizeListener);\n    }\n    \n    unbindDocumentResizeListener() {\n        if (this.documentResizeListener) {\n            window.removeEventListener('resize', this.documentResizeListener);\n            this.documentResizeListener = null;\n        }\n    }\n\n    onWindowResize() {\n        this.overlayVisible = false;\n    }\n\n    onOverlayHide() {\n        this.unbindDocumentClickListener();\n        this.unbindDocumentResizeListener();\n        this.overlay = null;\n    }\n         \n    ngOnDestroy() {\n        this.restoreOverlayAppend();\n        this.onOverlayHide();\n    }\n}\n\n@NgModule({\n    imports: [CommonModule,ButtonModule,RouterModule],\n    exports: [SplitButton,ButtonModule,RouterModule],\n    declarations: [SplitButton]\n})\nexport class SplitButtonModule { }\n"]}