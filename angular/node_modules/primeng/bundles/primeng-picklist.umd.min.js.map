{"version":3,"sources":["../../src/app/components/picklist/picklist.ts"],"names":["PickList","el","cd","this","trackBy","index","item","showSourceFilter","showTargetFilter","metaKeySelection","showSourceControls","showTargetControls","disabled","filterMatchMode","onMoveToSource","EventEmitter","onMoveAllToSource","onMoveAllToTarget","onMoveToTarget","onSourceReorder","onTargetReorder","onSourceSelect","onTargetSelect","onSourceFilter","onTargetFilter","selectedItemsSource","selectedItemsTarget","SOURCE_LIST","TARGET_LIST","prototype","ngAfterContentInit","_this","templates","forEach","getType","itemTemplate","template","emptyMessageSourceTemplate","emptyMessageTargetTemplate","ngAfterViewChecked","movedUp","movedDown","listItems","DomHandler","find","reorderedListElement","listItem","length","scrollInView","onItemClick","event","selectedItems","callback","findIndexInSelection","selected","itemTouched","metaKey","ctrlKey","shiftKey","splice","push","emit","originalEvent","items","onSourceItemDblClick","moveRight","onTargetItemDblClick","moveLeft","onFilter","data","listType","query","target","value","trim","toLocaleLowerCase","filterLocale","filter","searchFields","filterBy","split","filterValueSource","visibleOptionsSource","FilterUtils","filterValueTarget","visibleOptionsTarget","isItemVisible","isVisibleInList","filterValue","i","onItemTouchEnd","sortByIndexInList","list","sort","item1","item2","findIndexInList","moveUp","listElement","selectedItem","selectedItemIndex","movedItem","temp","moveTop","unshift","scrollTop","moveDown","moveBottom","scrollHeight","source","moveAllRight","movedItems","removedItem","moveAllLeft","isSelected","onDragStart","dataTransfer","setData","blur","dragging","fromListType","draggedItemIndexSource","draggedItemIndexTarget","onDragOver","dragOverItemIndexSource","preventDefault","dragOverItemIndexTarget","onListItemDroppoint","onDragLeave","onDrop","insert","ObjectUtils","reorderArray","listHighlightTarget","listHighlightSource","onDragEnd","onListDrop","fromIndex","fromList","toIndex","toList","elementtomove","onListMouseMove","moveListType","listViewSourceChild","listViewTargetChild","offsetY","nativeElement","getBoundingClientRect","top","document","body","bottomDiff","clientHeight","pageY","topDiff","onListDragLeave","resetFilter","sourceFilterViewChild","targetFilterViewChild","onItemKeydown","currentTarget","which","nextItem","findNextItem","focus","prevItem","findPrevItem","nextElementSibling","hasClass","isHidden","previousElementSibling","Component","args","selector","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","ElementRef","ChangeDetectorRef","Input","Output","ViewChild","ContentChildren","PrimeTemplate","NgModule","imports","CommonModule","ButtonModule","SharedModule","RippleModule","exports","declarations"],"mappings":"usBA0OI,SAAAA,EAAmBC,EAAuBC,GAAvBC,KAAAF,GAAAA,EAAuBE,KAAAD,GAAAA,EAtHjCC,KAAAC,QAAoB,SAACC,EAAeC,GAAc,OAAAA,GAMlDH,KAAAI,kBAA4B,EAE5BJ,KAAAK,kBAA4B,EAE5BL,KAAAM,kBAA4B,EAY5BN,KAAAO,oBAA8B,EAE9BP,KAAAQ,oBAA8B,EAM9BR,KAAAS,UAAoB,EAMpBT,KAAAU,gBAA0B,WAEzBV,KAAAW,eAAoC,IAAIC,EAAAA,aAExCZ,KAAAa,kBAAuC,IAAID,EAAAA,aAE3CZ,KAAAc,kBAAuC,IAAIF,EAAAA,aAE3CZ,KAAAe,eAAoC,IAAIH,EAAAA,aAExCZ,KAAAgB,gBAAqC,IAAIJ,EAAAA,aAEzCZ,KAAAiB,gBAAqC,IAAIL,EAAAA,aAEzCZ,KAAAkB,eAAoC,IAAIN,EAAAA,aAExCZ,KAAAmB,eAAoC,IAAIP,EAAAA,aAExCZ,KAAAoB,eAAoC,IAAIR,EAAAA,aAExCZ,KAAAqB,eAAoC,IAAIT,EAAAA,aAkBlDZ,KAAAsB,oBAA6B,GAE7BtB,KAAAuB,oBAA6B,GAsCpBvB,KAAAwB,aAAe,EAEfxB,KAAAyB,YAAc,SAIvB5B,EAAA6B,UAAAC,mBAAA,WAAA,IAAAC,EAAA5B,KACIA,KAAK6B,UAAUC,SAAQ,SAAC3B,GACpB,OAAOA,EAAK4B,WACR,IAAK,OACDH,EAAKI,aAAe7B,EAAK8B,SAC7B,MAEA,IAAK,qBACDL,EAAKM,2BAA6B/B,EAAK8B,SAC3C,MAEA,IAAK,qBACDL,EAAKO,2BAA6BhC,EAAK8B,SACvC,MAEJ,QACIL,EAAKI,aAAe7B,EAAK8B,cAMzCpC,EAAA6B,UAAAU,mBAAA,WACI,GAAIpC,KAAKqC,SAASrC,KAAKsC,UAAW,CAC9B,IAAIC,EAAYC,EAAAA,WAAWC,KAAKzC,KAAK0C,qBAAsB,kBACvDC,OAAQ,EAGRA,EADA3C,KAAKqC,QACME,EAAU,GAEVA,EAAUA,EAAUK,OAAS,GAE5CJ,EAAAA,WAAWK,aAAa7C,KAAK0C,qBAAsBC,GACnD3C,KAAKqC,SAAU,EACfrC,KAAKsC,WAAY,EACjBtC,KAAK0C,qBAAuB,OAIpC7C,EAAA6B,UAAAoB,YAAA,SAAYC,EAAO5C,EAAW6C,EAAsBC,GAChD,IAAIjD,KAAKS,SAAT,CAIA,IAAIP,EAAQF,KAAKkD,qBAAqB/C,EAAK6C,GACvCG,GAAsB,GAAVjD,EAGhB,IAFoBF,KAAKoD,aAAsBpD,KAAKM,iBAEjC,CACf,IAAI+C,EAAWN,EAAMM,SAASN,EAAMO,SAASP,EAAMQ,SAE/CJ,GAAYE,EACZL,EAAcQ,OAAOtD,EAAO,IAGvBmD,IACDL,EAAcJ,OAAS,GAE3BI,EAAcS,KAAKtD,SAInBgD,EACAH,EAAcQ,OAAOtD,EAAO,GAE5B8C,EAAcS,KAAKtD,GAG3B8C,EAASS,KAAK,CAACC,cAAeZ,EAAOa,MAAOZ,IAE5ChD,KAAKoD,aAAc,IAGvBvD,EAAA6B,UAAAmC,qBAAA,WACQ7D,KAAKS,UAITT,KAAK8D,aAGTjE,EAAA6B,UAAAqC,qBAAA,WACQ/D,KAAKS,UAITT,KAAKgE,YAGTnE,EAAA6B,UAAAuC,SAAA,SAASlB,EAAsBmB,EAAaC,GACxC,IAAIC,EAA6BrB,EAAMsB,OAAQC,MAAMC,OAAeC,kBAAkBxE,KAAKyE,cAC3FzE,KAAK0E,OAAON,EAAOF,EAAMC,IAG7BtE,EAAA6B,UAAAgD,OAAA,SAAON,EAAeF,EAAaC,GAC/B,IAAIQ,EAAe3E,KAAK4E,SAASC,MAAM,KAEnCV,IAAanE,KAAKwB,aAClBxB,KAAK8E,kBAAoBV,EACzBpE,KAAK+E,qBAAuBC,EAAAA,YAAYN,OAAOR,EAAMS,EAAc3E,KAAK8E,kBAAmB9E,KAAKU,gBAAiBV,KAAKyE,cACtHzE,KAAKoB,eAAesC,KAAK,CAACU,MAAOpE,KAAK8E,kBAAmBR,MAAOtE,KAAK+E,wBAEhEZ,IAAanE,KAAKyB,cACvBzB,KAAKiF,kBAAoBb,EACzBpE,KAAKkF,qBAAuBF,EAAAA,YAAYN,OAAOR,EAAMS,EAAc3E,KAAKiF,kBAAmBjF,KAAKU,gBAAiBV,KAAKyE,cACtHzE,KAAKqB,eAAeqC,KAAK,CAACU,MAAOpE,KAAKiF,kBAAmBX,MAAOtE,KAAKkF,yBAI7ErF,EAAA6B,UAAAyD,cAAA,SAAchF,EAAWgE,GACrB,OAAIA,GAAYnE,KAAKwB,YACVxB,KAAKoF,gBAAgBpF,KAAK+E,qBAAsB5E,EAAMH,KAAK8E,mBAE3D9E,KAAKoF,gBAAgBpF,KAAKkF,qBAAsB/E,EAAMH,KAAKiF,oBAG1EpF,EAAA6B,UAAA0D,gBAAA,SAAgBlB,EAAa/D,EAAWkF,GACpC,IAAIA,IAAeA,EAAYd,OAAO3B,OAQlC,OAAO,EAPP,IAAI,IAAI0C,EAAI,EAAGA,EAAIpB,EAAKtB,OAAQ0C,IAC5B,GAAInF,GAAQ+D,EAAKoB,GACb,OAAO,GASvBzF,EAAA6B,UAAA6D,eAAA,SAAexC,GACP/C,KAAKS,WAITT,KAAKoD,aAAc,IAGfvD,EAAA6B,UAAA8D,kBAAA,SAAkB5B,EAAc6B,GAAhC,IAAA7D,EAAA5B,KACJ,OAAO4D,EAAM8B,MAAK,SAACC,EAAOC,GACtB,OAAAhE,EAAKiE,gBAAgBF,EAAOF,GAAQ7D,EAAKiE,gBAAgBD,EAAOH,OAGxE5F,EAAA6B,UAAAoE,OAAA,SAAOC,EAAaN,EAAMzC,EAAeC,GACrC,GAAID,GAAiBA,EAAcJ,OAAQ,CACvCI,EAAgBhD,KAAKwF,kBAAkBxC,EAAeyC,GACtD,IAAI,IAAIH,EAAI,EAAGA,EAAItC,EAAcJ,OAAQ0C,IAAK,CAC1C,IAAIU,EAAehD,EAAcsC,GAC7BW,EAA4BjG,KAAK6F,gBAAgBG,EAAcP,GAEnE,GAAyB,GAArBQ,EAOA,MANA,IAAIC,EAAYT,EAAKQ,GACjBE,EAAOV,EAAKQ,EAAkB,GAClCR,EAAKQ,EAAkB,GAAKC,EAC5BT,EAAKQ,GAAqBE,EAOlCnG,KAAKqC,SAAU,EACfrC,KAAK0C,qBAAuBqD,EAC5B9C,EAASS,KAAK,CAACE,MAAOZ,MAI9BnD,EAAA6B,UAAA0E,QAAA,SAAQL,EAAaN,EAAMzC,EAAeC,GACtC,GAAID,GAAiBA,EAAcJ,OAAQ,CACvCI,EAAgBhD,KAAKwF,kBAAkBxC,EAAeyC,GACtD,IAAI,IAAIH,EAAI,EAAGA,EAAItC,EAAcJ,OAAQ0C,IAAK,CAC1C,IAAIU,EAAehD,EAAcsC,GAC7BW,EAA4BjG,KAAK6F,gBAAgBG,EAAcP,GAEnE,GAAyB,GAArBQ,EAKA,MAJA,IAAIC,EAAYT,EAAKjC,OAAOyC,EAAkB,GAAG,GACjDR,EAAKY,QAAQH,GAOrBH,EAAYO,UAAY,EACxBrD,EAASS,KAAK,CAACE,MAAOZ,MAI9BnD,EAAA6B,UAAA6E,SAAA,SAASR,EAAaN,EAAMzC,EAAeC,GACvC,GAAID,GAAiBA,EAAcJ,OAAQ,CAEvC,IAAI,IAAI0C,GADRtC,EAAgBhD,KAAKwF,kBAAkBxC,EAAeyC,IAC5B7C,OAAS,EAAG0C,GAAK,EAAGA,IAAK,CAC/C,IAAIU,EAAehD,EAAcsC,GAC7BW,EAA4BjG,KAAK6F,gBAAgBG,EAAcP,GAEnE,GAAIQ,GAAsBR,EAAK7C,OAAS,EAOpC,MANA,IAAIsD,EAAYT,EAAKQ,GACjBE,EAAOV,EAAKQ,EAAkB,GAClCR,EAAKQ,EAAkB,GAAKC,EAC5BT,EAAKQ,GAAqBE,EAOlCnG,KAAKsC,WAAY,EACjBtC,KAAK0C,qBAAuBqD,EAC5B9C,EAASS,KAAK,CAACE,MAAOZ,MAI9BnD,EAAA6B,UAAA8E,WAAA,SAAWT,EAAaN,EAAMzC,EAAeC,GACzC,GAAID,GAAiBA,EAAcJ,OAAQ,CAEvC,IAAI,IAAI0C,GADRtC,EAAgBhD,KAAKwF,kBAAkBxC,EAAeyC,IAC5B7C,OAAS,EAAG0C,GAAK,EAAGA,IAAK,CAC/C,IAAIU,EAAehD,EAAcsC,GAC7BW,EAA4BjG,KAAK6F,gBAAgBG,EAAcP,GAEnE,GAAIQ,GAAsBR,EAAK7C,OAAS,EAKpC,MAJA,IAAIsD,EAAYT,EAAKjC,OAAOyC,EAAkB,GAAG,GACjDR,EAAKhC,KAAKyC,GAOlBH,EAAYO,UAAYP,EAAYU,aACpCxD,EAASS,KAAK,CAACE,MAAOZ,MAI9BnD,EAAA6B,UAAAoC,UAAA,WACI,GAAI9D,KAAKsB,qBAAuBtB,KAAKsB,oBAAoBsB,OAAQ,CAC7D,IAAI,IAAI0C,EAAI,EAAGA,EAAItF,KAAKsB,oBAAoBsB,OAAQ0C,IAAK,CACrD,IAAIU,EAAehG,KAAKsB,oBAAoBgE,IACY,GAApDtF,KAAK6F,gBAAgBG,EAAchG,KAAKqE,SACxCrE,KAAKqE,OAAOZ,KAAKzD,KAAK0G,OAAOlD,OAAOxD,KAAK6F,gBAAgBG,EAAchG,KAAK0G,QAAQ,GAAG,IAG/F1G,KAAKe,eAAe2C,KAAK,CACrBE,MAAO5D,KAAKsB,sBAEhBtB,KAAKsB,oBAAsB,GAEvBtB,KAAKiF,mBACLjF,KAAK0E,OAAO1E,KAAKiF,kBAAmBjF,KAAKqE,OAAQrE,KAAKyB,eAKlE5B,EAAA6B,UAAAiF,aAAA,WACI,GAAI3G,KAAK0G,OAAQ,CAGb,IAFA,IAAIE,EAAa,GAETtB,EAAI,EAAGA,EAAItF,KAAK0G,OAAO9D,OAAQ0C,IACnC,GAAItF,KAAKmF,cAAcnF,KAAK0G,OAAOpB,GAAItF,KAAKwB,aAAc,CACtD,IAAIqF,EAAc7G,KAAK0G,OAAOlD,OAAO8B,EAAG,GAAG,GAC3CtF,KAAKqE,OAAOZ,KAAKoD,GACjBD,EAAWnD,KAAKoD,GAChBvB,IAIRtF,KAAKe,eAAe2C,KAAK,CACrBE,MAAOgD,IAGX5G,KAAKc,kBAAkB4C,KAAK,CACxBE,MAAOgD,IAGX5G,KAAKsB,oBAAsB,GAEvBtB,KAAKiF,mBACLjF,KAAK0E,OAAO1E,KAAKiF,kBAAmBjF,KAAKqE,OAAQrE,KAAKyB,eAKlE5B,EAAA6B,UAAAsC,SAAA,WACI,GAAIhE,KAAKuB,qBAAuBvB,KAAKuB,oBAAoBqB,OAAQ,CAC7D,IAAI,IAAI0C,EAAI,EAAGA,EAAItF,KAAKuB,oBAAoBqB,OAAQ0C,IAAK,CACrD,IAAIU,EAAehG,KAAKuB,oBAAoB+D,IACY,GAApDtF,KAAK6F,gBAAgBG,EAAchG,KAAK0G,SACxC1G,KAAK0G,OAAOjD,KAAKzD,KAAKqE,OAAOb,OAAOxD,KAAK6F,gBAAgBG,EAAchG,KAAKqE,QAAQ,GAAG,IAG/FrE,KAAKW,eAAe+C,KAAK,CACrBE,MAAO5D,KAAKuB,sBAGhBvB,KAAKuB,oBAAsB,GAEvBvB,KAAK8E,mBACL9E,KAAK0E,OAAO1E,KAAK8E,kBAAmB9E,KAAK0G,OAAQ1G,KAAKwB,eAKlE3B,EAAA6B,UAAAoF,YAAA,WACI,GAAI9G,KAAKqE,OAAQ,CAGb,IAFA,IAAIuC,EAAa,GAETtB,EAAI,EAAGA,EAAItF,KAAKqE,OAAOzB,OAAQ0C,IACnC,GAAItF,KAAKmF,cAAcnF,KAAKqE,OAAOiB,GAAItF,KAAKyB,aAAc,CACtD,IAAIoF,EAAc7G,KAAKqE,OAAOb,OAAO8B,EAAG,GAAG,GAC3CtF,KAAK0G,OAAOjD,KAAKoD,GACjBD,EAAWnD,KAAKoD,GAChBvB,IAIRtF,KAAKW,eAAe+C,KAAK,CACrBE,MAAOgD,IAGX5G,KAAKa,kBAAkB6C,KAAK,CACxBE,MAAOgD,IAGX5G,KAAKuB,oBAAsB,GAEvBvB,KAAK8E,mBACL9E,KAAK0E,OAAO1E,KAAK8E,kBAAmB9E,KAAK0G,OAAQ1G,KAAKwB,eAKlE3B,EAAA6B,UAAAqF,WAAA,SAAW5G,EAAW6C,GAClB,OAA0D,GAAnDhD,KAAKkD,qBAAqB/C,EAAM6C,IAG3CnD,EAAA6B,UAAAwB,qBAAA,SAAqB/C,EAAW6C,GAC5B,OAAOhD,KAAK6F,gBAAgB1F,EAAM6C,IAGtCnD,EAAA6B,UAAAmE,gBAAA,SAAgB1F,EAAWsF,GACvB,IAAIvF,GAAiB,EAErB,GAAIuF,EACA,IAAI,IAAIH,EAAI,EAAGA,EAAIG,EAAK7C,OAAQ0C,IAC5B,GAAIG,EAAKH,IAAMnF,EAAM,CACjBD,EAAQoF,EACR,MAKZ,OAAOpF,GAGXL,EAAA6B,UAAAsF,YAAA,SAAYjE,EAAkB7C,EAAeiE,GACzCpB,EAAMkE,aAAaC,QAAQ,OAAQ,KAClBnE,EAAMsB,OAAQ8C,OAC/BnH,KAAKoH,UAAW,EAChBpH,KAAKqH,aAAelD,EAEhBA,IAAanE,KAAKwB,YAClBxB,KAAKsH,uBAAyBpH,EAE9BF,KAAKuH,uBAAyBrH,GAGtCL,EAAA6B,UAAA8F,WAAA,SAAWzE,EAAkB7C,EAAeiE,GACpCnE,KAAKoH,WACDjD,GAAYnE,KAAKwB,aACbxB,KAAKsH,yBAA2BpH,GAASF,KAAKsH,uBAAyB,IAAMpH,GAAUF,KAAKqH,eAAiBrH,KAAKyB,eAClHzB,KAAKyH,wBAA0BvH,EAC/B6C,EAAM2E,mBAIN1H,KAAKuH,yBAA2BrH,GAASF,KAAKuH,uBAAyB,IAAMrH,GAAUF,KAAKqH,eAAiBrH,KAAKwB,eAClHxB,KAAK2H,wBAA0BzH,EAC/B6C,EAAM2E,kBAGd1H,KAAK4H,qBAAsB,IAInC/H,EAAA6B,UAAAmG,YAAA,SAAY9E,EAAkBoB,GAC1BnE,KAAKyH,wBAA0B,KAC/BzH,KAAK2H,wBAA0B,KAC/B3H,KAAK4H,qBAAsB,GAG/B/H,EAAA6B,UAAAoG,OAAA,SAAO/E,EAAkB7C,EAAeiE,GAChCnE,KAAK4H,sBACDzD,IAAanE,KAAKwB,aACdxB,KAAKqH,eAAiBrH,KAAKyB,YAC3BzB,KAAK+H,OAAO/H,KAAKuH,uBAAwBvH,KAAKqE,OAAQnE,EAAOF,KAAK0G,OAAQ1G,KAAKW,iBAG/EqH,EAAAA,YAAYC,aAAajI,KAAK0G,OAAQ1G,KAAKsH,uBAAyBtH,KAAKsH,uBAAyBpH,EAASA,EAAmB,IAAVA,EAAe,EAAIA,EAAQ,GAC/IF,KAAKgB,gBAAgB0C,KAAK,CAACE,MAAO5D,KAAK0G,OAAO1G,KAAKsH,2BAGvDtH,KAAKyH,wBAA0B,OAG3BzH,KAAKqH,eAAiBrH,KAAKwB,YAC3BxB,KAAK+H,OAAO/H,KAAKsH,uBAAwBtH,KAAK0G,OAAQxG,EAAOF,KAAKqE,OAAQrE,KAAKe,iBAG/EiH,EAAAA,YAAYC,aAAajI,KAAKqE,OAAQrE,KAAKuH,uBAAyBvH,KAAKuH,uBAAyBrH,EAASA,EAAmB,IAAVA,EAAe,EAAIA,EAAQ,GAC/IF,KAAKiB,gBAAgByC,KAAK,CAACE,MAAO5D,KAAKqE,OAAOrE,KAAKuH,2BAGvDvH,KAAK2H,wBAA0B,MAGnC3H,KAAKkI,qBAAsB,EAC3BlI,KAAKmI,qBAAsB,EAC3BpF,EAAM2E,mBAId7H,EAAA6B,UAAA0G,UAAA,SAAUrF,GACN/C,KAAKoH,UAAW,GAGpBvH,EAAA6B,UAAA2G,WAAA,SAAWtF,EAAkBoB,GACpBnE,KAAK4H,sBACFzD,IAAanE,KAAKwB,YACdxB,KAAKqH,eAAiBrH,KAAKyB,aAC3BzB,KAAK+H,OAAO/H,KAAKuH,uBAAwBvH,KAAKqE,OAAQ,KAAMrE,KAAK0G,OAAQ1G,KAAKW,gBAI9EX,KAAKqH,eAAiBrH,KAAKwB,aAC3BxB,KAAK+H,OAAO/H,KAAKsH,uBAAwBtH,KAAK0G,OAAQ,KAAM1G,KAAKqE,OAAQrE,KAAKe,gBAItFf,KAAKkI,qBAAsB,EAC3BlI,KAAKmI,qBAAsB,EAC3BpF,EAAM2E,mBAId7H,EAAA6B,UAAAqG,OAAA,SAAOO,EAAWC,EAAUC,EAASC,EAAQxF,GACzC,IAAMyF,EAAgBH,EAASD,GAEf,OAAZE,EACAC,EAAOhF,KAAK8E,EAAS/E,OAAO8E,EAAW,GAAG,IAE1CG,EAAOjF,OAAOgF,EAAS,EAAGD,EAAS/E,OAAO8E,EAAW,GAAG,IAE5DrF,EAASS,KAAK,CACVE,MAAO,CAAC8E,MAIhB7I,EAAA6B,UAAAiH,gBAAA,SAAgB5F,EAAmBoB,GAC/B,GAAInE,KAAKoH,SAAU,CACf,IAAIwB,EAA4B,GAAZzE,EAAgBnE,KAAK6I,oBAAsB7I,KAAK8I,oBAChEC,EAAUH,EAAaI,cAAcC,wBAAwBC,IAAMC,SAASC,KAAK9C,UACjF+C,EAAcN,EAAUH,EAAaI,cAAcM,aAAgBvG,EAAMwG,MACzEC,EAAWzG,EAAMwG,MAAQR,EAEzBM,EAAa,IAAMA,EAAa,EAChCT,EAAaI,cAAc1C,WAAa,GACnCkD,EAAU,IAAMA,EAAU,IAC/BZ,EAAaI,cAAc1C,WAAa,IAExCnC,IAAanE,KAAKwB,YACdxB,KAAKqH,eAAiBrH,KAAKyB,cAC3BzB,KAAKmI,qBAAsB,GAG3BnI,KAAKqH,eAAiBrH,KAAKwB,cAC3BxB,KAAKkI,qBAAsB,GAGnCnF,EAAM2E,mBAId7H,EAAA6B,UAAA+H,gBAAA,WACIzJ,KAAKkI,qBAAsB,EAC3BlI,KAAKmI,qBAAsB,GAG/BtI,EAAA6B,UAAAgI,YAAA,WACI1J,KAAK+E,qBAAuB,KAC5B/E,KAAK8E,kBAAoB,KACzB9E,KAAKkF,qBAAuB,KAC5BlF,KAAKiF,kBAAoB,KAELjF,KAAK2J,sBAAsBX,cAAe1E,MAAQ,GAClDtE,KAAK4J,sBAAsBZ,cAAe1E,MAAQ,IAG1EzE,EAAA6B,UAAAmI,cAAA,SAAc9G,EAAsB5C,EAAW6C,EAAsBC,GACjE,IAAIN,EAA2BI,EAAM+G,cAErC,OAAO/G,EAAMgH,OAET,KAAK,GACD,IAAIC,EAAWhK,KAAKiK,aAAatH,GAC7BqH,GACAA,EAASE,QAGbnH,EAAM2E,iBACV,MAGA,KAAK,GACD,IAAIyC,EAAWnK,KAAKoK,aAAazH,GAC7BwH,GACAA,EAASD,QAGbnH,EAAM2E,iBACV,MAGA,KAAK,GACD1H,KAAK8C,YAAYC,EAAO5C,EAAM6C,EAAeC,GAC7CF,EAAM2E,mBAKlB7H,EAAA6B,UAAAuI,aAAA,SAAa9J,GACT,IAAI6J,EAAW7J,EAAKkK,mBAEpB,OAAIL,GACQxH,EAAAA,WAAW8H,SAASN,EAAU,oBAAsBxH,EAAAA,WAAW+H,SAASP,GAAYhK,KAAKiK,aAAaD,GAAYA,EAEnH,MAGfnK,EAAA6B,UAAA0I,aAAA,SAAajK,GACT,IAAIgK,EAAWhK,EAAKqK,uBAEpB,OAAIL,GACQ3H,EAAAA,WAAW8H,SAASH,EAAU,oBAAsB3H,EAAAA,WAAW+H,SAASJ,GAAYnK,KAAKoK,aAAaD,GAAYA,EAEnH,+BAjwBlBM,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,aACV1I,SAAU,mkSAqFV2I,gBAAiBC,EAAAA,wBAAwBC,OACzCC,cAAeC,EAAAA,kBAAkBC,8nBAjGPC,EAAAA,kBAA6KC,EAAAA,qDAsGtMC,EAAAA,sBAEAA,EAAAA,4BAEAA,EAAAA,4BAEAA,EAAAA,0BAEAA,EAAAA,wBAEAA,EAAAA,4BAEAA,EAAAA,uBAEAA,EAAAA,6BAEAA,EAAAA,6BAEAA,EAAAA,gCAEAA,EAAAA,gCAEAA,EAAAA,gCAEAA,EAAAA,wBAEAA,EAAAA,qBAEAA,EAAAA,0BAEAA,EAAAA,2BAEAA,EAAAA,2BAEAA,EAAAA,kCAEAA,EAAAA,kCAEAA,EAAAA,uCAEAA,EAAAA,uCAEAA,EAAAA,wBAEAA,EAAAA,qCAEAA,EAAAA,qCAEAA,EAAAA,+BAEAA,EAAAA,8BAEAC,EAAAA,kCAEAA,EAAAA,kCAEAA,EAAAA,+BAEAA,EAAAA,gCAEAA,EAAAA,gCAEAA,EAAAA,+BAEAA,EAAAA,+BAEAA,EAAAA,+BAEAA,EAAAA,+BAEAA,EAAAA,oCAEAC,EAAAA,UAASZ,KAAA,CAAC,2CAEVY,EAAAA,UAASZ,KAAA,CAAC,6CAEVY,EAAAA,UAASZ,KAAA,CAAC,+CAEVY,EAAAA,UAASZ,KAAA,CAAC,mCAEVa,EAAAA,gBAAeb,KAAA,CAACc,EAAAA,wBA6lBrB,iCALCC,EAAAA,SAAQf,KAAA,CAAC,CACNgB,QAAS,CAACC,EAAAA,aAAaC,EAAAA,aAAaC,EAAAA,aAAaC,EAAAA,cACjDC,QAAS,CAAClM,EAASgM,EAAAA,cACnBG,aAAc,CAACnM","sourcesContent":["import { NgModule, Component, ElementRef, AfterContentInit, AfterViewChecked, Input, Output, ContentChildren, QueryList, TemplateRef, EventEmitter, ViewChild, ChangeDetectionStrategy, ViewEncapsulation, ChangeDetectorRef} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ButtonModule} from 'primeng/button';\nimport {SharedModule,PrimeTemplate} from 'primeng/api';\nimport {DomHandler} from 'primeng/dom';\nimport {RippleModule} from 'primeng/ripple';\nimport {ObjectUtils} from 'primeng/utils';\nimport {FilterUtils} from 'primeng/utils';\n\n@Component({\n    selector: 'p-pickList',\n    template: `\n        <div [class]=\"styleClass\" [ngStyle]=\"style\" [ngClass]=\"'p-picklist p-component'\">\n            <div class=\"p-picklist-buttons p-picklist-source-controls\" *ngIf=\"showSourceControls\">\n                <button type=\"button\" pButton pRipple icon=\"pi pi-angle-up\" [disabled]=\"disabled\" (click)=\"moveUp(sourcelist,source,selectedItemsSource,onSourceReorder)\"></button>\n                <button type=\"button\" pButton pRipple icon=\"pi pi-angle-double-up\" [disabled]=\"disabled\" (click)=\"moveTop(sourcelist,source,selectedItemsSource,onSourceReorder)\"></button>\n                <button type=\"button\" pButton pRipple icon=\"pi pi-angle-down\" [disabled]=\"disabled\" (click)=\"moveDown(sourcelist,source,selectedItemsSource,onSourceReorder)\"></button>\n                <button type=\"button\" pButton pRipple icon=\"pi pi-angle-double-down\" [disabled]=\"disabled\" (click)=\"moveBottom(sourcelist,source,selectedItemsSource,onSourceReorder)\"></button>\n            </div>\n            <div class=\"p-picklist-list-wrapper p-picklist-source-wrapper\">\n                <div class=\"p-picklist-header\" *ngIf=\"sourceHeader\">\n                    <div class=\"p-picklist-title\">{{sourceHeader}}</div>\n                </div>\n                <div class=\"p-picklist-filter-container\" *ngIf=\"filterBy && showSourceFilter !== false\">\n                    <div class=\"p-picklist-filter\">\n                        <input #sourceFilter type=\"text\" role=\"textbox\" (keyup)=\"onFilter($event,source,SOURCE_LIST)\" class=\"p-picklist-filter-input p-inputtext p-component\" [disabled]=\"disabled\" [attr.placeholder]=\"sourceFilterPlaceholder\" [attr.aria-label]=\"ariaSourceFilterLabel\">\n                        <span class=\"p-picklist-filter-icon pi pi-search\"></span>\n                    </div>\n                </div>\n                \n                <ul #sourcelist class=\"p-picklist-list p-picklist-source\" [ngClass]=\"{'p-picklist-list-highlight': listHighlightSource}\"\n                    [ngStyle]=\"sourceStyle\" (dragover)=\"onListMouseMove($event,SOURCE_LIST)\" (dragleave)=\"onListDragLeave()\" (drop)=\"onListDrop($event, SOURCE_LIST)\" role=\"listbox\" aria-multiselectable=\"multiple\">\n                    <ng-template ngFor let-item [ngForOf]=\"source\" [ngForTrackBy]=\"sourceTrackBy || trackBy\" let-i=\"index\" let-l=\"last\">\n                        <li class=\"p-picklist-droppoint\" *ngIf=\"dragdrop\" (dragover)=\"onDragOver($event, i, SOURCE_LIST)\" (drop)=\"onDrop($event, i, SOURCE_LIST)\" (dragleave)=\"onDragLeave($event, SOURCE_LIST)\"\n                        [ngClass]=\"{'p-picklist-droppoint-highlight': (i === dragOverItemIndexSource)}\" [style.display]=\"isItemVisible(item, SOURCE_LIST) ? 'block' : 'none'\"></li>\n                        <li [ngClass]=\"{'p-picklist-item':true,'p-highlight':isSelected(item,selectedItemsSource),'p-disabled': disabled}\" pRipple\n                            (click)=\"onItemClick($event,item,selectedItemsSource,onSourceSelect)\" (dblclick)=\"onSourceItemDblClick()\" (touchend)=\"onItemTouchEnd($event)\" (keydown)=\"onItemKeydown($event,item,selectedItemsSource,onSourceSelect)\"\n                            [style.display]=\"isItemVisible(item, SOURCE_LIST) ? 'block' : 'none'\" tabindex=\"0\" role=\"option\" [attr.aria-selected]=\"isSelected(item, selectedItemsSource)\"\n                            [attr.draggable]=\"dragdrop\" (dragstart)=\"onDragStart($event, i, SOURCE_LIST)\" (dragend)=\"onDragEnd($event)\">\n                            <ng-container *ngTemplateOutlet=\"itemTemplate; context: {$implicit: item, index: i}\"></ng-container>\n                        </li>\n                        <li class=\"p-picklist-droppoint\" *ngIf=\"dragdrop&&l\" (dragover)=\"onDragOver($event, i + 1, SOURCE_LIST)\" (drop)=\"onDrop($event, i + 1, SOURCE_LIST)\" (dragleave)=\"onDragLeave($event, SOURCE_LIST)\"\n                        [ngClass]=\"{'p-picklist-droppoint-highlight': (i + 1 === dragOverItemIndexSource)}\"></li>\n                    </ng-template>\n                    <ng-container *ngIf=\"(source == null || source.length === 0) && emptyMessageSourceTemplate\">\n                        <li class=\"p-picklist-empty-message\">\n                            <ng-container *ngTemplateOutlet=\"emptyMessageSourceTemplate\"></ng-container>\n                        </li>\n                    </ng-container>\n                </ul>\n            </div>\n            <div class=\"p-picklist-buttons p-picklist-transfer-buttons\">\n                <button type=\"button\" pButton pRipple icon=\"pi pi-angle-right\" [disabled]=\"disabled\" (click)=\"moveRight()\"></button>\n                <button type=\"button\" pButton pRipple icon=\"pi pi-angle-double-right\" [disabled]=\"disabled\" (click)=\"moveAllRight()\"></button>\n                <button type=\"button\" pButton pRipple icon=\"pi pi-angle-left\" [disabled]=\"disabled\" (click)=\"moveLeft()\"></button>\n                <button type=\"button\" pButton pRipple icon=\"pi pi-angle-double-left\" [disabled]=\"disabled\" (click)=\"moveAllLeft()\"></button>\n            </div>\n            <div class=\"p-picklist-list-wrapper p-picklist-target-wrapper\">\n                <div class=\"p-picklist-header\" *ngIf=\"targetHeader\">\n                    <div class=\"p-picklist-title\" *ngIf=\"targetHeader\">{{targetHeader}}</div>\n                </div>\n                <div class=\"p-picklist-filter-container\" *ngIf=\"filterBy && showTargetFilter !== false\">\n                    <div class=\"p-picklist-filter\">\n                        <input #targetFilter type=\"text\" role=\"textbox\" (keyup)=\"onFilter($event,target,TARGET_LIST)\" class=\"p-picklist-filter-input p-inputtext p-component\" [disabled]=\"disabled\" [attr.placeholder]=\"targetFilterPlaceholder\" [attr.aria-label]=\"ariaTargetFilterLabel\">\n                        <span class=\"p-picklist-filter-icon pi pi-search\"></span>\n                    </div>\n                </div>\n                <ul #targetlist class=\"p-picklist-list p-picklist-target\" [ngClass]=\"{'p-picklist-list-highlight': listHighlightTarget}\"\n                    [ngStyle]=\"targetStyle\" (dragover)=\"onListMouseMove($event,TARGET_LIST)\" (dragleave)=\"onListDragLeave()\" (drop)=\"onListDrop($event,TARGET_LIST)\" role=\"listbox\" aria-multiselectable=\"multiple\">\n                    <ng-template ngFor let-item [ngForOf]=\"target\" [ngForTrackBy]=\"targetTrackBy || trackBy\" let-i=\"index\" let-l=\"last\">\n                        <li class=\"p-picklist-droppoint\" *ngIf=\"dragdrop\" (dragover)=\"onDragOver($event, i, TARGET_LIST)\" (drop)=\"onDrop($event, i, TARGET_LIST)\" (dragleave)=\"onDragLeave($event, TARGET_LIST)\"\n                        [ngClass]=\"{'p-picklist-droppoint-highlight': (i === dragOverItemIndexTarget)}\" [style.display]=\"isItemVisible(item, TARGET_LIST) ? 'block' : 'none'\"></li>\n                        <li [ngClass]=\"{'p-picklist-item':true,'p-highlight':isSelected(item,selectedItemsTarget), 'p-disabled': disabled}\" pRipple\n                            (click)=\"onItemClick($event,item,selectedItemsTarget,onTargetSelect)\" (dblclick)=\"onTargetItemDblClick()\" (touchend)=\"onItemTouchEnd($event)\" (keydown)=\"onItemKeydown($event,item,selectedItemsTarget,onTargetSelect)\"\n                            [style.display]=\"isItemVisible(item, TARGET_LIST) ? 'block' : 'none'\" tabindex=\"0\" role=\"option\" [attr.aria-selected]=\"isSelected(item, selectedItemsTarget)\"\n                            [attr.draggable]=\"dragdrop\" (dragstart)=\"onDragStart($event, i, TARGET_LIST)\" (dragend)=\"onDragEnd($event)\">\n                            <ng-container *ngTemplateOutlet=\"itemTemplate; context: {$implicit: item, index: i}\"></ng-container>\n                        </li>\n                        <li class=\"p-picklist-droppoint\" *ngIf=\"dragdrop&&l\" (dragover)=\"onDragOver($event, i + 1, TARGET_LIST)\" (drop)=\"onDrop($event, i + 1, TARGET_LIST)\" (dragleave)=\"onDragLeave($event, TARGET_LIST)\"\n                        [ngClass]=\"{'p-picklist-droppoint-highlight': (i + 1 === dragOverItemIndexTarget)}\"></li>\n                    </ng-template>\n                    <ng-container *ngIf=\"(target == null || target.length === 0) && emptyMessageTargetTemplate\">\n                        <li class=\"p-picklist-empty-message\">\n                            <ng-container *ngTemplateOutlet=\"emptyMessageTargetTemplate\"></ng-container>\n                        </li>\n                    </ng-container>\n                </ul>\n            </div>\n            <div class=\"p-picklist-buttons p-picklist-target-controls\" *ngIf=\"showTargetControls\">\n                <button type=\"button\" pButton pRipple icon=\"pi pi-angle-up\" [disabled]=\"disabled\" (click)=\"moveUp(targetlist,target,selectedItemsTarget,onTargetReorder)\"></button>\n                <button type=\"button\" pButton pRipple icon=\"pi pi-angle-double-up\" [disabled]=\"disabled\" (click)=\"moveTop(targetlist,target,selectedItemsTarget,onTargetReorder)\"></button>\n                <button type=\"button\" pButton pRipple icon=\"pi pi-angle-down\" [disabled]=\"disabled\" (click)=\"moveDown(targetlist,target,selectedItemsTarget,onTargetReorder)\"></button>\n                <button type=\"button\" pButton pRipple icon=\"pi pi-angle-double-down\" [disabled]=\"disabled\" (click)=\"moveBottom(targetlist,target,selectedItemsTarget,onTargetReorder)\"></button>\n            </div>\n        </div>\n    `,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['./picklist.css']\n})\nexport class PickList implements AfterViewChecked,AfterContentInit {\n\n    @Input() source: any[];\n\n    @Input() target: any[];\n\n    @Input() sourceHeader: string;\n\n    @Input() targetHeader: string;\n\n    @Input() responsive: boolean;\n\n    @Input() filterBy: string;\n\n    @Input() filterLocale: string;\n\n    @Input() trackBy: Function = (index: number, item: any) => item;\n\n    @Input() sourceTrackBy: Function;\n\n    @Input() targetTrackBy: Function;\n\n    @Input() showSourceFilter: boolean = true;\n\n    @Input() showTargetFilter: boolean = true;\n\n    @Input() metaKeySelection: boolean = true;\n\n    @Input() dragdrop: boolean;\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() sourceStyle: any;\n\n    @Input() targetStyle: any;\n\n    @Input() showSourceControls: boolean = true;\n\n    @Input() showTargetControls: boolean = true;\n\n    @Input() sourceFilterPlaceholder: string;\n\n    @Input() targetFilterPlaceholder: string;\n\n    @Input() disabled: boolean = false;\n\n    @Input() ariaSourceFilterLabel: string;\n\n    @Input() ariaTargetFilterLabel: string;\n\n    @Input() filterMatchMode: string = \"contains\";\n\n    @Output() onMoveToSource: EventEmitter<any> = new EventEmitter();\n\n    @Output() onMoveAllToSource: EventEmitter<any> = new EventEmitter();\n\n    @Output() onMoveAllToTarget: EventEmitter<any> = new EventEmitter();\n\n    @Output() onMoveToTarget: EventEmitter<any> = new EventEmitter();\n\n    @Output() onSourceReorder: EventEmitter<any> = new EventEmitter();\n\n    @Output() onTargetReorder: EventEmitter<any> = new EventEmitter();\n\n    @Output() onSourceSelect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onTargetSelect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onSourceFilter: EventEmitter<any> = new EventEmitter();\n\n    @Output() onTargetFilter: EventEmitter<any> = new EventEmitter();\n\n    @ViewChild('sourcelist') listViewSourceChild: ElementRef;\n\n    @ViewChild('targetlist') listViewTargetChild: ElementRef;\n\n    @ViewChild('sourceFilter') sourceFilterViewChild: ElementRef;\n\n    @ViewChild('targetFilter') targetFilterViewChild: ElementRef;\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\n\n    public itemTemplate: TemplateRef<any>;\n\n    public visibleOptionsSource: any[];\n\n    public visibleOptionsTarget: any[];\n\n    selectedItemsSource: any[] = [];\n\n    selectedItemsTarget: any[] = [];\n\n    reorderedListElement: any;\n\n    draggedItemIndexSource: number;\n\n    draggedItemIndexTarget: number;\n\n    dragOverItemIndexSource: number;\n\n    dragOverItemIndexTarget: number;\n\n    dragging: boolean;\n\n    movedUp: boolean;\n\n    movedDown: boolean;\n\n    itemTouched: boolean;\n\n    filterValueSource: string;\n\n    filterValueTarget: string;\n\n    fromListType: number;\n\n    toListType: number;\n\n    onListItemDroppoint: boolean;\n\n    listHighlightTarget: boolean;\n\n    listHighlightSource: boolean;\n\n    emptyMessageSourceTemplate: TemplateRef<any>;\n\n    emptyMessageTargetTemplate: TemplateRef<any>;\n\n    readonly SOURCE_LIST = -1;\n\n    readonly TARGET_LIST = 1;\n\n    constructor(public el: ElementRef, public cd: ChangeDetectorRef) {}\n\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch(item.getType()) {\n                case 'item':\n                    this.itemTemplate = item.template;\n                break;\n\n                case 'emptymessagesource':\n                    this.emptyMessageSourceTemplate = item.template;\n                break;\n\n                case 'emptymessagetarget':\n                    this.emptyMessageTargetTemplate = item.template;\n                    break;\n\n                default:\n                    this.itemTemplate = item.template;\n                break;\n            }\n        });\n    }\n\n    ngAfterViewChecked() {\n        if (this.movedUp||this.movedDown) {\n            let listItems = DomHandler.find(this.reorderedListElement, 'li.p-highlight');\n            let listItem;\n\n            if (this.movedUp)\n                listItem = listItems[0];\n            else\n                listItem = listItems[listItems.length - 1];\n\n            DomHandler.scrollInView(this.reorderedListElement, listItem);\n            this.movedUp = false;\n            this.movedDown = false;\n            this.reorderedListElement = null;\n        }\n    }\n\n    onItemClick(event, item: any, selectedItems: any[], callback: EventEmitter<any>) {\n        if (this.disabled) {\n            return;\n        }\n\n        let index = this.findIndexInSelection(item,selectedItems);\n        let selected = (index != -1);\n        let metaSelection = this.itemTouched ? false : this.metaKeySelection;\n\n        if (metaSelection) {\n            let metaKey = (event.metaKey||event.ctrlKey||event.shiftKey);\n\n            if (selected && metaKey) {\n                selectedItems.splice(index, 1);\n            }\n            else {\n                if (!metaKey) {\n                    selectedItems.length = 0;\n                }\n                selectedItems.push(item);\n            }\n        }\n        else {\n            if (selected)\n                selectedItems.splice(index, 1);\n            else\n                selectedItems.push(item);\n        }\n\n        callback.emit({originalEvent: event, items: selectedItems});\n\n        this.itemTouched = false;\n    }\n\n    onSourceItemDblClick() {\n        if (this.disabled) {\n            return;\n        }\n\n        this.moveRight();\n    }\n\n    onTargetItemDblClick() {\n        if (this.disabled) {\n            return;\n        }\n\n        this.moveLeft();\n    }\n\n    onFilter(event: KeyboardEvent, data: any[], listType: number) {\n        let query = ((<HTMLInputElement> event.target).value.trim() as any).toLocaleLowerCase(this.filterLocale);\n        this.filter(query, data, listType);\n    }\n\n    filter(query: string, data: any[], listType: number) {\n        let searchFields = this.filterBy.split(',');\n\n        if (listType === this.SOURCE_LIST) {\n            this.filterValueSource = query;\n            this.visibleOptionsSource = FilterUtils.filter(data, searchFields, this.filterValueSource, this.filterMatchMode, this.filterLocale);\n            this.onSourceFilter.emit({query: this.filterValueSource, value: this.visibleOptionsSource});\n        }\n        else if (listType === this.TARGET_LIST) {\n            this.filterValueTarget = query;\n            this.visibleOptionsTarget = FilterUtils.filter(data, searchFields, this.filterValueTarget, this.filterMatchMode, this.filterLocale);\n            this.onTargetFilter.emit({query: this.filterValueTarget, value: this.visibleOptionsTarget});\n        }\n    }\n\n    isItemVisible(item: any, listType: number): boolean {\n        if (listType == this.SOURCE_LIST)\n            return this.isVisibleInList(this.visibleOptionsSource, item, this.filterValueSource);\n        else\n            return this.isVisibleInList(this.visibleOptionsTarget, item, this.filterValueTarget);\n    }\n\n    isVisibleInList(data: any[], item: any, filterValue: string): boolean {\n        if (filterValue && filterValue.trim().length) {\n            for(let i = 0; i < data.length; i++) {\n                if (item == data[i]) {\n                    return true;\n                }\n            }\n        }\n        else {\n            return true;\n        }\n    }\n\n    onItemTouchEnd(event) {\n        if (this.disabled) {\n            return;\n        }\n\n        this.itemTouched = true;\n    }\n\n    private sortByIndexInList(items: any[], list: any) {\n        return items.sort((item1, item2) =>\n            this.findIndexInList(item1, list) - this.findIndexInList(item2, list));\n    }\n\n    moveUp(listElement, list, selectedItems, callback) {\n        if (selectedItems && selectedItems.length) {\n            selectedItems = this.sortByIndexInList(selectedItems, list);\n            for(let i = 0; i < selectedItems.length; i++) {\n                let selectedItem = selectedItems[i];\n                let selectedItemIndex: number = this.findIndexInList(selectedItem, list);\n\n                if (selectedItemIndex != 0) {\n                    let movedItem = list[selectedItemIndex];\n                    let temp = list[selectedItemIndex-1];\n                    list[selectedItemIndex-1] = movedItem;\n                    list[selectedItemIndex] = temp;\n                }\n                else {\n                    break;\n                }\n            }\n\n            this.movedUp = true;\n            this.reorderedListElement = listElement;\n            callback.emit({items: selectedItems});\n        }\n    }\n\n    moveTop(listElement, list, selectedItems, callback) {\n        if (selectedItems && selectedItems.length) {\n            selectedItems = this.sortByIndexInList(selectedItems, list);\n            for(let i = 0; i < selectedItems.length; i++) {\n                let selectedItem = selectedItems[i];\n                let selectedItemIndex: number = this.findIndexInList(selectedItem, list);\n\n                if (selectedItemIndex != 0) {\n                    let movedItem = list.splice(selectedItemIndex,1)[0];\n                    list.unshift(movedItem);\n                }\n                else {\n                    break;\n                }\n            }\n\n            listElement.scrollTop = 0;\n            callback.emit({items: selectedItems});\n        }\n    }\n\n    moveDown(listElement, list, selectedItems, callback) {\n        if (selectedItems && selectedItems.length) {\n            selectedItems = this.sortByIndexInList(selectedItems, list);\n            for(let i = selectedItems.length - 1; i >= 0; i--) {\n                let selectedItem = selectedItems[i];\n                let selectedItemIndex: number = this.findIndexInList(selectedItem, list);\n\n                if (selectedItemIndex != (list.length - 1)) {\n                    let movedItem = list[selectedItemIndex];\n                    let temp = list[selectedItemIndex+1];\n                    list[selectedItemIndex+1] = movedItem;\n                    list[selectedItemIndex] = temp;\n                }\n                else {\n                    break;\n                }\n            }\n\n            this.movedDown = true;\n            this.reorderedListElement = listElement;\n            callback.emit({items: selectedItems});\n        }\n    }\n\n    moveBottom(listElement, list, selectedItems, callback) {\n        if (selectedItems && selectedItems.length) {\n            selectedItems = this.sortByIndexInList(selectedItems, list);\n            for(let i = selectedItems.length - 1; i >= 0; i--) {\n                let selectedItem = selectedItems[i];\n                let selectedItemIndex: number = this.findIndexInList(selectedItem, list);\n\n                if (selectedItemIndex != (list.length - 1)) {\n                    let movedItem = list.splice(selectedItemIndex,1)[0];\n                    list.push(movedItem);\n                }\n                else {\n                    break;\n                }\n            }\n\n            listElement.scrollTop = listElement.scrollHeight;\n            callback.emit({items: selectedItems});\n        }\n    }\n\n    moveRight() {\n        if (this.selectedItemsSource && this.selectedItemsSource.length) {\n            for(let i = 0; i < this.selectedItemsSource.length; i++) {\n                let selectedItem = this.selectedItemsSource[i];\n                if (this.findIndexInList(selectedItem, this.target) == -1) {\n                    this.target.push(this.source.splice(this.findIndexInList(selectedItem, this.source),1)[0]);\n                }\n            }\n            this.onMoveToTarget.emit({\n                items: this.selectedItemsSource\n            });\n            this.selectedItemsSource = [];\n\n            if (this.filterValueTarget) {\n                this.filter(this.filterValueTarget, this.target, this.TARGET_LIST);\n            }\n        }\n    }\n\n    moveAllRight() {\n        if (this.source) {\n            let movedItems = [];\n\n            for(let i = 0; i < this.source.length; i++) {\n                if (this.isItemVisible(this.source[i], this.SOURCE_LIST)) {\n                    let removedItem = this.source.splice(i, 1)[0];\n                    this.target.push(removedItem);\n                    movedItems.push(removedItem);\n                    i--;\n                }\n            }\n\n            this.onMoveToTarget.emit({\n                items: movedItems\n            });\n\n            this.onMoveAllToTarget.emit({\n                items: movedItems\n            });\n\n            this.selectedItemsSource = [];\n\n            if (this.filterValueTarget) {\n                this.filter(this.filterValueTarget, this.target, this.TARGET_LIST);\n            }\n        }\n    }\n\n    moveLeft() {\n        if (this.selectedItemsTarget && this.selectedItemsTarget.length) {\n            for(let i = 0; i < this.selectedItemsTarget.length; i++) {\n                let selectedItem = this.selectedItemsTarget[i];\n                if (this.findIndexInList(selectedItem, this.source) == -1) {\n                    this.source.push(this.target.splice(this.findIndexInList(selectedItem, this.target),1)[0]);\n                }\n            }\n            this.onMoveToSource.emit({\n                items: this.selectedItemsTarget\n            });\n\n            this.selectedItemsTarget = [];\n\n            if (this.filterValueSource) {\n                this.filter(this.filterValueSource, this.source, this.SOURCE_LIST);\n            }\n        }\n    }\n\n    moveAllLeft() {\n        if (this.target) {\n            let movedItems = [];\n\n            for(let i = 0; i < this.target.length; i++) {\n                if (this.isItemVisible(this.target[i], this.TARGET_LIST)) {\n                    let removedItem = this.target.splice(i, 1)[0];\n                    this.source.push(removedItem);\n                    movedItems.push(removedItem);\n                    i--;\n                }\n            }\n\n            this.onMoveToSource.emit({\n                items: movedItems\n            });\n\n            this.onMoveAllToSource.emit({\n                items: movedItems\n            });\n\n            this.selectedItemsTarget = [];\n\n            if (this.filterValueSource) {\n                this.filter(this.filterValueSource, this.source, this.SOURCE_LIST);\n            }\n        }\n    }\n\n    isSelected(item: any, selectedItems: any[]) {\n        return this.findIndexInSelection(item, selectedItems) != -1;\n    }\n\n    findIndexInSelection(item: any, selectedItems: any[]): number {\n        return this.findIndexInList(item, selectedItems);\n    }\n\n    findIndexInList(item: any, list: any): number {\n        let index: number = -1;\n\n        if (list) {\n            for(let i = 0; i < list.length; i++) {\n                if (list[i] == item) {\n                    index = i;\n                    break;\n                }\n            }\n        }\n\n        return index;\n    }\n\n    onDragStart(event: DragEvent, index: number, listType: number) {\n        event.dataTransfer.setData('text', 'b');    // For firefox\n        (<HTMLLIElement> event.target).blur();\n        this.dragging = true;\n        this.fromListType = listType;\n\n        if (listType === this.SOURCE_LIST)\n            this.draggedItemIndexSource = index;\n        else\n            this.draggedItemIndexTarget = index;\n    }\n\n    onDragOver(event: DragEvent, index: number, listType: number) {\n        if (this.dragging) {\n            if (listType == this.SOURCE_LIST) {\n                if (this.draggedItemIndexSource !== index && this.draggedItemIndexSource + 1 !== index || (this.fromListType === this.TARGET_LIST)) {\n                    this.dragOverItemIndexSource = index;\n                    event.preventDefault();\n                }\n            }\n            else {\n                if (this.draggedItemIndexTarget !== index && this.draggedItemIndexTarget + 1 !== index || (this.fromListType === this.SOURCE_LIST)) {\n                    this.dragOverItemIndexTarget = index;\n                    event.preventDefault();\n                }\n            }\n            this.onListItemDroppoint = true;\n        }\n    }\n\n    onDragLeave(event: DragEvent, listType: number) {\n        this.dragOverItemIndexSource = null;\n        this.dragOverItemIndexTarget = null;\n        this.onListItemDroppoint = false;\n    }\n\n    onDrop(event: DragEvent, index: number, listType: number) {\n        if (this.onListItemDroppoint) {\n            if (listType === this.SOURCE_LIST) {\n                if (this.fromListType === this.TARGET_LIST) {\n                    this.insert(this.draggedItemIndexTarget, this.target, index, this.source, this.onMoveToSource);\n                }\n                else {\n                    ObjectUtils.reorderArray(this.source, this.draggedItemIndexSource, (this.draggedItemIndexSource > index) ? index : (index === 0) ? 0 : index - 1);\n                    this.onSourceReorder.emit({items: this.source[this.draggedItemIndexSource]});\n                }\n\n                this.dragOverItemIndexSource = null;\n            }\n            else {\n                if (this.fromListType === this.SOURCE_LIST) {\n                    this.insert(this.draggedItemIndexSource, this.source, index, this.target, this.onMoveToTarget);\n                }\n                else {\n                    ObjectUtils.reorderArray(this.target, this.draggedItemIndexTarget, (this.draggedItemIndexTarget > index) ? index : (index === 0) ? 0 : index - 1);\n                    this.onTargetReorder.emit({items: this.target[this.draggedItemIndexTarget]});\n                }\n\n                this.dragOverItemIndexTarget = null;\n            }\n\n            this.listHighlightTarget = false;\n            this.listHighlightSource = false;\n            event.preventDefault();\n        }\n    }\n\n    onDragEnd(event: DragEvent) {\n        this.dragging = false;\n    }\n\n    onListDrop(event: DragEvent, listType:  number) {\n        if (!this.onListItemDroppoint) {\n            if (listType === this.SOURCE_LIST) {\n                if (this.fromListType === this.TARGET_LIST) {\n                    this.insert(this.draggedItemIndexTarget, this.target, null, this.source, this.onMoveToSource);\n                }\n            }\n            else {\n                if (this.fromListType === this.SOURCE_LIST) {\n                    this.insert(this.draggedItemIndexSource, this.source, null, this.target, this.onMoveToTarget);\n                }\n            }\n\n            this.listHighlightTarget = false;\n            this.listHighlightSource = false;\n            event.preventDefault();\n        }\n    }\n\n    insert(fromIndex, fromList, toIndex, toList, callback) {\n        const elementtomove = fromList[fromIndex];\n\n        if (toIndex === null)\n            toList.push(fromList.splice(fromIndex, 1)[0]);\n        else\n            toList.splice(toIndex, 0, fromList.splice(fromIndex, 1)[0]);\n\n        callback.emit({\n            items: [elementtomove]\n        });\n    }\n\n    onListMouseMove(event: MouseEvent, listType: number) {\n        if (this.dragging) {\n            let moveListType = (listType == 0 ? this.listViewSourceChild : this.listViewTargetChild);\n            let offsetY = moveListType.nativeElement.getBoundingClientRect().top + document.body.scrollTop;\n            let bottomDiff = (offsetY + moveListType.nativeElement.clientHeight) - event.pageY;\n            let topDiff = (event.pageY - offsetY);\n\n            if (bottomDiff < 25 && bottomDiff > 0)\n                moveListType.nativeElement.scrollTop += 15;\n            else if (topDiff < 25 && topDiff > 0)\n                moveListType.nativeElement.scrollTop -= 15;\n\n            if (listType === this.SOURCE_LIST) {\n                if (this.fromListType === this.TARGET_LIST)\n                    this.listHighlightSource = true;\n            }\n            else {\n                if (this.fromListType === this.SOURCE_LIST)\n                    this.listHighlightTarget = true;\n            }\n\n            event.preventDefault();\n        }\n    }\n\n    onListDragLeave() {\n        this.listHighlightTarget = false;\n        this.listHighlightSource = false;\n    }\n\n    resetFilter() {\n        this.visibleOptionsSource = null;\n        this.filterValueSource = null;\n        this.visibleOptionsTarget = null;\n        this.filterValueTarget = null;\n\n        (<HTMLInputElement> this.sourceFilterViewChild.nativeElement).value = '';\n        (<HTMLInputElement> this.targetFilterViewChild.nativeElement).value = '';\n    }\n\n    onItemKeydown(event: KeyboardEvent, item: any, selectedItems: any[], callback: EventEmitter<any>) {\n        let listItem = <HTMLLIElement> event.currentTarget;\n\n        switch(event.which) {\n            //down\n            case 40:\n                var nextItem = this.findNextItem(listItem);\n                if (nextItem) {\n                    nextItem.focus();\n                }\n\n                event.preventDefault();\n            break;\n\n            //up\n            case 38:\n                var prevItem = this.findPrevItem(listItem);\n                if (prevItem) {\n                    prevItem.focus();\n                }\n\n                event.preventDefault();\n            break;\n\n            //enter\n            case 13:\n                this.onItemClick(event, item, selectedItems, callback);\n                event.preventDefault();\n            break;\n        }\n    }\n\n    findNextItem(item) {\n        let nextItem = item.nextElementSibling;\n\n        if (nextItem)\n            return !DomHandler.hasClass(nextItem, 'p-picklist-item') || DomHandler.isHidden(nextItem) ? this.findNextItem(nextItem) : nextItem;\n        else\n            return null;\n    }\n\n    findPrevItem(item) {\n        let prevItem = item.previousElementSibling;\n\n        if (prevItem)\n            return !DomHandler.hasClass(prevItem, 'p-picklist-item') || DomHandler.isHidden(prevItem) ? this.findPrevItem(prevItem) : prevItem;\n        else\n            return null;\n    }\n}\n\n@NgModule({\n    imports: [CommonModule,ButtonModule,SharedModule,RippleModule],\n    exports: [PickList,SharedModule],\n    declarations: [PickList]\n})\nexport class PickListModule { }\n"]}