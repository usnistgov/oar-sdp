{"version":3,"sources":["ng://primeng/tristatecheckbox/tristatecheckbox.ts"],"names":["TRISTATECHECKBOX_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","TriStateCheckbox","multi","cd","this","onChange","EventEmitter","onModelChange","onModelTouched","prototype","onClick","event","input","disabled","readonly","toggle","focus","onKeydown","keyCode","preventDefault","onKeyup","value","undefined","emit","originalEvent","onFocus","onBlur","registerOnChange","fn","registerOnTouched","writeValue","markForCheck","setDisabledState","ChangeDetectorRef","__decorate","Input","Output","Component","selector","template","providers","changeDetection","ChangeDetectionStrategy","Default","TriStateCheckboxModule","NgModule","imports","CommonModule","exports","declarations"],"mappings":"oxBAIaA,EAAuC,CAClDC,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,YAAW,WAAM,OAAAC,KAC9BC,OAAO,GAsBTD,EAAA,WAEI,SAAAA,EAAoBE,GAAAC,KAAAD,GAAAA,EAoBVC,KAAAC,SAA8B,IAAIC,EAAAA,aAM5CF,KAAAG,cAA0B,aAE1BH,KAAAI,eAA2B,aA+D/B,OA7DIP,EAAAQ,UAAAC,QAAA,SAAQC,EAAcC,GACbR,KAAKS,UAAaT,KAAKU,WACxBV,KAAKW,OAAOJ,GACZP,KAAKY,OAAQ,EACbJ,EAAMI,UAIdf,EAAAQ,UAAAQ,UAAA,SAAUN,GACe,IAAjBA,EAAMO,SACNP,EAAMQ,kBAIdlB,EAAAQ,UAAAW,QAAA,SAAQT,GACiB,IAAjBA,EAAMO,SAAkBd,KAAKU,WAC7BV,KAAKW,OAAOJ,GACZA,EAAMQ,mBAIdlB,EAAAQ,UAAAM,OAAA,SAAOJ,GACe,MAAdP,KAAKiB,OAA+BC,MAAdlB,KAAKiB,MAC3BjB,KAAKiB,OAAQ,EACM,GAAdjB,KAAKiB,MACVjB,KAAKiB,OAAQ,EACM,GAAdjB,KAAKiB,QACVjB,KAAKiB,MAAQ,MAEjBjB,KAAKG,cAAcH,KAAKiB,OACxBjB,KAAKC,SAASkB,KAAK,CACfC,cAAeb,EACfU,MAAOjB,KAAKiB,SAIpBpB,EAAAQ,UAAAgB,QAAA,WACIrB,KAAKY,OAAQ,GAGjBf,EAAAQ,UAAAiB,OAAA,WACItB,KAAKY,OAAQ,EACbZ,KAAKI,kBAGTP,EAAAQ,UAAAkB,iBAAA,SAAiBC,GACbxB,KAAKG,cAAgBqB,GAGzB3B,EAAAQ,UAAAoB,kBAAA,SAAkBD,GACdxB,KAAKI,eAAiBoB,GAG1B3B,EAAAQ,UAAAqB,WAAA,SAAWT,GACPjB,KAAKiB,MAAQA,EACbjB,KAAKD,GAAG4B,gBAGZ9B,EAAAQ,UAAAuB,iBAAA,SAAiBnB,GACbT,KAAKS,SAAWA,4CAzFIoB,EAAAA,qBAEfC,EAAA,CAARC,EAAAA,wCAEQD,EAAA,CAARC,EAAAA,oCAEQD,EAAA,CAARC,EAAAA,8CAEQD,EAAA,CAARC,EAAAA,wCAEQD,EAAA,CAARC,EAAAA,uCAEQD,EAAA,CAARC,EAAAA,qCAEQD,EAAA,CAARC,EAAAA,0CAEQD,EAAA,CAARC,EAAAA,qCAEQD,EAAA,CAARC,EAAAA,wCAESD,EAAA,CAATE,EAAAA,yCAtBQnC,EAAgBiC,EAAA,CAnB5BG,EAAAA,UAAU,CACPC,SAAU,qBACVC,SAAU,mtCAcVC,UAAW,CAAC5C,GACZ6C,gBAAiBC,EAAAA,wBAAwBC,WAEhC1C,GAAb,gBAoGA,SAAA2C,KAAsC,OAAzBA,EAAsBV,EAAA,CALlCW,EAAAA,SAAS,CACNC,QAAS,CAACC,EAAAA,cACVC,QAAS,CAAC/C,GACVgD,aAAc,CAAChD,MAEN2C","sourcesContent":["import {NgModule,Component,Input,Output,EventEmitter,forwardRef,ChangeDetectorRef,ChangeDetectionStrategy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\n\nexport const TRISTATECHECKBOX_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => TriStateCheckbox),\n  multi: true\n};\n\n@Component({\n    selector: 'p-triStateCheckbox',\n    template: `\n        <div [ngStyle]=\"style\" [ngClass]=\"{'ui-chkbox ui-tristatechkbox ui-widget': true,'ui-chkbox-readonly': readonly}\" [class]=\"styleClass\">\n            <div class=\"ui-helper-hidden-accessible\">\n                <input #input type=\"text\" [attr.id]=\"inputId\" [name]=\"name\" [attr.tabindex]=\"tabindex\" [readonly]=\"readonly\" [disabled]=\"disabled\" (keyup)=\"onKeyup($event)\" (keydown)=\"onKeydown($event)\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" [attr.aria-labelledby]=\"ariaLabelledBy\">\n            </div>\n            <div class=\"ui-chkbox-box ui-widget ui-corner-all ui-state-default\" (click)=\"onClick($event,input)\"  role=\"checkbox\" [attr.aria-checked]=\"value === true\"\n                [ngClass]=\"{'ui-state-active':value!=null,'ui-state-disabled':disabled,'ui-state-focus':focus}\">\n                <span class=\"ui-chkbox-icon pi ui-clickable\" [ngClass]=\"{'pi-check':value==true,'pi-times':value==false}\"></span>\n            </div>\n        </div>\n        <label class=\"ui-chkbox-label\" (click)=\"onClick($event,input)\"\n               [ngClass]=\"{'ui-label-active':value!=null, 'ui-label-disabled':disabled, 'ui-label-focus':focus}\"\n               *ngIf=\"label\" [attr.for]=\"inputId\">{{label}}</label>\n    `,\n    providers: [TRISTATECHECKBOX_VALUE_ACCESSOR],\n    changeDetection: ChangeDetectionStrategy.Default\n})\nexport class TriStateCheckbox implements ControlValueAccessor  {\n\n    constructor(private cd: ChangeDetectorRef) {}\n\n    @Input() disabled: boolean;\n\n    @Input() name: string;\n\n    @Input() ariaLabelledBy: string;\n\n    @Input() tabindex: number;\n\n    @Input() inputId: string;\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() label: string;\n\n    @Input() readonly: boolean;\n\n    @Output() onChange: EventEmitter<any> = new EventEmitter();\n\n    focus: boolean;\n\n    value: any;\n\n    onModelChange: Function = () => {};\n\n    onModelTouched: Function = () => {};\n\n    onClick(event: Event, input: HTMLInputElement) {\n        if (!this.disabled && !this.readonly) {\n            this.toggle(event);\n            this.focus = true;\n            input.focus();\n        }\n    }\n\n    onKeydown(event: KeyboardEvent) {\n        if (event.keyCode == 32) {\n            event.preventDefault();\n        }\n    }\n\n    onKeyup(event: KeyboardEvent) {\n        if (event.keyCode == 32 && !this.readonly) {\n            this.toggle(event);\n            event.preventDefault();\n        }\n    }\n\n    toggle(event: Event) {\n        if (this.value == null || this.value == undefined)\n            this.value = true;\n        else if (this.value == true)\n            this.value = false;\n        else if (this.value == false)\n            this.value = null;\n\n        this.onModelChange(this.value);\n        this.onChange.emit({\n            originalEvent: event,\n            value: this.value\n        })\n    }\n\n    onFocus() {\n        this.focus = true;\n    }\n\n    onBlur() {\n        this.focus = false;\n        this.onModelTouched();\n    }\n\n    registerOnChange(fn: Function): void {\n        this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn: Function): void {\n        this.onModelTouched = fn;\n    }\n\n    writeValue(value: any) : void {\n        this.value = value;\n        this.cd.markForCheck();\n    }\n\n    setDisabledState(disabled: boolean): void {\n        this.disabled = disabled;\n    }\n}\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [TriStateCheckbox],\n    declarations: [TriStateCheckbox]\n})\nexport class TriStateCheckboxModule { }\n"]}