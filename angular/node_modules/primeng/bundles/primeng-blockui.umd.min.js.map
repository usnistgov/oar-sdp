{"version":3,"sources":["ng://primeng/blockui/blockui.ts"],"names":["BlockUI","el","this","autoZIndex","baseZIndex","Object","defineProperty","prototype","_blocked","val","mask","nativeElement","block","unblock","ngAfterViewInit","target","getBlockableElement","appendChild","style","position","document","body","zIndex","String","DomHandler","zindex","ngOnDestroy","ElementRef","__decorate","Input","ViewChild","Component","selector","template","changeDetection","ChangeDetectionStrategy","Default","BlockUIModule","NgModule","imports","CommonModule","exports","declarations"],"mappings":"+vBAAAA,EAAA,WA2BI,SAAAA,EAAmBC,GAAAC,KAAAD,GAAAA,EAVVC,KAAAC,YAAsB,EAEtBD,KAAAE,WAAqB,EAsDlC,OA5CaC,OAAAC,eAAIN,EAAAO,UAAA,UAAO,KAAX,WACL,OAAOL,KAAKM,cAGhB,SAAYC,GACRP,KAAKM,SAAWC,EAEZP,KAAKQ,MAAQR,KAAKQ,KAAKC,gBACnBT,KAAKM,SACLN,KAAKU,QAELV,KAAKW,4CAIjBb,EAAAO,UAAAO,gBAAA,WACI,GAAIZ,KAAKa,SAAWb,KAAKa,OAAOC,oBAC5B,KAAM,0DAIdhB,EAAAO,UAAAK,MAAA,WACI,GAAIV,KAAKa,OAAQ,CACbb,KAAKa,OAAOC,sBAAsBC,YAAYf,KAAKQ,KAAKC,eACxD,IAAIO,EAAQhB,KAAKa,OAAOG,OAAO,GAC/BA,EAAMC,SAAW,WACjBjB,KAAKa,OAAOG,MAAQA,OAGpBE,SAASC,KAAKJ,YAAYf,KAAKQ,KAAKC,eAGpCT,KAAKC,aACLD,KAAKQ,KAAKC,cAAcO,MAAMI,OAASC,OAAOrB,KAAKE,cAAgBoB,EAAAA,WAAWC,UAItFzB,EAAAO,UAAAM,QAAA,WACIX,KAAKD,GAAGU,cAAcM,YAAYf,KAAKQ,KAAKC,gBAGhDX,EAAAO,UAAAmB,YAAA,WACIxB,KAAKW,oDA5Ccc,EAAAA,cAZdC,EAAA,CAARC,EAAAA,sCAEQD,EAAA,CAARC,EAAAA,0CAEQD,EAAA,CAARC,EAAAA,0CAEQD,EAAA,CAARC,EAAAA,0CAEkBD,EAAA,CAAlBE,EAAAA,UAAU,oCAMFF,EAAA,CAARC,EAAAA,qCAhBQ7B,EAAO4B,EAAA,CATnBG,EAAAA,UAAU,CACPC,SAAU,YACVC,SAAU,oPAKVC,gBAAiBC,EAAAA,wBAAwBC,WAEhCpC,GAbb,gBAgFA,SAAAqC,KAA6B,OAAhBA,EAAaT,EAAA,CALzBU,EAAAA,SAAS,CACNC,QAAS,CAACC,EAAAA,cACVC,QAAS,CAACzC,GACV0C,aAAc,CAAC1C,MAENqC","sourcesContent":["import {NgModule,Component,Input,AfterViewInit,OnDestroy,ElementRef,ViewChild,ChangeDetectionStrategy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {DomHandler} from 'primeng/dom';\n\n@Component({\n    selector: 'p-blockUI',\n    template: `\n        <div #mask [class]=\"styleClass\" [ngClass]=\"{'ui-blockui-document':!target, 'ui-blockui ui-widget-overlay': true}\" [ngStyle]=\"{display: blocked ? 'block' : 'none'}\">\n            <ng-content></ng-content>\n        </div>\n    `,\n    changeDetection: ChangeDetectionStrategy.Default\n})\nexport class BlockUI implements AfterViewInit,OnDestroy {\n\n    @Input() target: any;\n    \n    @Input() autoZIndex: boolean = true;\n    \n    @Input() baseZIndex: number = 0;\n    \n    @Input() styleClass: string;\n    \n    @ViewChild('mask') mask: ElementRef;\n    \n    _blocked: boolean;\n        \n    constructor(public el: ElementRef) {}\n    \n    @Input() get blocked(): boolean {\n        return this._blocked;\n    }\n    \n    set blocked(val: boolean) {\n        this._blocked = val;\n        \n        if (this.mask && this.mask.nativeElement) {\n            if (this._blocked)\n                this.block();\n            else\n                this.unblock();\n        }\n    }\n    \n    ngAfterViewInit() {\n        if (this.target && !this.target.getBlockableElement) {\n            throw 'Target of BlockUI must implement BlockableUI interface';\n        }\n    }\n        \n    block() {\n        if (this.target) {\n            this.target.getBlockableElement().appendChild(this.mask.nativeElement);\n            let style = this.target.style||{};\n            style.position = 'relative';\n            this.target.style = style;\n        }\n        else {\n            document.body.appendChild(this.mask.nativeElement);\n        }\n        \n        if (this.autoZIndex) {\n            this.mask.nativeElement.style.zIndex = String(this.baseZIndex + (++DomHandler.zindex));\n        }\n    }\n    \n    unblock() {\n        this.el.nativeElement.appendChild(this.mask.nativeElement);\n    }\n    \n    ngOnDestroy() {\n        this.unblock();\n    }\n}\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [BlockUI],\n    declarations: [BlockUI]\n})\nexport class BlockUIModule { }"]}