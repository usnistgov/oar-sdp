{"version":3,"sources":["../../src/app/components/menubar/menubar.ts"],"names":["MenubarSub","el","renderer","cd","this","autoZIndex","baseZIndex","leafClick","EventEmitter","menuHoverActive","Object","defineProperty","prototype","_parentActive","value","root","activeItem","onItemMouseEnter","event","item","disabled","mobileActive","preventDefault","onItemClick","url","routerLink","command","originalEvent","items","unbindDocumentClickListener","bindDocumentClickListener","onLeafClick","emit","_this","documentClickListener","nativeElement","contains","target","markForCheck","document","addEventListener","removeEventListener","ngOnDestroy","Component","args","selector","template","encapsulation","ViewEncapsulation","None","ElementRef","Renderer2","ChangeDetectorRef","Input","Output","Menubar","_autoDisplay","console","log","ngAfterContentInit","templates","forEach","getType","startTemplate","endTemplate","toggle","DomHandler","findSingle","style","zIndex","String","generateZIndex","bindOutsideClickListener","outsideClickListener","rootmenu","menubutton","unbindOutsideClickListener","changeDetection","ChangeDetectionStrategy","OnPush","ContentChildren","PrimeTemplate","ViewChild","NgModule","imports","CommonModule","RouterModule","RippleModule","exports","declarations"],"mappings":"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","sourcesContent":["import { NgModule, Component, ElementRef, Input, Renderer2, OnDestroy,ChangeDetectorRef, ChangeDetectionStrategy, ViewEncapsulation, AfterContentInit, ContentChildren, QueryList, TemplateRef, ViewChild, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DomHandler } from 'primeng/dom';\nimport { MenuItem, PrimeTemplate } from 'primeng/api';\nimport { RouterModule } from '@angular/router';\nimport { RippleModule } from 'primeng/ripple';  \n\n@Component({\n    selector: 'p-menubarSub',\n    template: `\n        <ul [ngClass]=\"{'p-submenu-list': !root, 'p-menubar-root-list': root}\">\n            <ng-template ngFor let-child [ngForOf]=\"(root ? item : item.items)\">\n                <li *ngIf=\"child.separator\" class=\"p-menu-separator\" [ngClass]=\"{'p-hidden': child.visible === false}\">\n                <li *ngIf=\"!child.separator\" #listItem [ngClass]=\"{'p-menuitem':true, 'p-menuitem-active': child === activeItem, 'p-hidden': child.visible === false}\" (mouseenter)=\"onItemMouseEnter($event,child)\">\n                    <a *ngIf=\"!child.routerLink\" [attr.href]=\"child.url\" [attr.data-automationid]=\"child.automationId\" [attr.target]=\"child.target\" [attr.title]=\"child.title\" [attr.id]=\"child.id\" (click)=\"onItemClick($event, child)\"\n                         [ngClass]=\"{'p-menuitem-link':true,'p-disabled':child.disabled}\" [ngStyle]=\"child.style\" [class]=\"child.styleClass\" \n                         [attr.tabindex]=\"child.disabled ? null : '0'\" [attr.aria-haspopup]=\"item.items != null\" [attr.aria-expanded]=\"item === activeItem\" pRipple>\n                        <span class=\"p-menuitem-icon\" *ngIf=\"child.icon\" [ngClass]=\"child.icon\"></span>\n                        <span class=\"p-menuitem-text\" *ngIf=\"child.escape !== false; else htmlLabel\">{{child.label}}</span>\n                        <ng-template #htmlLabel><span class=\"p-menuitem-text\" [innerHTML]=\"child.label\"></span></ng-template>\n                        <span class=\"p-submenu-icon pi\" *ngIf=\"child.items\" [ngClass]=\"{'pi-angle-down':root,'pi-angle-right':!root}\"></span>\n                    </a>\n                    <a *ngIf=\"child.routerLink\" [routerLink]=\"child.routerLink\" [attr.data-automationid]=\"child.automationId\" [queryParams]=\"child.queryParams\" [routerLinkActive]=\"'p-menuitem-link-active'\" [routerLinkActiveOptions]=\"child.routerLinkActiveOptions||{exact:false}\"\n                        [attr.target]=\"child.target\" [attr.title]=\"child.title\" [attr.id]=\"child.id\" [attr.tabindex]=\"child.disabled ? null : '0'\" role=\"menuitem\"\n                        (click)=\"onItemClick($event, child)\" [ngClass]=\"{'p-menuitem-link':true,'p-disabled':child.disabled}\" [ngStyle]=\"child.style\" [class]=\"child.styleClass\"\n                        [fragment]=\"child.fragment\" [queryParamsHandling]=\"child.queryParamsHandling\" [preserveFragment]=\"child.preserveFragment\" [skipLocationChange]=\"child.skipLocationChange\" [replaceUrl]=\"child.replaceUrl\" [state]=\"child.state\" pRipple>\n                        <span class=\"p-menuitem-icon\" *ngIf=\"child.icon\" [ngClass]=\"child.icon\"></span>\n                        <span class=\"p-menuitem-text\" *ngIf=\"child.escape !== false; else htmlRouteLabel\">{{child.label}}</span>\n                        <ng-template #htmlRouteLabel><span class=\"p-menuitem-text\" [innerHTML]=\"child.label\"></span></ng-template>\n                        <span class=\"p-submenu-icon pi\" *ngIf=\"child.items\" [ngClass]=\"{'pi-angle-down':root,'pi-angle-right':!root}\"></span>\n                    </a>\n                    <p-menubarSub [parentActive]=\"child === activeItem\" [item]=\"child\" *ngIf=\"child.items\" [mobileActive]=\"mobileActive\" [autoDisplay]=\"true\" (leafClick)=\"onLeafClick()\"></p-menubarSub>\n                </li>\n            </ng-template>\n        </ul>\n    `,\n    encapsulation: ViewEncapsulation.None\n})\nexport class MenubarSub implements OnDestroy {\n\n    @Input() item: MenuItem;\n\n    @Input() root: boolean;\n\n    @Input() autoDisplay: boolean;\n\n    @Input() autoZIndex: boolean = true;\n\n    @Input() baseZIndex: number = 0;\n\n    @Input() mobileActive: boolean;\n\n    @Input() get parentActive():boolean \n    {\n        return this._parentActive;\n    }\n    set parentActive(value) {\n        if (!this.root) {\n            this._parentActive = value;\n\n            if (!value)\n                this.activeItem = null;\n        }\n    }\n\n    @Output() leafClick: EventEmitter<any> = new EventEmitter();\n\n    _parentActive: boolean;\n\n    documentClickListener: any;\n\n    menuHoverActive: boolean = false;\n\n    activeItem: any;\n\n    constructor(public el: ElementRef, public renderer: Renderer2, private cd: ChangeDetectorRef) { }\n\n    onItemMouseEnter(event, item) {\n        if (item.disabled || this.mobileActive) {\n            event.preventDefault();\n            return;\n        }\n\n        if (this.root) {\n            if (this.activeItem) {\n                this.activeItem = item;\n            }\n        }\n        else {\n            this.activeItem = item;\n        }\n    }\n\n    onItemClick(event, item) {\n        if (item.disabled) {\n            event.preventDefault();\n            return;\n        }\n\n        if (!item.url && !item.routerLink) {\n            event.preventDefault();\n        }\n\n        if (item.command) {\n            item.command({\n                originalEvent: event,\n                item: item\n            });\n        }\n        \n        if (item.items) {\n            if (this.activeItem && item === this.activeItem) {\n                this.activeItem = null;\n                this.unbindDocumentClickListener();\n            }\n            else {\n                this.activeItem = item;\n                if (this.root) {\n                    this.bindDocumentClickListener();\n                }\n            }\n        }\n\n        if (!item.items) {\n            this.onLeafClick();\n        }\n    }\n\n    onLeafClick() {\n        this.activeItem = null;\n        if (this.root) {\n            this.unbindDocumentClickListener();\n        }\n\n        this.leafClick.emit();\n    }\n\n    bindDocumentClickListener() {\n        if (!this.documentClickListener) {\n            this.documentClickListener = (event) => {\n                if (this.el && !this.el.nativeElement.contains(event.target)) {\n                    this.activeItem = null;\n                    this.cd.markForCheck();\n                    this.unbindDocumentClickListener();\n                }\n            };\n\n            document.addEventListener('click', this.documentClickListener);\n        }\n    }\n\n    unbindDocumentClickListener() {\n        if (this.documentClickListener) {\n            document.removeEventListener('click', this.documentClickListener);\n            this.documentClickListener = null;\n        }\n    }\n\n    ngOnDestroy() {\n        this.unbindDocumentClickListener();\n    }\n}\n\n@Component({\n    selector: 'p-menubar',\n    template: `\n        <div [ngClass]=\"{'p-menubar p-component':true, 'p-menubar-mobile-active': mobileActive}\" [class]=\"styleClass\" [ngStyle]=\"style\">\n            <div class=\"p-menubar-start\" *ngIf=\"startTemplate\">\n                <ng-container *ngTemplateOutlet=\"startTemplate\"></ng-container>\n            </div>\n            <a #menubutton tabindex=\"0\" class=\"p-menubar-button\" (click)=\"toggle($event)\">\n                <i class=\"pi pi-bars\"></i>\n            </a>\n            <p-menubarSub #rootmenu [item]=\"model\" root=\"root\" [baseZIndex]=\"baseZIndex\" (leafClick)=\"onLeafClick()\" [autoZIndex]=\"autoZIndex\" [mobileActive]=\"mobileActive\"></p-menubarSub>\n            <div class=\"p-menubar-end\" *ngIf=\"endTemplate; else legacy\">\n                <ng-container *ngTemplateOutlet=\"endTemplate\"></ng-container>\n            </div>\n            <ng-template #legacy>\n                <div class=\"p-menubar-end\">\n                    <ng-content></ng-content>\n                </div>\n            </ng-template>\n        </div>\n    `,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['./menubar.css']\n})\nexport class Menubar implements AfterContentInit, OnDestroy {\n\n    @Input() model: MenuItem[];\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() autoZIndex: boolean = true;\n\n    @Input() baseZIndex: number = 0;\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\n\n    private _autoDisplay: boolean;\n\n    @Input() get autoDisplay(): boolean {\n        return this._autoDisplay;\n    }\n    set autoDisplay(_autoDisplay: boolean) {\n        console.log(\"AutoDisplay property is deprecated and functionality is not available.\");\n    }\n\n    @ViewChild('menubutton') menubutton: ElementRef;\n\n    @ViewChild('rootmenu') rootmenu: MenubarSub;\n\n    startTemplate: TemplateRef<any>;\n\n    endTemplate: TemplateRef<any>;\n\n    mobileActive: boolean;\n\n    outsideClickListener: any;\n\n    constructor(public el: ElementRef, public renderer: Renderer2, public cd: ChangeDetectorRef) { }\n\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch(item.getType()) {\n                case 'start':\n                    this.startTemplate = item.template;\n                break;\n\n                case 'end':\n                    this.endTemplate = item.template;\n                break;\n            }\n        });\n    }\n\n    toggle(event) {\n        this.mobileActive = !this.mobileActive;\n        let rootmenu = DomHandler.findSingle(this.el.nativeElement,\".p-menubar-root-list\")\n        rootmenu.style.zIndex = String(DomHandler.generateZIndex());\n        this.bindOutsideClickListener();\n        event.preventDefault();\n    }\n\n    bindOutsideClickListener() {\n        if (!this.outsideClickListener) {\n            this.outsideClickListener = (event) => {\n                if (this.mobileActive && this.rootmenu.el.nativeElement !== event.target && !this.rootmenu.el.nativeElement.contains(event.target)\n                    && this.menubutton.nativeElement !== event.target && !this.menubutton.nativeElement.contains(event.target)) {\n                    this.mobileActive = false;\n                    this.cd.markForCheck();\n                }\n            };\n            document.addEventListener('click', this.outsideClickListener);\n        }\n    }\n\n    onLeafClick() {\n        this.mobileActive = false;\n        this.unbindOutsideClickListener();\n    }\n\n    unbindOutsideClickListener() {\n        if (this.outsideClickListener) {\n            document.removeEventListener('click', this.outsideClickListener);\n            this.outsideClickListener = null;\n        }\n    }\n\n    ngOnDestroy() {\n        this.unbindOutsideClickListener();\n    }\n}\n\n@NgModule({\n    imports: [CommonModule,RouterModule,RippleModule],\n    exports: [Menubar,RouterModule],\n    declarations: [Menubar,MenubarSub]\n})\nexport class MenubarModule { }\n"]}