!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/core"),require("@angular/animations"),require("@angular/common"),require("primeng/api")):"function"==typeof define&&define.amd?define("primeng/fieldset",["exports","@angular/core","@angular/animations","@angular/common","primeng/api"],t):t(((e=e||self).primeng=e.primeng||{},e.primeng.fieldset={}),e.ng.core,e.ng.animations,e.ng.common,e.primeng.api)}(this,(function(e,t,n,i,o){"use strict";var l=this&&this.__decorate||function(e,t,n,i){var o,l=arguments.length,a=l<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,i);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(a=(l<3?o(a):l>3?o(t,n,a):o(t,n))||a);return l>3&&a&&Object.defineProperty(t,n,a),a},a=0,s=function(){function e(e){this.el=e,this.collapsed=!1,this.collapsedChange=new t.EventEmitter,this.onBeforeToggle=new t.EventEmitter,this.onAfterToggle=new t.EventEmitter,this.transitionOptions="400ms cubic-bezier(0.86, 0, 0.07, 1)",this.id="ui-fieldset-"+a++}return e.prototype.toggle=function(e){if(this.animating)return!1;this.animating=!0,this.onBeforeToggle.emit({originalEvent:e,collapsed:this.collapsed}),this.collapsed?this.expand(e):this.collapse(e),this.onAfterToggle.emit({originalEvent:e,collapsed:this.collapsed}),e.preventDefault()},e.prototype.expand=function(e){this.collapsed=!1,this.collapsedChange.emit(this.collapsed)},e.prototype.collapse=function(e){this.collapsed=!0,this.collapsedChange.emit(this.collapsed)},e.prototype.getBlockableElement=function(){return this.el.nativeElement.children[0]},e.prototype.onToggleDone=function(e){this.animating=!1},e.ctorParameters=function(){return[{type:t.ElementRef}]},l([t.Input()],e.prototype,"legend",void 0),l([t.Input()],e.prototype,"toggleable",void 0),l([t.Input()],e.prototype,"collapsed",void 0),l([t.Output()],e.prototype,"collapsedChange",void 0),l([t.Output()],e.prototype,"onBeforeToggle",void 0),l([t.Output()],e.prototype,"onAfterToggle",void 0),l([t.Input()],e.prototype,"style",void 0),l([t.Input()],e.prototype,"styleClass",void 0),l([t.Input()],e.prototype,"transitionOptions",void 0),e=l([t.Component({selector:"p-fieldset",template:'\n        <fieldset [attr.id]="id" [ngClass]="{\'ui-fieldset ui-widget ui-widget-content ui-corner-all\': true, \'ui-fieldset-toggleable\': toggleable}" [ngStyle]="style" [class]="styleClass">\n            <legend class="ui-fieldset-legend ui-corner-all ui-state-default ui-unselectable-text">\n                <ng-container *ngIf="toggleable; else legendContent">\n                    <a tabindex="0" (click)="toggle($event)" (keydown.enter)="toggle($event)" [attr.aria-controls]="id + \'-content\'" [attr.aria-expanded]="!collapsed">\n                        <ng-container *ngTemplateOutlet="legendContent"></ng-container>\n                    </a>\n                </ng-container>\n                <ng-template #legendContent>\n                    <span class="ui-fieldset-toggler pi" *ngIf="toggleable" [ngClass]="{\'pi-minus\': !collapsed,\'pi-plus\':collapsed}"></span>\n                    <span class="ui-fieldset-legend-text">{{legend}}</span>\n                    <ng-content select="p-header"></ng-content>\n                </ng-template>\n            </legend>\n            <div [attr.id]="id + \'-content\'" class="ui-fieldset-content-wrapper" [@fieldsetContent]="collapsed ? {value: \'hidden\', params: {transitionParams: transitionOptions, height: \'0\'}} : {value: \'visible\', params: {transitionParams: animating ? transitionOptions : \'0ms\', height: \'*\'}}" \n                        [attr.aria-labelledby]="id" [ngClass]="{\'ui-fieldset-content-wrapper-overflown\': collapsed||animating}" [attr.aria-hidden]="collapsed"\n                         (@fieldsetContent.done)="onToggleDone($event)" role="region">\n                <div class="ui-fieldset-content">\n                    <ng-content></ng-content>\n                </div>\n            </div>\n        </fieldset>\n    ',animations:[n.trigger("fieldsetContent",[n.state("hidden",n.style({height:"0"})),n.state("void",n.style({height:"{{height}}"}),{params:{height:"0"}}),n.state("visible",n.style({height:"*"})),n.transition("visible => hidden",n.animate("{{transitionParams}}")),n.transition("hidden => visible",n.animate("{{transitionParams}}")),n.transition("void => visible",n.animate("{{transitionParams}}"))])],changeDetection:t.ChangeDetectionStrategy.Default})],e)}(),r=function(){function e(){}return e=l([t.NgModule({imports:[i.CommonModule],exports:[s,o.SharedModule],declarations:[s]})],e)}();e.Fieldset=s,e.FieldsetModule=r,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=primeng-fieldset.umd.min.js.map