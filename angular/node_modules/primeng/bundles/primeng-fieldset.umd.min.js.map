{"version":3,"sources":["ng://primeng/fieldset/fieldset.ts"],"names":["idx","Fieldset","el","this","collapsed","collapsedChange","EventEmitter","onBeforeToggle","onAfterToggle","transitionOptions","id","prototype","toggle","event","animating","emit","originalEvent","expand","collapse","preventDefault","getBlockableElement","nativeElement","children","onToggleDone","ElementRef","__decorate","Input","Output","Component","selector","template","animations","trigger","state","style","height","params","transition","animate","changeDetection","ChangeDetectionStrategy","Default","FieldsetModule","NgModule","imports","CommonModule","exports","SharedModule","declarations"],"mappings":"w0BAMIA,EAAc,EA6ClBC,EAAA,WAsBI,SAAAA,EAAoBC,GAAAC,KAAAD,GAAAA,EAhBXC,KAAAC,WAAqB,EAEpBD,KAAAE,gBAAqC,IAAIC,EAAAA,aAEzCH,KAAAI,eAAoC,IAAID,EAAAA,aAExCH,KAAAK,cAAmC,IAAIF,EAAAA,aAMxCH,KAAAM,kBAA4B,uCAMrCN,KAAAO,GAAa,eAAeV,IAqChC,OAnCIC,EAAAU,UAAAC,OAAA,SAAOC,GACH,GAAIV,KAAKW,UACL,OAAO,EAGXX,KAAKW,WAAY,EACjBX,KAAKI,eAAeQ,KAAK,CAACC,cAAeH,EAAOT,UAAWD,KAAKC,YAE5DD,KAAKC,UACLD,KAAKc,OAAOJ,GAEZV,KAAKe,SAASL,GAElBV,KAAKK,cAAcO,KAAK,CAACC,cAAeH,EAAOT,UAAWD,KAAKC,YAC/DS,EAAMM,kBAGVlB,EAAAU,UAAAM,OAAA,SAAOJ,GACHV,KAAKC,WAAY,EACjBD,KAAKE,gBAAgBU,KAAKZ,KAAKC,YAGnCH,EAAAU,UAAAO,SAAA,SAASL,GACLV,KAAKC,WAAY,EACjBD,KAAKE,gBAAgBU,KAAKZ,KAAKC,YAGnCH,EAAAU,UAAAS,oBAAA,WACI,OAAOjB,KAAKD,GAAGmB,cAAcC,SAAS,IAG1CrB,EAAAU,UAAAY,aAAA,SAAaV,GACTV,KAAKW,WAAY,4CApCGU,EAAAA,cApBfC,EAAA,CAARC,EAAAA,sCAEQD,EAAA,CAARC,EAAAA,0CAEQD,EAAA,CAARC,EAAAA,yCAESD,EAAA,CAATE,EAAAA,gDAESF,EAAA,CAATE,EAAAA,+CAESF,EAAA,CAATE,EAAAA,8CAEQF,EAAA,CAARC,EAAAA,qCAEQD,EAAA,CAARC,EAAAA,0CAEQD,EAAA,CAARC,EAAAA,iDAlBQzB,EAAQwB,EAAA,CA3CpBG,EAAAA,UAAU,CACPC,SAAU,aACVC,SAAU,ywDAuBVC,WAAY,CACRC,EAAAA,QAAQ,kBAAmB,CACvBC,EAAAA,MAAM,SAAUC,EAAAA,MAAM,CAClBC,OAAQ,OAEZF,EAAAA,MAAM,OAAQC,EAAAA,MAAM,CAChBC,OAAQ,eACR,CAACC,OAAQ,CAACD,OAAQ,OACtBF,EAAAA,MAAM,UAAWC,EAAAA,MAAM,CACnBC,OAAQ,OAEZE,EAAAA,WAAW,oBAAqBC,EAAAA,QAAQ,yBACxCD,EAAAA,WAAW,oBAAqBC,EAAAA,QAAQ,yBACxCD,EAAAA,WAAW,kBAAmBC,EAAAA,QAAQ,4BAG9CC,gBAAiBC,EAAAA,wBAAwBC,WAEhCxC,GAAb,gBAoEA,SAAAyC,KAA8B,OAAjBA,EAAcjB,EAAA,CAL1BkB,EAAAA,SAAS,CACNC,QAAS,CAACC,EAAAA,cACVC,QAAS,CAAC7C,EAAS8C,EAAAA,cACnBC,aAAc,CAAC/C,MAENyC","sourcesContent":["import {NgModule,Component,Input,Output,EventEmitter,ElementRef,ChangeDetectionStrategy} from '@angular/core';\nimport {trigger,state,style,transition,animate} from '@angular/animations';\nimport {CommonModule} from '@angular/common';\nimport {SharedModule} from 'primeng/api';\nimport {BlockableUI} from 'primeng/api';\n\nlet idx: number = 0;\n\n@Component({\n    selector: 'p-fieldset',\n    template: `\n        <fieldset [attr.id]=\"id\" [ngClass]=\"{'ui-fieldset ui-widget ui-widget-content ui-corner-all': true, 'ui-fieldset-toggleable': toggleable}\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <legend class=\"ui-fieldset-legend ui-corner-all ui-state-default ui-unselectable-text\">\n                <ng-container *ngIf=\"toggleable; else legendContent\">\n                    <a tabindex=\"0\" (click)=\"toggle($event)\" (keydown.enter)=\"toggle($event)\" [attr.aria-controls]=\"id + '-content'\" [attr.aria-expanded]=\"!collapsed\">\n                        <ng-container *ngTemplateOutlet=\"legendContent\"></ng-container>\n                    </a>\n                </ng-container>\n                <ng-template #legendContent>\n                    <span class=\"ui-fieldset-toggler pi\" *ngIf=\"toggleable\" [ngClass]=\"{'pi-minus': !collapsed,'pi-plus':collapsed}\"></span>\n                    <span class=\"ui-fieldset-legend-text\">{{legend}}</span>\n                    <ng-content select=\"p-header\"></ng-content>\n                </ng-template>\n            </legend>\n            <div [attr.id]=\"id + '-content'\" class=\"ui-fieldset-content-wrapper\" [@fieldsetContent]=\"collapsed ? {value: 'hidden', params: {transitionParams: transitionOptions, height: '0'}} : {value: 'visible', params: {transitionParams: animating ? transitionOptions : '0ms', height: '*'}}\" \n                        [attr.aria-labelledby]=\"id\" [ngClass]=\"{'ui-fieldset-content-wrapper-overflown': collapsed||animating}\" [attr.aria-hidden]=\"collapsed\"\n                         (@fieldsetContent.done)=\"onToggleDone($event)\" role=\"region\">\n                <div class=\"ui-fieldset-content\">\n                    <ng-content></ng-content>\n                </div>\n            </div>\n        </fieldset>\n    `,\n    animations: [\n        trigger('fieldsetContent', [\n            state('hidden', style({\n                height: '0'\n            })),\n            state('void', style({\n                height: '{{height}}'\n            }), {params: {height: '0'}}),\n            state('visible', style({\n                height: '*'\n            })),\n            transition('visible => hidden', animate('{{transitionParams}}')),\n            transition('hidden => visible', animate('{{transitionParams}}')),\n            transition('void => visible', animate('{{transitionParams}}'))\n        ])\n    ],\n    changeDetection: ChangeDetectionStrategy.Default\n})\nexport class Fieldset implements BlockableUI {\n\n    @Input() legend: string;\n\n    @Input() toggleable: boolean;\n\n    @Input() collapsed: boolean = false;\n\n    @Output() collapsedChange: EventEmitter<any> = new EventEmitter();\n    \n    @Output() onBeforeToggle: EventEmitter<any> = new EventEmitter();\n\n    @Output() onAfterToggle: EventEmitter<any> = new EventEmitter();\n    \n    @Input() style: any;\n        \n    @Input() styleClass: string;\n\n    @Input() transitionOptions: string = '400ms cubic-bezier(0.86, 0, 0.07, 1)';\n    \n    public animating: boolean;\n    \n    constructor(private el: ElementRef) {}\n    \n    id: string = `ui-fieldset-${idx++}`;\n        \n    toggle(event) {\n        if (this.animating) {\n            return false;\n        }\n        \n        this.animating = true;\n        this.onBeforeToggle.emit({originalEvent: event, collapsed: this.collapsed});\n        \n        if (this.collapsed)\n            this.expand(event);\n        else\n            this.collapse(event);\n            \n        this.onAfterToggle.emit({originalEvent: event, collapsed: this.collapsed});   \n        event.preventDefault();\n    }\n    \n    expand(event) {\n        this.collapsed = false;\n        this.collapsedChange.emit(this.collapsed);\n    }\n    \n    collapse(event) {\n        this.collapsed = true;\n        this.collapsedChange.emit(this.collapsed);\n    }\n    \n    getBlockableElement(): HTMLElementÂ {\n        return this.el.nativeElement.children[0];\n    }\n    \n    onToggleDone(event: Event) {\n        this.animating = false;\n    }\n\n}\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [Fieldset,SharedModule],\n    declarations: [Fieldset]\n})\nexport class FieldsetModule { }"]}