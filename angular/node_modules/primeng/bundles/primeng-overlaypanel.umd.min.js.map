{"version":3,"sources":["../../src/app/components/overlaypanel/overlaypanel.ts"],"names":["OverlayPanel","el","renderer","cd","zone","this","dismissable","autoZIndex","baseZIndex","focusOnShow","showTransitionOptions","hideTransitionOptions","onShow","EventEmitter","onHide","overlayVisible","render","isContainerClicked","prototype","ngAfterContentInit","_this","templates","forEach","item","getType","contentTemplate","template","markForCheck","onContainerClick","bindDocumentClickListener","documentClickListener","runOutsideAngular","documentEvent","DomHandler","isIOS","documentTarget","nativeElement","ownerDocument","listen","event","container","contains","target","run","hide","unbindDocumentClickListener","toggle","hasTargetChanged","destroyCallback","show","currentTarget","appendContainer","appendTo","document","body","appendChild","restoreAppend","align","style","zIndex","String","zindex","absolutePosition","getOffset","top","addClass","Math","floor","left","onAnimationStart","toState","element","emit","bindDocumentResizeListener","bindScrollListener","focus","onAnimationEnd","onContainerDestroy","focusable","findSingle","setTimeout","onCloseClick","preventDefault","onWindowResize","documentResizeListener","bind","window","addEventListener","unbindDocumentResizeListener","removeEventListener","scrollHandler","ConnectedOverlayScrollHandler","unbindScrollListener","ngOnDestroy","destroy","Component","args","selector","animations","trigger","state","transform","opacity","transition","animate","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","ElementRef","Renderer2","ChangeDetectorRef","NgZone","Input","Output","ContentChildren","PrimeTemplate","NgModule","imports","CommonModule","RippleModule","exports","declarations"],"mappings":"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","sourcesContent":["import {NgModule,Component,Input,Output,OnDestroy,EventEmitter,Renderer2,ElementRef,ChangeDetectorRef,NgZone,\n        ContentChildren,TemplateRef,AfterContentInit,QueryList,ChangeDetectionStrategy, ViewEncapsulation} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {DomHandler, ConnectedOverlayScrollHandler} from 'primeng/dom';\nimport {PrimeTemplate} from 'primeng/api';\nimport {RippleModule} from 'primeng/ripple';\nimport {trigger,state,style,transition,animate,AnimationEvent} from '@angular/animations';\n\n@Component({\n    selector: 'p-overlayPanel',\n    template: `\n        <div *ngIf=\"render\" [ngClass]=\"'p-overlaypanel p-component'\" [ngStyle]=\"style\" [class]=\"styleClass\" (click)=\"onContainerClick()\"\n            [@animation]=\"{value: (overlayVisible ? 'open': 'close'), params: {showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions}}\"\n                (@animation.start)=\"onAnimationStart($event)\" (@animation.done)=\"onAnimationEnd($event)\">\n            <div class=\"p-overlaypanel-content\">\n                <ng-content></ng-content>\n                <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\n            </div>\n            <button *ngIf=\"showCloseIcon\" type=\"button\" class=\"p-overlaypanel-close p-link\" (click)=\"onCloseClick($event)\" (keydown.enter)=\"hide()\" [attr.aria-label]=\"ariaCloseLabel\" pRipple>\n                <span class=\"p-overlaypanel-close-icon pi pi-times\"></span>\n            </button>\n        </div>\n    `,\n    animations: [\n        trigger('animation', [\n            state('void', style({\n                transform: 'scaleY(0.8)',\n                opacity: 0\n            })),\n            state('close', style({\n                opacity: 0\n            })),\n            state('open', style({\n                transform: 'translateY(0)',\n                opacity: 1\n            })),\n            transition('void => open', animate('{{showTransitionParams}}')),\n            transition('open => close', animate('{{hideTransitionParams}}')),\n        ])\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['./overlaypanel.css']\n})\nexport class OverlayPanel implements AfterContentInit, OnDestroy {\n\n    @Input() dismissable: boolean = true;\n\n    @Input() showCloseIcon: boolean;\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() appendTo: any;\n\n    @Input() autoZIndex: boolean = true;\n\n    @Input() ariaCloseLabel: string;\n\n    @Input() baseZIndex: number = 0;\n\n    @Input() focusOnShow: boolean = true;\n\n    @Input() showTransitionOptions: string = '.12s cubic-bezier(0, 0, 0.2, 1)';\n\n    @Input() hideTransitionOptions: string = '.1s linear';\n\n    @Output() onShow: EventEmitter<any> = new EventEmitter();\n\n    @Output() onHide: EventEmitter<any> = new EventEmitter();\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\n\n    container: HTMLDivElement;\n\n    overlayVisible: boolean = false;\n\n    render: boolean = false;\n\n    isContainerClicked: boolean = true;\n\n    documentClickListener: any;\n\n    target: any;\n\n    willHide: boolean;\n\n    scrollHandler: any;\n\n    documentResizeListener: any;\n\n    contentTemplate: TemplateRef<any>;\n\n    destroyCallback: Function;\n\n    constructor(public el: ElementRef, public renderer: Renderer2, public cd: ChangeDetectorRef, private zone: NgZone) {}\n\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch(item.getType()) {\n                case 'content':\n                    this.contentTemplate = item.template;\n                break;\n\n                default:\n                    this.contentTemplate = item.template;\n                break;\n            }\n\n            this.cd.markForCheck();\n        });\n    }\n\n    onContainerClick() {\n        this.isContainerClicked = true;\n    }\n\n    bindDocumentClickListener() {\n        if (!this.documentClickListener && this.dismissable) {\n            this.zone.runOutsideAngular(() => {\n                let documentEvent = DomHandler.isIOS() ? 'touchstart' : 'click';\n                const documentTarget: any = this.el ? this.el.nativeElement.ownerDocument : 'document';\n\n                this.documentClickListener = this.renderer.listen(documentTarget, documentEvent, (event) => {\n                    if (!this.container.contains(event.target) && this.target !== event.target && !this.target.contains(event.target) && !this.isContainerClicked) {\n                        this.zone.run(() => {\n                            this.hide();\n                        });\n                    }\n\n                    this.isContainerClicked = false;\n                    this.cd.markForCheck();\n                });\n            });\n        }\n    }\n\n    unbindDocumentClickListener() {\n        if (this.documentClickListener) {\n            this.documentClickListener();\n            this.documentClickListener = null;\n        }\n    }\n\n    toggle(event, target?) {\n        if (this.overlayVisible) {\n            if (this.hasTargetChanged(event, target)) {\n                this.destroyCallback = () => {\n                    this.show(null, (target||event.currentTarget||event.target));\n                };\n            }\n\n            this.hide();\n        }\n        else {\n            this.show(event, target);\n        }\n    }\n\n    show(event, target?) {\n        this.target = target||event.currentTarget||event.target;\n        this.overlayVisible = true;\n        this.render = true;\n        this.cd.markForCheck();\n    }\n\n    hasTargetChanged(event, target) {\n        return this.target != null && this.target !== (target||event.currentTarget||event.target);\n    }\n\n    appendContainer() {\n        if (this.appendTo) {\n            if (this.appendTo === 'body')\n                document.body.appendChild(this.container);\n            else\n                DomHandler.appendChild(this.container, this.appendTo);\n        }\n    }\n\n    restoreAppend() {\n        if (this.container && this.appendTo) {\n            this.el.nativeElement.appendChild(this.container);\n        }\n    }\n\n    align() {\n        if (this.autoZIndex) {\n            this.container.style.zIndex = String(this.baseZIndex + (++DomHandler.zindex));\n        }\n        DomHandler.absolutePosition(this.container, this.target);\n        if (DomHandler.getOffset(this.container).top < DomHandler.getOffset(this.target).top) {\n            DomHandler.addClass(this.container, 'p-overlaypanel-flipped');\n        }\n        if (Math.floor(DomHandler.getOffset(this.container).left) < Math.floor(DomHandler.getOffset(this.target).left) &&\n            DomHandler.getOffset(this.container).left > 0) {\n            DomHandler.addClass(this.container, 'p-overlaypanel-shifted');\n        }\n    }\n\n    onAnimationStart(event: AnimationEvent) {\n        if (event.toState === 'open') {\n            this.container = event.element;\n            this.onShow.emit(null);\n            this.appendContainer();\n            this.align();\n            this.bindDocumentClickListener();\n            this.bindDocumentResizeListener();\n            this.bindScrollListener();\n\n            if (this.focusOnShow) {\n                this.focus();\n            }\n        }\n    }\n\n    onAnimationEnd(event: AnimationEvent) {\n        switch (event.toState) {\n            case 'void':\n                if (this.destroyCallback) {\n                    this.destroyCallback();\n                    this.destroyCallback = null;\n                }\n            break;\n\n            case 'close':\n                this.onContainerDestroy();\n                this.onHide.emit({});\n                this.render = false;\n            break;\n        }\n    }\n\n    focus() {\n        let focusable = DomHandler.findSingle(this.container, '[autofocus]');\n        if (focusable) {\n            this.zone.runOutsideAngular(() => {\n                setTimeout(() => focusable.focus(), 5);\n            });\n        }\n    }\n\n    hide() {\n        this.overlayVisible = false;\n        this.cd.markForCheck();\n    }\n\n    onCloseClick(event) {\n        this.hide();\n        event.preventDefault();\n    }\n\n    onWindowResize(event) {\n        this.hide();\n    }\n\n    bindDocumentResizeListener() {\n        this.documentResizeListener = this.onWindowResize.bind(this);\n        window.addEventListener('resize', this.documentResizeListener);\n    }\n\n    unbindDocumentResizeListener() {\n        if (this.documentResizeListener) {\n            window.removeEventListener('resize', this.documentResizeListener);\n            this.documentResizeListener = null;\n        }\n    }\n\n    bindScrollListener() {\n        if (!this.scrollHandler) {\n            this.scrollHandler = new ConnectedOverlayScrollHandler(this.target, () => {\n                if (this.overlayVisible) {\n                    this.hide();\n                }\n            });\n        }\n\n        this.scrollHandler.bindScrollListener();\n    }\n\n    unbindScrollListener() {\n        if (this.scrollHandler) {\n            this.scrollHandler.unbindScrollListener();\n        }\n    }\n\n    onContainerDestroy() {\n        this.target = null;\n        this.unbindDocumentClickListener();\n        this.unbindDocumentResizeListener();\n        this.unbindScrollListener();\n    }\n\n    ngOnDestroy() {\n        if (this.scrollHandler) {\n            this.scrollHandler.destroy();\n            this.scrollHandler = null;\n        }\n\n        this.target = null;\n        this.destroyCallback = null;\n        if (this.container) {\n            this.restoreAppend();\n            this.onContainerDestroy();\n        }\n    }\n}\n\n@NgModule({\n    imports: [CommonModule,RippleModule],\n    exports: [OverlayPanel],\n    declarations: [OverlayPanel]\n})\nexport class OverlayPanelModule { }\n"]}