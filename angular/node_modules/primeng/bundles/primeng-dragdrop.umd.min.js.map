{"version":3,"sources":["ng://primeng/dragdrop/dragdrop.ts"],"names":["Draggable","el","zone","this","onDragStart","EventEmitter","onDragEnd","onDrag","Object","defineProperty","prototype","_pDraggableDisabled","unbindMouseListeners","nativeElement","draggable","bindMouseListeners","ngAfterViewInit","pDraggableDisabled","bindDragListener","_this","dragListener","runOutsideAngular","drag","bind","addEventListener","unbindDragListener","removeEventListener","mouseDownListener","mouseUpListener","mousedown","mouseup","event","emit","dragStart","allowDrag","dragEffect","dataTransfer","effectAllowed","setData","scope","preventDefault","dragEnd","handle","target","dragHandle","DomHandler","matches","ngOnDestroy","ElementRef","NgZone","__decorate","Input","Output","HostListener","Directive","selector","Droppable","onDragEnter","onDragLeave","onDrop","pDroppableDisabled","bindDragOverListener","dragOverListener","dragOver","unbindDragOverListener","drop","allowDrop","dragEnter","dropEffect","dragLeave","dragScope","getData","Array","j","length","DragDropModule","NgModule","imports","CommonModule","exports","declarations"],"mappings":"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","sourcesContent":["import {NgModule,Directive,OnDestroy,AfterViewInit,ElementRef,HostListener,Input,Output,EventEmitter,NgZone} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {DomHandler} from 'primeng/dom';\n\n@Directive({\n    selector: '[pDraggable]'\n})\nexport class Draggable implements AfterViewInit, OnDestroy {\n    \n    @Input('pDraggable') scope: string;\n        \n    @Input() dragEffect: string;\n    \n    @Input() dragHandle: string;\n    \n    @Output() onDragStart: EventEmitter<any> = new EventEmitter();\n    \n    @Output() onDragEnd: EventEmitter<any> = new EventEmitter();\n    \n    @Output() onDrag: EventEmitter<any> = new EventEmitter();\n    \n    handle: any;\n\n    dragListener: any;\n\n    mouseDownListener: any;\n\n    mouseUpListener: any;\n\n    _pDraggableDisabled: boolean;\n        \n    constructor(public el: ElementRef, public zone: NgZone) {}\n\n    @Input() get pDraggableDisabled(): boolean {\n        return this._pDraggableDisabled;\n    }\n    set pDraggableDisabled(_pDraggableDisabled:boolean) {\n        this._pDraggableDisabled = _pDraggableDisabled;\n        \n        if (this._pDraggableDisabled) {\n            this.unbindMouseListeners();\n        }\n        else {\n            this.el.nativeElement.draggable = true;\n            this.bindMouseListeners();\n        }\n    }\n    \n    ngAfterViewInit() {\n        if (!this.pDraggableDisabled) {\n            this.el.nativeElement.draggable = true;\n            this.bindMouseListeners();\n        }\n    }\n\n    bindDragListener() {\n        if (!this.dragListener) {\n            this.zone.runOutsideAngular(() => {\n                this.dragListener = this.drag.bind(this);\n                this.el.nativeElement.addEventListener('drag', this.dragListener);\n            });\n        }\n    }\n\n    unbindDragListener() {\n        if (this.dragListener) {\n            this.zone.runOutsideAngular(() => {\n                this.el.nativeElement.removeEventListener('drag', this.dragListener);\n                this.dragListener = null;\n            });\n        }\n    }\n\n    bindMouseListeners() {\n        if (!this.mouseDownListener && !this.mouseUpListener) {\n            this.zone.runOutsideAngular(() => {\n                this.mouseDownListener = this.mousedown.bind(this);\n                this.mouseUpListener = this.mouseup.bind(this);\n                this.el.nativeElement.addEventListener('mousedown', this.mouseDownListener);\n                this.el.nativeElement.addEventListener('mouseup', this.mouseUpListener);\n            });\n        }\n    }\n\n    unbindMouseListeners() {\n        if (this.mouseDownListener && this.mouseUpListener) {\n            this.zone.runOutsideAngular(() => {\n                this.el.nativeElement.removeEventListener('mousedown', this.mouseDownListener);\n                this.el.nativeElement.removeEventListener('mouseup', this.mouseUpListener);\n                this.mouseDownListener = null;\n                this.mouseUpListener = null;\n            });\n        }\n    }\n\n    drag(event) {\n        this.onDrag.emit(event);\n    }\n\n    @HostListener('dragstart', ['$event']) \n    dragStart(event) {\n        if (this.allowDrag() && !this.pDraggableDisabled) {\n            if (this.dragEffect) {\n                event.dataTransfer.effectAllowed = this.dragEffect;\n            }\n            event.dataTransfer.setData('text', this.scope);\n            \n            this.onDragStart.emit(event);\n\n            this.bindDragListener();\n        }\n        else {\n            event.preventDefault();\n        }\n    }\n\n    @HostListener('dragend', ['$event']) \n    dragEnd(event) {\n        this.onDragEnd.emit(event);\n        this.unbindDragListener();\n    }\n    \n    mousedown(event) {\n        this.handle = event.target;\n    }\n\n    mouseup(event) {\n        this.handle = null;\n    }\n    \n    allowDrag() : boolean {\n        if (this.dragHandle && this.handle)\n            return DomHandler.matches(this.handle, this.dragHandle);\n        else\n            return true;\n    }\n\n    ngOnDestroy() {\n        this.unbindDragListener();\n        this.unbindMouseListeners();\n    }\n    \n}\n\n@Directive({\n    selector: '[pDroppable]'\n})\nexport class Droppable implements AfterViewInit, OnDestroy {\n    \n    @Input('pDroppable') scope: string|string[];\n\n    @Input() pDroppableDisabled: boolean;\n        \n    @Input() dropEffect: string;\n        \n    @Output() onDragEnter: EventEmitter<any> = new EventEmitter();\n    \n    @Output() onDragLeave: EventEmitter<any> = new EventEmitter();\n    \n    @Output() onDrop: EventEmitter<any> = new EventEmitter();\n    \n    constructor(public el: ElementRef, public zone: NgZone) {}\n\n    dragOverListener: any;\n\n    ngAfterViewInit() {\n        if (!this.pDroppableDisabled) {\n            this.bindDragOverListener();\n        }\n    }\n\n    bindDragOverListener() {\n        if (!this.dragOverListener) {\n            this.zone.runOutsideAngular(() => {\n                this.dragOverListener = this.dragOver.bind(this);\n                this.el.nativeElement.addEventListener('dragover', this.dragOverListener);\n            });\n        }\n    }\n\n    unbindDragOverListener() {\n        if (this.dragOverListener) {\n            this.zone.runOutsideAngular(() => {\n                this.el.nativeElement.removeEventListener('dragover', this.dragOverListener);\n                this.dragOverListener = null;\n            });\n        }\n    }\n\n    dragOver(event) {\n        event.preventDefault();\n    }\n            \n    @HostListener('drop', ['$event'])\n    drop(event) {\n        if (this.allowDrop(event)) {\n            event.preventDefault();\n            this.onDrop.emit(event);\n        }\n    }\n    \n    @HostListener('dragenter', ['$event']) \n    dragEnter(event) {\n        event.preventDefault();\n        \n        if (this.dropEffect) {\n            event.dataTransfer.dropEffect = this.dropEffect;\n        }\n                \n        this.onDragEnter.emit(event);\n    }\n    \n    @HostListener('dragleave', ['$event']) \n    dragLeave(event) {\n        event.preventDefault();\n                \n        this.onDragLeave.emit(event);\n    }\n        \n    allowDrop(event): boolean {\n        let dragScope = event.dataTransfer.getData('text');\n        if (typeof (this.scope) == \"string\" && dragScope == this.scope) {\n            return true;\n        }\n        else if (this.scope instanceof Array) {\n            for(let j = 0; j < this.scope.length; j++) {\n                if (dragScope == this.scope[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    ngOnDestroy() {\n        this.unbindDragOverListener();\n    }\n}\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [Draggable,Droppable],\n    declarations: [Draggable,Droppable]\n})\nexport class DragDropModule { }"]}