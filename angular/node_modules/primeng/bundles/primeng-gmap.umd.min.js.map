{"version":3,"sources":["ng://primeng/gmap/gmap.ts"],"names":["GMap","el","differs","cd","zone","this","onMapClick","EventEmitter","onOverlayClick","onOverlayDblClick","onOverlayDragStart","onOverlayDrag","onOverlayDragEnd","onMapReady","onMapDragEnd","onZoomChanged","differ","find","create","prototype","ngAfterViewChecked","map","nativeElement","offsetParent","initialize","_this","google","maps","Map","children","options","emit","overlays","_b","__values","_c","next","done","overlay","value","setMap","bindOverlayEvents","addListener","event","run","originalEvent","getDraggable","bindDragEvents","ngDoCheck","changes","diff","forEachRemovedItem","record","clearInstanceListeners","item","forEachAddedItem","getMap","ElementRef","IterableDiffers","ChangeDetectorRef","NgZone","__decorate","Input","Output","Component","selector","template","changeDetection","ChangeDetectionStrategy","Default","GMapModule","NgModule","imports","CommonModule","exports","declarations"],"mappings":"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","sourcesContent":["import {NgModule,Component,ElementRef,AfterViewChecked,DoCheck,Input,Output,EventEmitter,IterableDiffers,ChangeDetectorRef,NgZone,ChangeDetectionStrategy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\ndeclare var google: any;\n\n@Component({\n    selector: 'p-gmap',\n    template: `<div [ngStyle]=\"style\" [class]=\"styleClass\"></div>`,\n    changeDetection: ChangeDetectionStrategy.Default\n})\nexport class GMap implements AfterViewChecked,DoCheck {\n\n    @Input() style: any;\n        \n    @Input() styleClass: string;\n    \n    @Input() options: any;\n    \n    @Input() overlays: any[];\n    \n    @Output() onMapClick: EventEmitter<any> = new EventEmitter();\n    \n    @Output() onOverlayClick: EventEmitter<any> = new EventEmitter();\n\n    @Output() onOverlayDblClick: EventEmitter<any> = new EventEmitter();\n    \n    @Output() onOverlayDragStart: EventEmitter<any> = new EventEmitter();\n    \n    @Output() onOverlayDrag: EventEmitter<any> = new EventEmitter();\n    \n    @Output() onOverlayDragEnd: EventEmitter<any> = new EventEmitter();\n    \n    @Output() onMapReady: EventEmitter<any> = new EventEmitter();\n\n    @Output() onMapDragEnd: EventEmitter<any> = new EventEmitter();\n   \n    @Output() onZoomChanged: EventEmitter<any> = new EventEmitter();\n\n    differ: any;\n    \n    map: any;\n\n    constructor(public el: ElementRef,differs: IterableDiffers, public cd: ChangeDetectorRef, public zone:NgZone) {\n        this.differ = differs.find([]).create(null);\n    }\n    \n    ngAfterViewChecked() {\n        if (!this.map && this.el.nativeElement.offsetParent) {\n            this.initialize();\n        }\n    }\n    \n    initialize() {\n        this.map = new google.maps.Map(this.el.nativeElement.children[0], this.options);\n        this.onMapReady.emit({\n            map: this.map\n        });\n        \n        if (this.overlays) {\n            for(let overlay of this.overlays) {\n                overlay.setMap(this.map);\n                this.bindOverlayEvents(overlay);\n            }\n        }\n        \n        this.map.addListener('click', (event) => {\n            this.zone.run(() => {\n                this.onMapClick.emit(event);\n            });\n        });\n\n        this.map.addListener('dragend', (event) => {\n            this.zone.run(() => {\n                this.onMapDragEnd.emit(event);\n            });\n        });\n\n        this.map.addListener('zoom_changed', (event) => {\n            this.zone.run(() => {\n                this.onZoomChanged.emit(event);\n            });\n        });\n    }\n    \n    bindOverlayEvents(overlay: any) {\n        overlay.addListener('click', (event) => {\n            this.zone.run(() => {\n                this.onOverlayClick.emit({\n                    originalEvent: event,\n                    'overlay': overlay,\n                    map: this.map\n                });\n            });\n        });\n\n        overlay.addListener('dblclick', (event) => {\n            this.zone.run(() => {\n                this.onOverlayDblClick.emit({\n                    originalEvent: event,\n                    'overlay': overlay,\n                    map: this.map\n                });\n            });\n        });\n        \n        if (overlay.getDraggable()) {\n            this.bindDragEvents(overlay);\n        }\n    }\n    \n    ngDoCheck() {\n        let changes = this.differ.diff(this.overlays);\n        \n        if (changes && this.map) {\n            changes.forEachRemovedItem((record) => {\n                google.maps.event.clearInstanceListeners(record.item);\n                record.item.setMap(null);\n            });\n\n            changes.forEachAddedItem((record) => {\n                record.item.setMap(this.map);\n                record.item.addListener('click', (event) => {\n                    this.zone.run(() => {\n                        this.onOverlayClick.emit({\n                            originalEvent: event,\n                            overlay: record.item,\n                            map: this.map\n                        });\n                    });\n                });\n                \n                if (record.item.getDraggable()) {\n                    this.bindDragEvents(record.item);\n                }\n            });\n        }\n    }\n    \n    bindDragEvents(overlay) {\n        overlay.addListener('dragstart', (event) => {\n            this.zone.run(() => {\n                this.onOverlayDragStart.emit({\n                    originalEvent: event,\n                    overlay: overlay,\n                    map: this.map\n                });\n            });\n        });\n        \n        overlay.addListener('drag', (event) => {\n            this.zone.run(() => {\n                this.onOverlayDrag.emit({\n                    originalEvent: event,\n                    overlay: overlay,\n                    map: this.map\n                });\n            });\n        });\n        \n        overlay.addListener('dragend', (event) => {\n            this.zone.run(() => {\n                this.onOverlayDragEnd.emit({\n                    originalEvent: event,\n                    overlay: overlay,\n                    map: this.map\n                });\n            });\n        });\n    }\n    \n    getMap() {\n        return this.map;\n    }\n}\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [GMap],\n    declarations: [GMap]\n})\nexport class GMapModule { }"]}