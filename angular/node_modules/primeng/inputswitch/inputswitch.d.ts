import { EventEmitter, ChangeDetectorRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
export declare const INPUTSWITCH_VALUE_ACCESSOR: any;
export declare class InputSwitch implements ControlValueAccessor {
    private cd;
    style: any;
    styleClass: string;
    tabindex: number;
    inputId: string;
    name: string;
    disabled: boolean;
    readonly: boolean;
    ariaLabelledBy: string;
    onChange: EventEmitter<any>;
    checked: boolean;
    focused: boolean;
    onModelChange: Function;
    onModelTouched: Function;
    constructor(cd: ChangeDetectorRef);
    onClick(event: Event, cb: HTMLInputElement): void;
    onInputChange(event: Event): void;
    toggle(event: Event): void;
    updateModel(event: Event, value: boolean): void;
    onFocus(event: Event): void;
    onBlur(event: Event): void;
    writeValue(checked: any): void;
    registerOnChange(fn: Function): void;
    registerOnTouched(fn: Function): void;
    setDisabledState(val: boolean): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<InputSwitch, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<InputSwitch, "p-inputSwitch", never, { "disabled": "disabled"; "style": "style"; "styleClass": "styleClass"; "tabindex": "tabindex"; "inputId": "inputId"; "name": "name"; "readonly": "readonly"; "ariaLabelledBy": "ariaLabelledBy"; }, { "onChange": "onChange"; }, never, never>;
}
export declare class InputSwitchModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<InputSwitchModule, [typeof InputSwitch], [typeof ɵngcc1.CommonModule], [typeof InputSwitch]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<InputSwitchModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXRzd2l0Y2guZC50cyIsInNvdXJjZXMiOlsiaW5wdXRzd2l0Y2guZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTJCQTs7OztBQUVBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBDaGFuZ2VEZXRlY3RvclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5leHBvcnQgZGVjbGFyZSBjb25zdCBJTlBVVFNXSVRDSF9WQUxVRV9BQ0NFU1NPUjogYW55O1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSW5wdXRTd2l0Y2ggaW1wbGVtZW50cyBDb250cm9sVmFsdWVBY2Nlc3NvciB7XG4gICAgcHJpdmF0ZSBjZDtcbiAgICBzdHlsZTogYW55O1xuICAgIHN0eWxlQ2xhc3M6IHN0cmluZztcbiAgICB0YWJpbmRleDogbnVtYmVyO1xuICAgIGlucHV0SWQ6IHN0cmluZztcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgcmVhZG9ubHk6IGJvb2xlYW47XG4gICAgYXJpYUxhYmVsbGVkQnk6IHN0cmluZztcbiAgICBvbkNoYW5nZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgY2hlY2tlZDogYm9vbGVhbjtcbiAgICBmb2N1c2VkOiBib29sZWFuO1xuICAgIG9uTW9kZWxDaGFuZ2U6IEZ1bmN0aW9uO1xuICAgIG9uTW9kZWxUb3VjaGVkOiBGdW5jdGlvbjtcbiAgICBjb25zdHJ1Y3RvcihjZDogQ2hhbmdlRGV0ZWN0b3JSZWYpO1xuICAgIG9uQ2xpY2soZXZlbnQ6IEV2ZW50LCBjYjogSFRNTElucHV0RWxlbWVudCk6IHZvaWQ7XG4gICAgb25JbnB1dENoYW5nZShldmVudDogRXZlbnQpOiB2b2lkO1xuICAgIHRvZ2dsZShldmVudDogRXZlbnQpOiB2b2lkO1xuICAgIHVwZGF0ZU1vZGVsKGV2ZW50OiBFdmVudCwgdmFsdWU6IGJvb2xlYW4pOiB2b2lkO1xuICAgIG9uRm9jdXMoZXZlbnQ6IEV2ZW50KTogdm9pZDtcbiAgICBvbkJsdXIoZXZlbnQ6IEV2ZW50KTogdm9pZDtcbiAgICB3cml0ZVZhbHVlKGNoZWNrZWQ6IGFueSk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogRnVuY3Rpb24pOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiBGdW5jdGlvbik6IHZvaWQ7XG4gICAgc2V0RGlzYWJsZWRTdGF0ZSh2YWw6IGJvb2xlYW4pOiB2b2lkO1xufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSW5wdXRTd2l0Y2hNb2R1bGUge1xufVxuIl19