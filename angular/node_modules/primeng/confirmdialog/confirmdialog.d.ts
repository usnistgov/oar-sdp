import { ElementRef, OnDestroy, Renderer2, NgZone, ChangeDetectorRef } from '@angular/core';
import { AnimationEvent } from '@angular/animations';
import { Confirmation } from 'primeng/api';
import { ConfirmationService } from 'primeng/api';
import { Subscription } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from 'primeng/button';
import * as ɵngcc3 from 'primeng/api';
export declare class ConfirmDialog implements OnDestroy {
    el: ElementRef;
    renderer: Renderer2;
    private confirmationService;
    zone: NgZone;
    private cd;
    header: string;
    icon: string;
    message: string;
    style: any;
    styleClass: string;
    maskStyleClass: string;
    acceptIcon: string;
    acceptLabel: string;
    acceptVisible: boolean;
    rejectIcon: string;
    rejectLabel: string;
    rejectVisible: boolean;
    acceptButtonStyleClass: string;
    rejectButtonStyleClass: string;
    closeOnEscape: boolean;
    blockScroll: boolean;
    rtl: boolean;
    closable: boolean;
    appendTo: any;
    key: string;
    autoZIndex: boolean;
    baseZIndex: number;
    transitionOptions: string;
    focusTrap: boolean;
    defaultFocus: string;
    visible: any;
    position: string;
    footer: any;
    contentViewChild: ElementRef;
    confirmation: Confirmation;
    _visible: boolean;
    maskVisible: boolean;
    documentEscapeListener: any;
    container: HTMLDivElement;
    wrapper: HTMLElement;
    contentContainer: HTMLDivElement;
    subscription: Subscription;
    preWidth: number;
    _position: string;
    transformOptions: any;
    confirmationOptions: Confirmation;
    constructor(el: ElementRef, renderer: Renderer2, confirmationService: ConfirmationService, zone: NgZone, cd: ChangeDetectorRef);
    option(name: string): any;
    onAnimationStart(event: AnimationEvent): void;
    onAnimationEnd(event: AnimationEvent): void;
    getElementToFocus(): any;
    appendContainer(): void;
    restoreAppend(): void;
    enableModality(): void;
    disableModality(): void;
    close(event: Event): void;
    hide(): void;
    moveOnTop(): void;
    getMaskClass(): {
        'ui-widget-overlay ui-dialog-mask': boolean;
        'ui-dialog-visible': boolean;
        'ui-dialog-mask-scrollblocker': boolean;
    };
    getPositionClass(): string;
    bindGlobalListeners(): void;
    unbindGlobalListeners(): void;
    onOverlayHide(): void;
    ngOnDestroy(): void;
    accept(): void;
    reject(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ConfirmDialog, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ConfirmDialog, "p-confirmDialog", never, { "acceptIcon": "acceptIcon"; "acceptLabel": "acceptLabel"; "acceptVisible": "acceptVisible"; "rejectIcon": "rejectIcon"; "rejectLabel": "rejectLabel"; "rejectVisible": "rejectVisible"; "closeOnEscape": "closeOnEscape"; "blockScroll": "blockScroll"; "closable": "closable"; "autoZIndex": "autoZIndex"; "baseZIndex": "baseZIndex"; "transitionOptions": "transitionOptions"; "focusTrap": "focusTrap"; "defaultFocus": "defaultFocus"; "visible": "visible"; "position": "position"; "header": "header"; "icon": "icon"; "message": "message"; "style": "style"; "styleClass": "styleClass"; "maskStyleClass": "maskStyleClass"; "acceptButtonStyleClass": "acceptButtonStyleClass"; "rejectButtonStyleClass": "rejectButtonStyleClass"; "rtl": "rtl"; "appendTo": "appendTo"; "key": "key"; }, {}, ["footer"], ["p-footer"]>;
}
export declare class ConfirmDialogModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<ConfirmDialogModule, [typeof ConfirmDialog], [typeof ɵngcc1.CommonModule, typeof ɵngcc2.ButtonModule], [typeof ConfirmDialog, typeof ɵngcc2.ButtonModule, typeof ɵngcc3.SharedModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<ConfirmDialogModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlybWRpYWxvZy5kLnRzIiwic291cmNlcyI6WyJjb25maXJtZGlhbG9nLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztBQUtBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBdUVBOzs7O0FBRUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBPbkRlc3Ryb3ksIFJlbmRlcmVyMiwgTmdab25lLCBDaGFuZ2VEZXRlY3RvclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQW5pbWF0aW9uRXZlbnQgfSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcbmltcG9ydCB7IENvbmZpcm1hdGlvbiB9IGZyb20gJ3ByaW1lbmcvYXBpJztcbmltcG9ydCB7IENvbmZpcm1hdGlvblNlcnZpY2UgfSBmcm9tICdwcmltZW5nL2FwaSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIENvbmZpcm1EaWFsb2cgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICAgIGVsOiBFbGVtZW50UmVmO1xuICAgIHJlbmRlcmVyOiBSZW5kZXJlcjI7XG4gICAgcHJpdmF0ZSBjb25maXJtYXRpb25TZXJ2aWNlO1xuICAgIHpvbmU6IE5nWm9uZTtcbiAgICBwcml2YXRlIGNkO1xuICAgIGhlYWRlcjogc3RyaW5nO1xuICAgIGljb246IHN0cmluZztcbiAgICBtZXNzYWdlOiBzdHJpbmc7XG4gICAgc3R5bGU6IGFueTtcbiAgICBzdHlsZUNsYXNzOiBzdHJpbmc7XG4gICAgbWFza1N0eWxlQ2xhc3M6IHN0cmluZztcbiAgICBhY2NlcHRJY29uOiBzdHJpbmc7XG4gICAgYWNjZXB0TGFiZWw6IHN0cmluZztcbiAgICBhY2NlcHRWaXNpYmxlOiBib29sZWFuO1xuICAgIHJlamVjdEljb246IHN0cmluZztcbiAgICByZWplY3RMYWJlbDogc3RyaW5nO1xuICAgIHJlamVjdFZpc2libGU6IGJvb2xlYW47XG4gICAgYWNjZXB0QnV0dG9uU3R5bGVDbGFzczogc3RyaW5nO1xuICAgIHJlamVjdEJ1dHRvblN0eWxlQ2xhc3M6IHN0cmluZztcbiAgICBjbG9zZU9uRXNjYXBlOiBib29sZWFuO1xuICAgIGJsb2NrU2Nyb2xsOiBib29sZWFuO1xuICAgIHJ0bDogYm9vbGVhbjtcbiAgICBjbG9zYWJsZTogYm9vbGVhbjtcbiAgICBhcHBlbmRUbzogYW55O1xuICAgIGtleTogc3RyaW5nO1xuICAgIGF1dG9aSW5kZXg6IGJvb2xlYW47XG4gICAgYmFzZVpJbmRleDogbnVtYmVyO1xuICAgIHRyYW5zaXRpb25PcHRpb25zOiBzdHJpbmc7XG4gICAgZm9jdXNUcmFwOiBib29sZWFuO1xuICAgIGRlZmF1bHRGb2N1czogc3RyaW5nO1xuICAgIHZpc2libGU6IGFueTtcbiAgICBwb3NpdGlvbjogc3RyaW5nO1xuICAgIGZvb3RlcjogYW55O1xuICAgIGNvbnRlbnRWaWV3Q2hpbGQ6IEVsZW1lbnRSZWY7XG4gICAgY29uZmlybWF0aW9uOiBDb25maXJtYXRpb247XG4gICAgX3Zpc2libGU6IGJvb2xlYW47XG4gICAgbWFza1Zpc2libGU6IGJvb2xlYW47XG4gICAgZG9jdW1lbnRFc2NhcGVMaXN0ZW5lcjogYW55O1xuICAgIGNvbnRhaW5lcjogSFRNTERpdkVsZW1lbnQ7XG4gICAgd3JhcHBlcjogSFRNTEVsZW1lbnQ7XG4gICAgY29udGVudENvbnRhaW5lcjogSFRNTERpdkVsZW1lbnQ7XG4gICAgc3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG4gICAgcHJlV2lkdGg6IG51bWJlcjtcbiAgICBfcG9zaXRpb246IHN0cmluZztcbiAgICB0cmFuc2Zvcm1PcHRpb25zOiBhbnk7XG4gICAgY29uZmlybWF0aW9uT3B0aW9uczogQ29uZmlybWF0aW9uO1xuICAgIGNvbnN0cnVjdG9yKGVsOiBFbGVtZW50UmVmLCByZW5kZXJlcjogUmVuZGVyZXIyLCBjb25maXJtYXRpb25TZXJ2aWNlOiBDb25maXJtYXRpb25TZXJ2aWNlLCB6b25lOiBOZ1pvbmUsIGNkOiBDaGFuZ2VEZXRlY3RvclJlZik7XG4gICAgb3B0aW9uKG5hbWU6IHN0cmluZyk6IGFueTtcbiAgICBvbkFuaW1hdGlvblN0YXJ0KGV2ZW50OiBBbmltYXRpb25FdmVudCk6IHZvaWQ7XG4gICAgb25BbmltYXRpb25FbmQoZXZlbnQ6IEFuaW1hdGlvbkV2ZW50KTogdm9pZDtcbiAgICBnZXRFbGVtZW50VG9Gb2N1cygpOiBhbnk7XG4gICAgYXBwZW5kQ29udGFpbmVyKCk6IHZvaWQ7XG4gICAgcmVzdG9yZUFwcGVuZCgpOiB2b2lkO1xuICAgIGVuYWJsZU1vZGFsaXR5KCk6IHZvaWQ7XG4gICAgZGlzYWJsZU1vZGFsaXR5KCk6IHZvaWQ7XG4gICAgY2xvc2UoZXZlbnQ6IEV2ZW50KTogdm9pZDtcbiAgICBoaWRlKCk6IHZvaWQ7XG4gICAgbW92ZU9uVG9wKCk6IHZvaWQ7XG4gICAgZ2V0TWFza0NsYXNzKCk6IHtcbiAgICAgICAgJ3VpLXdpZGdldC1vdmVybGF5IHVpLWRpYWxvZy1tYXNrJzogYm9vbGVhbjtcbiAgICAgICAgJ3VpLWRpYWxvZy12aXNpYmxlJzogYm9vbGVhbjtcbiAgICAgICAgJ3VpLWRpYWxvZy1tYXNrLXNjcm9sbGJsb2NrZXInOiBib29sZWFuO1xuICAgIH07XG4gICAgZ2V0UG9zaXRpb25DbGFzcygpOiBzdHJpbmc7XG4gICAgYmluZEdsb2JhbExpc3RlbmVycygpOiB2b2lkO1xuICAgIHVuYmluZEdsb2JhbExpc3RlbmVycygpOiB2b2lkO1xuICAgIG9uT3ZlcmxheUhpZGUoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIGFjY2VwdCgpOiB2b2lkO1xuICAgIHJlamVjdCgpOiB2b2lkO1xufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQ29uZmlybURpYWxvZ01vZHVsZSB7XG59XG4iXX0=