{"version":3,"file":"colorpicker.d.ts","sources":["colorpicker.d.ts"],"names":[],"mappingssourcesContent":["import { ElementRef, OnDestroy, EventEmitter, Renderer2, ChangeDetectorRef } from '@angular/core';\nimport { AnimationEvent } from '@angular/animations';\nimport { ControlValueAccessor } from '@angular/forms';\nexport declare const COLORPICKER_VALUE_ACCESSOR: any;\nexport declare class ColorPicker implements ControlValueAccessor, OnDestroy {\n    el: ElementRef;\n    renderer: Renderer2;\n    cd: ChangeDetectorRef;\n    style: any;\n    styleClass: string;\n    inline: boolean;\n    format: string;\n    appendTo: string;\n    disabled: boolean;\n    tabindex: string;\n    inputId: string;\n    autoZIndex: boolean;\n    baseZIndex: number;\n    showTransitionOptions: string;\n    hideTransitionOptions: string;\n    onChange: EventEmitter<any>;\n    containerViewChild: ElementRef;\n    inputViewChild: ElementRef;\n    value: any;\n    inputBgColor: string;\n    shown: boolean;\n    overlayVisible: boolean;\n    defaultColor: string;\n    onModelChange: Function;\n    onModelTouched: Function;\n    documentClickListener: Function;\n    documentResizeListener: any;\n    documentMousemoveListener: Function;\n    documentMouseupListener: Function;\n    documentHueMoveListener: Function;\n    scrollHandler: any;\n    selfClick: boolean;\n    colorDragging: boolean;\n    hueDragging: boolean;\n    overlay: HTMLDivElement;\n    colorSelectorViewChild: ElementRef;\n    colorHandleViewChild: ElementRef;\n    hueViewChild: ElementRef;\n    hueHandleViewChild: ElementRef;\n    constructor(el: ElementRef, renderer: Renderer2, cd: ChangeDetectorRef);\n    set colorSelector(element: ElementRef);\n    set colorHandle(element: ElementRef);\n    set hue(element: ElementRef);\n    set hueHandle(element: ElementRef);\n    onHueMousedown(event: MouseEvent): void;\n    pickHue(event: MouseEvent): void;\n    onColorMousedown(event: MouseEvent): void;\n    pickColor(event: MouseEvent): void;\n    getValueToUpdate(): any;\n    updateModel(): void;\n    writeValue(value: any): void;\n    updateColorSelector(): void;\n    updateUI(): void;\n    onInputFocus(): void;\n    show(): void;\n    onOverlayAnimationStart(event: AnimationEvent): void;\n    appendOverlay(): void;\n    restoreOverlayAppend(): void;\n    alignOverlay(): void;\n    hide(): void;\n    onInputClick(): void;\n    togglePanel(): void;\n    onInputKeydown(event: KeyboardEvent): void;\n    onPanelClick(): void;\n    registerOnChange(fn: Function): void;\n    registerOnTouched(fn: Function): void;\n    setDisabledState(val: boolean): void;\n    bindDocumentClickListener(): void;\n    unbindDocumentClickListener(): void;\n    bindDocumentMousemoveListener(): void;\n    unbindDocumentMousemoveListener(): void;\n    bindDocumentMouseupListener(): void;\n    unbindDocumentMouseupListener(): void;\n    bindDocumentResizeListener(): void;\n    unbindDocumentResizeListener(): void;\n    onWindowResize(): void;\n    bindScrollListener(): void;\n    unbindScrollListener(): void;\n    validateHSB(hsb: any): {\n        h: number;\n        s: number;\n        b: number;\n    };\n    validateRGB(rgb: any): {\n        r: number;\n        g: number;\n        b: number;\n    };\n    validateHEX(hex: any): any;\n    HEXtoRGB(hex: any): {\n        r: number;\n        g: number;\n        b: number;\n    };\n    HEXtoHSB(hex: any): {\n        h: number;\n        s: number;\n        b: number;\n    };\n    RGBtoHSB(rgb: any): {\n        h: number;\n        s: number;\n        b: number;\n    };\n    HSBtoRGB(hsb: any): {\n        r: number;\n        g: number;\n        b: number;\n    };\n    RGBtoHEX(rgb: any): string;\n    HSBtoHEX(hsb: any): string;\n    onOverlayHide(): void;\n    ngOnDestroy(): void;\n}\nexport declare class ColorPickerModule {\n}\n"]}