{"version":3,"sources":["../../node_modules/tslib/tslib.es6.js","ng://ngx-toastr/toastr/toast.directive.ts","ng://ngx-toastr/toastr/toastr-config.ts","ng://ngx-toastr/portal/portal.ts","ng://ngx-toastr/portal/dom-portal-host.ts","ng://ngx-toastr/overlay/overlay-container.ts","ng://ngx-toastr/overlay/overlay-ref.ts","ng://ngx-toastr/overlay/overlay.ts","ng://ngx-toastr/toastr/toast-injector.ts","ng://ngx-toastr/toastr/toastr.service.ts","ng://ngx-toastr/toastr/toast.component.ts","ng://ngx-toastr/toastr/toastr.module.ts","ng://ngx-toastr/toastr/toast-noanimation.component.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__assign","assign","t","s","i","n","arguments","length","prototype","call","apply","this","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__values","o","Symbol","iterator","m","next","value","done","TypeError","ToastContainerDirective","el","getContainerElement","nativeElement","ElementRef","Directive","selector","exportAs","ToastContainerModule","NgModule","declarations","exports","ToastPackage","toastId","config","message","title","toastType","toastRef","_this","_onTap","Subject","_onAction","afterClosed","subscribe","complete","triggerTap","tapToDismiss","onTap","asObservable","triggerAction","action","onAction","DefaultNoComponentGlobalConfig","maxOpened","autoDismiss","newestOnTop","preventDuplicates","countDuplicates","resetTimeoutOnDuplicate","iconClasses","error","info","success","warning","closeButton","disableTimeOut","timeOut","extendedTimeOut","enableHtml","progressBar","toastClass","positionClass","titleClass","messageClass","easing","easeTime","onActivateTick","progressAnimation","TOAST_CONFIG","InjectionToken","ComponentPortal","component","injector","attach","host","_attachedHost","detach","undefined","setAttachedHost","BasePortalHost","portal","_attachedPortal","attachComponentPortal","_disposeFn","setDisposeFn","fn","DomPortalHost","_super","_hostDomElement","_componentFactoryResolver","_appRef","__","constructor","create","__extends","componentRef","componentFactory","resolveComponentFactory","attachView","hostView","detachView","destroy","insertBefore","_getComponentRootNode","firstChild","appendChild","rootNodes","OverlayContainer","_document","ngOnDestroy","_containerElement","parentNode","removeChild","_createContainer","container","createElement","classList","add","body","Inject","args","DOCUMENT","Injectable","providedIn","OverlayRef","_portalHost","Overlay","_overlayContainer","_paneElements","Map","overlayContainer","_createOverlayRef","getPaneElement","get","set","_createPaneElement","pane","id","_createPortalHost","ComponentFactoryResolver","ApplicationRef","ToastRef","_overlayRef","duplicatesCount","_afterClosed","_activate","_manualClose","_resetTimeout","_countDuplicate","manualClose","manualClosed","timeoutReset","countDuplicate","close","isInactive","isStopped","activate","afterActivate","onDuplicate","resetTimeout","ToastInjector","_toastPackage","_parentInjector","token","notFoundValue","flags","ToastrService","overlay","_injector","sanitizer","ngZone","currentlyActive","toasts","index","toastrConfig","default","show","override","type","_preBuildNotification","applyConfig","clear","_b","_c","toast","remove","found","_findToast","activeToast","splice","findDuplicate","resetOnDuplicate","run","_buildNotification","toastComponent","Error","duplicate","previousToastMessage","keepInactive","overlayRef","sanitizedMessage","sanitize","SecurityContext","HTML","toastPackage","toastInjector","componentInstance","instance","ins","onShown","onHidden","setTimeout","push","Injector","DomSanitizer","NgZone","Toast","toastrService","width","toastClasses","state","params","options","originalTimeout","sub","activateToast","sub1","sub2","sub3","count","unsubscribe","clearInterval","intervalId","clearTimeout","timeout","outsideTimeout","hideTime","Date","getTime","outsideInterval","updateProgress","now","remaining","tapToast","stickAround","delayedHideToast","func","runOutsideAngular","runInsideAngular","setInterval","HostBinding","HostListener","Component","template","animations","trigger","style","opacity","transition","animate","preserveWhitespaces","DefaultGlobalConfig","ToastrModule","forRoot","ngModule","ToastrModule_1","providers","provide","useValue","imports","CommonModule","entryComponents","ToastrComponentlessModule","ToastNoAnimation","appRef","tick","DefaultNoAnimationsGlobalConfig","ToastNoAnimationModule","ToastNoAnimationModule_1"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import {\n  Directive,\n  ElementRef,\n  NgModule,\n} from '@angular/core';\n\n@Directive({\n  selector: '[toastContainer]',\n  exportAs: 'toastContainer',\n})\nexport class ToastContainerDirective {\n  constructor(private el: ElementRef) { }\n  getContainerElement(): HTMLElement {\n    return this.el.nativeElement;\n  }\n}\n\n@NgModule({\n  declarations: [ToastContainerDirective],\n  exports: [ToastContainerDirective],\n})\nexport class ToastContainerModule {}\n","import { InjectionToken } from '@angular/core';\n\nimport { Observable, Subject } from 'rxjs';\n\nimport { ComponentType } from '../portal/portal';\nimport { ToastRef } from './toast-injector';\n\nexport type ProgressAnimationType = 'increasing' | 'decreasing';\n\n/**\n * Configuration for an individual toast.\n */\nexport interface IndividualConfig {\n  /**\n   * disable both timeOut and extendedTimeOut\n   * default: false\n   */\n  disableTimeOut: boolean | 'timeOut' | 'extendedTimeOut';\n  /**\n   * toast time to live in milliseconds\n   * default: 5000\n   */\n  timeOut: number;\n  /**\n   * toast show close button\n   * default: false\n   */\n  closeButton: boolean;\n  /**\n   * time to close after a user hovers over toast\n   * default: 1000\n   */\n  extendedTimeOut: number;\n  /**\n   * show toast progress bar\n   * default: false\n   */\n  progressBar: boolean;\n\n  /**\n   * changes toast progress bar animation\n   * default: decreasing\n   */\n  progressAnimation: ProgressAnimationType;\n\n  /**\n   * render html in toast message (possibly unsafe)\n   * default: false\n   */\n  enableHtml: boolean;\n  /**\n   * css class on toast component\n   * default: ngx-toastr\n   */\n  toastClass: string;\n  /**\n   * css class on toast container\n   * default: toast-top-right\n   */\n  positionClass: string;\n  /**\n   * css class on toast title\n   * default: toast-title\n   */\n  titleClass: string;\n  /**\n   * css class on toast message\n   * default: toast-message\n   */\n  messageClass: string;\n  /**\n   * animation easing on toast\n   * default: ease-in\n   */\n  easing: string;\n  /**\n   * animation ease time on toast\n   * default: 300\n   */\n  easeTime: string | number;\n  /**\n   * clicking on toast dismisses it\n   * default: true\n   */\n  tapToDismiss: boolean;\n  /**\n   * Angular toast component to be shown\n   * default: Toast\n   */\n  toastComponent?: ComponentType<any>;\n  /**\n   * Helps show toast from a websocket or from event outside Angular\n   * default: false\n   */\n  onActivateTick: boolean;\n  /**\n   * New toast placement\n   * default: true\n   */\n  newestOnTop: boolean;\n}\n\nexport interface ToastrIconClasses {\n  error: string;\n  info: string;\n  success: string;\n  warning: string;\n}\n\n/**\n * Global Toast configuration\n * Includes all IndividualConfig\n */\nexport interface GlobalConfig extends IndividualConfig {\n  /**\n   * max toasts opened. Toasts will be queued\n   * Zero is unlimited\n   * default: 0\n   */\n  maxOpened: number;\n  /**\n   * dismiss current toast when max is reached\n   * default: false\n   */\n  autoDismiss: boolean;\n  iconClasses: Partial<ToastrIconClasses>;\n  /**\n   * block duplicate messages\n   * default: false\n   */\n  preventDuplicates: boolean;\n  /**\n   * display the number of duplicate messages\n   * default: false\n   */\n  countDuplicates: boolean;\n  /**\n   * Reset toast timeout when there's a duplicate (preventDuplicates needs to be set to true)\n   * default: false\n   */\n  resetTimeoutOnDuplicate: boolean;\n}\n\n/**\n * Everything a toast needs to launch\n */\nexport class ToastPackage {\n  private _onTap = new Subject<any>();\n  private _onAction = new Subject<any>();\n\n  constructor(\n    public toastId: number,\n    public config: IndividualConfig,\n    public message: string | null | undefined,\n    public title: string | undefined,\n    public toastType: string,\n    public toastRef: ToastRef<any>,\n  ) {\n    this.toastRef.afterClosed().subscribe(() => {\n      this._onAction.complete();\n      this._onTap.complete();\n    });\n  }\n\n  /** Fired on click */\n  triggerTap() {\n    this._onTap.next();\n    if (this.config.tapToDismiss) {\n      this._onTap.complete();\n    }\n  }\n\n  onTap(): Observable<any> {\n    return this._onTap.asObservable();\n  }\n\n  /** available for use in custom toast */\n  triggerAction(action?: any) {\n    this._onAction.next(action);\n  }\n\n  onAction(): Observable<any> {\n    return this._onAction.asObservable();\n  }\n}\n\n/* tslint:disable:no-empty-interface */\n/** @deprecated use GlobalConfig */\nexport interface GlobalToastrConfig extends GlobalConfig {}\n/** @deprecated use IndividualConfig */\nexport interface IndividualToastrConfig extends IndividualConfig {}\n/** @deprecated use IndividualConfig */\nexport interface ToastrConfig extends IndividualConfig {}\n\nexport const DefaultNoComponentGlobalConfig: GlobalConfig = {\n  maxOpened: 0,\n  autoDismiss: false,\n  newestOnTop: true,\n  preventDuplicates: false,\n  countDuplicates: false,\n  resetTimeoutOnDuplicate: false,\n  iconClasses: {\n    error: 'toast-error',\n    info: 'toast-info',\n    success: 'toast-success',\n    warning: 'toast-warning',\n  },\n\n  // Individual\n  closeButton: false,\n  disableTimeOut: false,\n  timeOut: 5000,\n  extendedTimeOut: 1000,\n  enableHtml: false,\n  progressBar: false,\n  toastClass: 'ngx-toastr',\n  positionClass: 'toast-top-right',\n  titleClass: 'toast-title',\n  messageClass: 'toast-message',\n  easing: 'ease-in',\n  easeTime: 300,\n  tapToDismiss: true,\n  onActivateTick: false,\n  progressAnimation: 'decreasing',\n};\n\nexport interface ToastToken {\n  default: GlobalConfig;\n  config: Partial<GlobalConfig>;\n}\n\nexport const TOAST_CONFIG = new InjectionToken<ToastToken>('ToastConfig');\n","import {\n  ComponentRef,\n  Injector,\n  ViewContainerRef\n} from '@angular/core';\n\nexport interface ComponentType<T> {\n  // tslint:disable-next-line:callable-types\n  new (...args: any[]): T;\n}\n\n\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nexport class ComponentPortal<T> {\n  private _attachedHost?: BasePortalHost;\n  /** The type of the component that will be instantiated for attachment. */\n  component: ComponentType<T>;\n\n  /**\n   * [Optional] Where the attached component should live in Angular's *logical* component tree.\n   * This is different from where the component *renders*, which is determined by the PortalHost.\n   * The origin necessary when the host is outside of the Angular application context.\n   */\n  viewContainerRef: ViewContainerRef;\n\n  /** Injector used for the instantiation of the component. */\n  injector: Injector;\n\n  constructor(component: ComponentType<T>, injector: Injector) {\n    this.component = component;\n    this.injector = injector;\n  }\n\n  /** Attach this portal to a host. */\n  attach(host: BasePortalHost, newestOnTop: boolean) {\n    this._attachedHost = host;\n    return host.attach(this, newestOnTop);\n  }\n\n  /** Detach this portal from its host */\n  detach() {\n    const host = this._attachedHost;\n    if (host) {\n      this._attachedHost = undefined;\n      return host.detach();\n    }\n  }\n\n  /** Whether this portal is attached to a host. */\n  get isAttached(): boolean {\n    return this._attachedHost != null;\n  }\n\n  /**\n   * Sets the PortalHost reference without performing `attach()`. This is used directly by\n   * the PortalHost when it is performing an `attach()` or `detach()`.\n   */\n  setAttachedHost(host?: BasePortalHost) {\n    this._attachedHost = host;\n  }\n}\n\n/**\n * Partial implementation of PortalHost that only deals with attaching a\n * ComponentPortal\n */\nexport abstract class BasePortalHost {\n  /** The portal currently attached to the host. */\n  private _attachedPortal?: ComponentPortal<any>;\n\n  /** A function that will permanently dispose this host. */\n  private _disposeFn?: () => void;\n\n  attach(portal: ComponentPortal<any>, newestOnTop: boolean) {\n    this._attachedPortal = portal;\n    return this.attachComponentPortal(portal, newestOnTop);\n  }\n\n  abstract attachComponentPortal<T>(portal: ComponentPortal<T>, newestOnTop: boolean): ComponentRef<T>;\n\n  detach() {\n    if (this._attachedPortal) {\n      this._attachedPortal.setAttachedHost();\n    }\n\n    this._attachedPortal = undefined;\n    if (this._disposeFn) {\n      this._disposeFn();\n      this._disposeFn = undefined;\n    }\n  }\n\n  setDisposeFn(fn: () => void) {\n    this._disposeFn = fn;\n  }\n}\n","import {\n  ApplicationRef,\n  ComponentFactoryResolver,\n  ComponentRef,\n  EmbeddedViewRef,\n} from '@angular/core';\nimport { BasePortalHost, ComponentPortal } from './portal';\n\n/**\n * A PortalHost for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n *\n * This is the only part of the portal core that directly touches the DOM.\n */\nexport class DomPortalHost extends BasePortalHost {\n  constructor(\n    private _hostDomElement: Element,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n  ) {\n    super();\n  }\n\n  /**\n   * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n   * @param portal Portal to be attached\n   */\n  attachComponentPortal<T>(\n    portal: ComponentPortal<T>,\n    newestOnTop: boolean,\n  ): ComponentRef<T> {\n    const componentFactory = this._componentFactoryResolver.resolveComponentFactory(\n      portal.component,\n    );\n    let componentRef: ComponentRef<T>;\n\n    // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n    // for the component (in terms of Angular's component tree, not rendering).\n    // When the ViewContainerRef is missing, we use the factory to create the component directly\n    // and then manually attach the ChangeDetector for that component to the application (which\n    // happens automatically when using a ViewContainer).\n    componentRef = componentFactory.create(portal.injector);\n\n    // When creating a component outside of a ViewContainer, we need to manually register\n    // its ChangeDetector with the application. This API is unfortunately not yet published\n    // in Angular core. The change detector must also be deregistered when the component\n    // is destroyed to prevent memory leaks.\n    this._appRef.attachView(componentRef.hostView);\n\n    this.setDisposeFn(() => {\n      this._appRef.detachView(componentRef.hostView);\n      componentRef.destroy();\n    });\n\n    // At this point the component has been instantiated, so we move it to the location in the DOM\n    // where we want it to be rendered.\n    if (newestOnTop) {\n      this._hostDomElement.insertBefore(\n        this._getComponentRootNode(componentRef),\n        this._hostDomElement.firstChild,\n      );\n    } else {\n      this._hostDomElement.appendChild(\n        this._getComponentRootNode(componentRef),\n      );\n    }\n\n    return componentRef;\n  }\n\n  /** Gets the root HTMLElement for an instantiated component. */\n  private _getComponentRootNode(componentRef: ComponentRef<any>): HTMLElement {\n    return (componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable, OnDestroy } from '@angular/core';\n\n/** Container inside which all toasts will render. */\n@Injectable({ providedIn: 'root' })\nexport class OverlayContainer implements OnDestroy {\n  protected _containerElement: HTMLElement;\n\n  constructor(@Inject(DOCUMENT) protected _document: any) {}\n\n  ngOnDestroy() {\n    if (this._containerElement && this._containerElement.parentNode) {\n      this._containerElement.parentNode.removeChild(this._containerElement);\n    }\n  }\n\n  /**\n   * This method returns the overlay container element. It will lazily\n   * create the element the first time  it is called to facilitate using\n   * the container in non-browser environments.\n   * @returns the container element\n   */\n  getContainerElement(): HTMLElement {\n    if (!this._containerElement) {\n      this._createContainer();\n    }\n    return this._containerElement;\n  }\n\n  /**\n   * Create the overlay container element, which is simply a div\n   * with the 'cdk-overlay-container' class on the document body.\n   */\n  protected _createContainer(): void {\n    const container = this._document.createElement('div');\n    container.classList.add('overlay-container');\n    this._document.body.appendChild(container);\n    this._containerElement = container;\n  }\n}\n","import { ComponentRef } from '@angular/core';\nimport { BasePortalHost, ComponentPortal } from '../portal/portal';\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nexport class OverlayRef {\n  constructor(private _portalHost: BasePortalHost) {}\n\n  attach(\n    portal: ComponentPortal<any>,\n    newestOnTop: boolean = true,\n  ): ComponentRef<any> {\n    return this._portalHost.attach(portal, newestOnTop);\n  }\n\n  /**\n   * Detaches an overlay from a portal.\n   * @returns Resolves when the overlay has been detached.\n   */\n  detach() {\n    return this._portalHost.detach();\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport {\n  ApplicationRef,\n  ComponentFactoryResolver,\n  Inject,\n  Injectable,\n} from '@angular/core';\n\nimport { DomPortalHost } from '../portal/dom-portal-host';\nimport { ToastContainerDirective } from '../toastr/toast.directive';\nimport { OverlayContainer } from './overlay-container';\nimport { OverlayRef } from './overlay-ref';\n\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\n */\n@Injectable({ providedIn: 'root' })\nexport class Overlay {\n  // Namespace panes by overlay container\n  private _paneElements: Map<\n    ToastContainerDirective,\n    { string?: HTMLElement }\n  > = new Map();\n\n  constructor(\n    private _overlayContainer: OverlayContainer,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    @Inject(DOCUMENT) private _document: any,\n  ) {}\n  /**\n   * Creates an overlay.\n   * @returns A reference to the created overlay.\n   */\n  create(\n    positionClass?: string,\n    overlayContainer?: ToastContainerDirective,\n  ): OverlayRef {\n    // get existing pane if possible\n    return this._createOverlayRef(\n      this.getPaneElement(positionClass, overlayContainer),\n    );\n  }\n\n  getPaneElement(\n    positionClass: string = '',\n    overlayContainer?: ToastContainerDirective,\n  ): HTMLElement {\n    if (!this._paneElements.get(overlayContainer)) {\n      this._paneElements.set(overlayContainer, {});\n    }\n\n    if (!this._paneElements.get(overlayContainer)[positionClass]) {\n      this._paneElements.get(overlayContainer)[positionClass] = this._createPaneElement(positionClass, overlayContainer);\n    }\n\n    return this._paneElements.get(overlayContainer)[positionClass];\n  }\n\n\n  /**\n   * Creates the DOM element for an overlay and appends it to the overlay container.\n   * @returns Newly-created pane element\n   */\n  private _createPaneElement(\n    positionClass: string,\n    overlayContainer?: ToastContainerDirective,\n  ): HTMLElement {\n    const pane = this._document.createElement('div');\n\n    pane.id = 'toast-container';\n    pane.classList.add(positionClass);\n    pane.classList.add('toast-container');\n\n    if (!overlayContainer) {\n      this._overlayContainer.getContainerElement().appendChild(pane);\n    } else {\n      overlayContainer.getContainerElement().appendChild(pane);\n    }\n\n    return pane;\n  }\n\n  /**\n   * Create a DomPortalHost into which the overlay content can be loaded.\n   * @param pane The DOM element to turn into a portal host.\n   * @returns A portal host for the given DOM element.\n   */\n  private _createPortalHost(pane: HTMLElement): DomPortalHost {\n    return new DomPortalHost(\n      pane,\n      this._componentFactoryResolver,\n      this._appRef,\n    );\n  }\n\n  /**\n   * Creates an OverlayRef for an overlay in the given DOM element.\n   * @param pane DOM element for the overlay\n   */\n  private _createOverlayRef(pane: HTMLElement): OverlayRef {\n    return new OverlayRef(this._createPortalHost(pane));\n  }\n}\n","import { Injector, InjectFlags } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { OverlayRef } from '../overlay/overlay-ref';\nimport { ToastPackage } from './toastr-config';\n\n/**\n * Reference to a toast opened via the Toastr service.\n */\nexport class ToastRef<T> {\n  /** The instance of component opened into the toast. */\n  componentInstance: T;\n\n  /** Count of duplicates of this toast */\n  private duplicatesCount = 0;\n\n  /** Subject for notifying the user that the toast has finished closing. */\n  private _afterClosed = new Subject<any>();\n  /** triggered when toast is activated */\n  private _activate = new Subject<any>();\n  /** notifies the toast that it should close before the timeout */\n  private _manualClose = new Subject<any>();\n  /** notifies the toast that it should reset the timeouts */\n  private _resetTimeout = new Subject<any>();\n  /** notifies the toast that it should count a duplicate toast */\n  private _countDuplicate = new Subject<number>();\n\n  constructor(private _overlayRef: OverlayRef) {}\n\n  manualClose() {\n    this._manualClose.next();\n    this._manualClose.complete();\n  }\n\n  manualClosed(): Observable<any> {\n    return this._manualClose.asObservable();\n  }\n\n  timeoutReset(): Observable<any> {\n    return this._resetTimeout.asObservable();\n  }\n\n  countDuplicate(): Observable<number> {\n    return this._countDuplicate.asObservable();\n  }\n\n  /**\n   * Close the toast.\n   */\n  close(): void {\n    this._overlayRef.detach();\n    this._afterClosed.next();\n    this._manualClose.next();\n    this._afterClosed.complete();\n    this._manualClose.complete();\n    this._activate.complete();\n    this._resetTimeout.complete();\n    this._countDuplicate.complete();\n  }\n\n  /** Gets an observable that is notified when the toast is finished closing. */\n  afterClosed(): Observable<any> {\n    return this._afterClosed.asObservable();\n  }\n\n  isInactive() {\n    return this._activate.isStopped;\n  }\n\n  activate() {\n    this._activate.next();\n    this._activate.complete();\n  }\n\n  /** Gets an observable that is notified when the toast has started opening. */\n  afterActivate(): Observable<any> {\n    return this._activate.asObservable();\n  }\n\n  /** Reset the toast timouts and count duplicates */\n  onDuplicate(resetTimeout: boolean, countDuplicate: boolean) {\n    if (resetTimeout) {\n      this._resetTimeout.next();\n    }\n    if (countDuplicate) {\n      this._countDuplicate.next(++this.duplicatesCount);\n    }\n  }\n}\n\n/** Custom injector type specifically for instantiating components with a toast. */\nexport class ToastInjector implements Injector {\n  constructor(\n    private _toastPackage: ToastPackage,\n    private _parentInjector: Injector\n  ) {}\n\n  get<T>(token: any, notFoundValue?: T, flags?: InjectFlags): T | ToastPackage {\n    if (token === ToastPackage) {\n      return this._toastPackage;\n    }\n    return this._parentInjector.get<T>(token, notFoundValue, flags);\n  }\n}\n","import {\n  ComponentRef,\n  Inject,\n  Injectable,\n  Injector,\n  NgZone,\n  SecurityContext\n} from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\n\nimport { Observable } from 'rxjs';\n\nimport { Overlay } from '../overlay/overlay';\nimport { ComponentPortal } from '../portal/portal';\nimport { ToastInjector, ToastRef } from './toast-injector';\nimport { ToastContainerDirective } from './toast.directive';\nimport { GlobalConfig, IndividualConfig, ToastPackage, ToastToken, TOAST_CONFIG } from './toastr-config';\n\nexport interface ActiveToast<C> {\n  /** Your Toast ID. Use this to close it individually */\n  toastId: number;\n  /** the message of your toast. Stored to prevent duplicates */\n  message: string;\n  /** a reference to the component see portal.ts */\n  portal: ComponentRef<C>;\n  /** a reference to your toast */\n  toastRef: ToastRef<C>;\n  /** triggered when toast is active */\n  onShown: Observable<any>;\n  /** triggered when toast is destroyed */\n  onHidden: Observable<any>;\n  /** triggered on toast click */\n  onTap: Observable<any>;\n  /** available for your use in custom toast */\n  onAction: Observable<any>;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ToastrService {\n  toastrConfig: GlobalConfig;\n  currentlyActive = 0;\n  toasts: ActiveToast<any>[] = [];\n  overlayContainer: ToastContainerDirective;\n  previousToastMessage: string | undefined;\n  private index = 0;\n\n  constructor(\n    @Inject(TOAST_CONFIG) token: ToastToken,\n    private overlay: Overlay,\n    private _injector: Injector,\n    private sanitizer: DomSanitizer,\n    private ngZone: NgZone\n  ) {\n    this.toastrConfig = {\n      ...token.default,\n      ...token.config,\n    };\n    if (token.config.iconClasses) {\n      this.toastrConfig.iconClasses = {\n        ...token.default.iconClasses,\n        ...token.config.iconClasses,\n      };\n    }\n  }\n  /** show toast */\n  show(\n    message?: string,\n    title?: string,\n    override: Partial<IndividualConfig> = {},\n    type = ''\n  ) {\n    return this._preBuildNotification(\n      type,\n      message,\n      title,\n      this.applyConfig(override)\n    );\n  }\n  /** show successful toast */\n  success(\n    message?: string,\n    title?: string,\n    override: Partial<IndividualConfig> = {}\n  ) {\n    const type = this.toastrConfig.iconClasses.success || '';\n    return this._preBuildNotification(\n      type,\n      message,\n      title,\n      this.applyConfig(override)\n    );\n  }\n  /** show error toast */\n  error(\n    message?: string,\n    title?: string,\n    override: Partial<IndividualConfig> = {}\n  ) {\n    const type = this.toastrConfig.iconClasses.error || '';\n    return this._preBuildNotification(\n      type,\n      message,\n      title,\n      this.applyConfig(override)\n    );\n  }\n  /** show info toast */\n  info(\n    message?: string,\n    title?: string,\n    override: Partial<IndividualConfig> = {}\n  ) {\n    const type = this.toastrConfig.iconClasses.info || '';\n    return this._preBuildNotification(\n      type,\n      message,\n      title,\n      this.applyConfig(override)\n    );\n  }\n  /** show warning toast */\n  warning(\n    message?: string,\n    title?: string,\n    override: Partial<IndividualConfig> = {}\n  ) {\n    const type = this.toastrConfig.iconClasses.warning || '';\n    return this._preBuildNotification(\n      type,\n      message,\n      title,\n      this.applyConfig(override)\n    );\n  }\n  /**\n   * Remove all or a single toast by id\n   */\n  clear(toastId?: number) {\n    // Call every toastRef manualClose function\n    for (const toast of this.toasts) {\n      if (toastId !== undefined) {\n        if (toast.toastId === toastId) {\n          toast.toastRef.manualClose();\n          return;\n        }\n      } else {\n        toast.toastRef.manualClose();\n      }\n    }\n  }\n  /**\n   * Remove and destroy a single toast by id\n   */\n  remove(toastId: number) {\n    const found = this._findToast(toastId);\n    if (!found) {\n      return false;\n    }\n    found.activeToast.toastRef.close();\n    this.toasts.splice(found.index, 1);\n    this.currentlyActive = this.currentlyActive - 1;\n    if (!this.toastrConfig.maxOpened || !this.toasts.length) {\n      return false;\n    }\n    if (\n      this.currentlyActive < this.toastrConfig.maxOpened &&\n      this.toasts[this.currentlyActive]\n    ) {\n      const p = this.toasts[this.currentlyActive].toastRef;\n      if (!p.isInactive()) {\n        this.currentlyActive = this.currentlyActive + 1;\n        p.activate();\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determines if toast message is already shown\n   */\n  findDuplicate(message: string, resetOnDuplicate: boolean, countDuplicates: boolean) {\n    for (const toast of this.toasts) {\n      if (toast.message === message) {\n        toast.toastRef.onDuplicate(resetOnDuplicate, countDuplicates);\n        return toast;\n      }\n    }\n    return null;\n  }\n\n  /** create a clone of global config and apply individual settings */\n  private applyConfig(override: Partial<IndividualConfig> = {}): GlobalConfig {\n    return { ...this.toastrConfig, ...override };\n  }\n\n  /**\n   * Find toast object by id\n   */\n  private _findToast(\n    toastId: number\n  ): { index: number; activeToast: ActiveToast<any> } | null {\n    for (let i = 0; i < this.toasts.length; i++) {\n      if (this.toasts[i].toastId === toastId) {\n        return { index: i, activeToast: this.toasts[i] };\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Determines the need to run inside angular's zone then builds the toast\n   */\n  private _preBuildNotification(\n    toastType: string,\n    message: string | undefined,\n    title: string | undefined,\n    config: GlobalConfig\n  ): ActiveToast<any> | null {\n    if (config.onActivateTick) {\n      return this.ngZone.run(() =>\n        this._buildNotification(toastType, message, title, config)\n      );\n    }\n    return this._buildNotification(toastType, message, title, config);\n  }\n\n  /**\n   * Creates and attaches toast data to component\n   * returns the active toast, or in case preventDuplicates is enabled the original/non-duplicate active toast.\n   */\n  private _buildNotification(\n    toastType: string,\n    message: string | undefined,\n    title: string | undefined,\n    config: GlobalConfig\n  ): ActiveToast<any> | null {\n    if (!config.toastComponent) {\n      throw new Error('toastComponent required');\n    }\n    // max opened and auto dismiss = true\n    // if timeout = 0 resetting it would result in setting this.hideTime = Date.now(). Hence, we only want to reset timeout if there is\n    // a timeout at all\n    const duplicate = this.findDuplicate(\n      message,\n      this.toastrConfig.resetTimeoutOnDuplicate && config.timeOut > 0,\n      this.toastrConfig.countDuplicates\n    );\n    if (message && this.toastrConfig.preventDuplicates && duplicate !== null) {\n      return duplicate;\n    }\n\n    this.previousToastMessage = message;\n    let keepInactive = false;\n    if (\n      this.toastrConfig.maxOpened &&\n      this.currentlyActive >= this.toastrConfig.maxOpened\n    ) {\n      keepInactive = true;\n      if (this.toastrConfig.autoDismiss) {\n        this.clear(this.toasts[0].toastId);\n      }\n    }\n\n    const overlayRef = this.overlay.create(\n      config.positionClass,\n      this.overlayContainer\n    );\n    this.index = this.index + 1;\n    let sanitizedMessage: string | undefined | null = message;\n    if (message && config.enableHtml) {\n      sanitizedMessage = this.sanitizer.sanitize(SecurityContext.HTML, message);\n    }\n\n    const toastRef = new ToastRef(overlayRef);\n    const toastPackage = new ToastPackage(\n      this.index,\n      config,\n      sanitizedMessage,\n      title,\n      toastType,\n      toastRef\n    );\n    const toastInjector = new ToastInjector(toastPackage, this._injector);\n    const component = new ComponentPortal(config.toastComponent, toastInjector);\n    const portal = overlayRef.attach(component, this.toastrConfig.newestOnTop);\n    toastRef.componentInstance = portal.instance;\n    const ins: ActiveToast<any> = {\n      toastId: this.index,\n      message: message || '',\n      toastRef,\n      onShown: toastRef.afterActivate(),\n      onHidden: toastRef.afterClosed(),\n      onTap: toastPackage.onTap(),\n      onAction: toastPackage.onAction(),\n      portal\n    };\n\n    if (!keepInactive) {\n      this.currentlyActive = this.currentlyActive + 1;\n      setTimeout(() => {\n        ins.toastRef.activate();\n      });\n    }\n\n    this.toasts.push(ins);\n    return ins;\n  }\n}\n","import {\n  animate,\n  state,\n  style,\n  transition,\n  trigger\n} from '@angular/animations';\nimport {\n  Component,\n  HostBinding,\n  HostListener,\n  NgZone,\n  OnDestroy\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { IndividualConfig, ToastPackage } from './toastr-config';\nimport { ToastrService } from './toastr.service';\n\n@Component({\n  selector: '[toast-component]',\n  template: `\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" class=\"toast-close-button\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n    {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n  </div>\n  <div *ngIf=\"message && options.enableHtml\" role=\"alertdialog\" aria-live=\"polite\"\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\n  </div>\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alertdialog\" aria-live=\"polite\"\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n    {{ message }}\n  </div>\n  <div *ngIf=\"options.progressBar\">\n    <div class=\"toast-progress\" [style.width]=\"width + '%'\"></div>\n  </div>\n  `,\n  animations: [\n    trigger('flyInOut', [\n      state('inactive', style({ opacity: 0 })),\n      state('active', style({ opacity: 1 })),\n      state('removed', style({ opacity: 0 })),\n      transition(\n        'inactive => active',\n        animate('{{ easeTime }}ms {{ easing }}')\n      ),\n      transition(\n        'active => removed',\n        animate('{{ easeTime }}ms {{ easing }}')\n      )\n    ])\n  ],\n  preserveWhitespaces: false\n})\nexport class Toast implements OnDestroy {\n  message?: string | null;\n  title?: string;\n  options: IndividualConfig;\n  duplicatesCount: number;\n  originalTimeout: number;\n  /** width of progress bar */\n  width = -1;\n  /** a combination of toast type and options.toastClass */\n  @HostBinding('class') toastClasses = '';\n  /** controls animation */\n  @HostBinding('@flyInOut')\n  state = {\n    value: 'inactive',\n    params: {\n      easeTime: this.toastPackage.config.easeTime,\n      easing: 'ease-in'\n    }\n  };\n\n  /** hides component when waiting to be displayed */\n  @HostBinding('style.display')\n  get displayStyle() {\n    if (this.state.value === 'inactive') {\n      return 'none';\n    }\n  }\n\n  private timeout: any;\n  private intervalId: any;\n  private hideTime: number;\n  private sub: Subscription;\n  private sub1: Subscription;\n  private sub2: Subscription;\n  private sub3: Subscription;\n\n  constructor(\n    protected toastrService: ToastrService,\n    public toastPackage: ToastPackage,\n    protected ngZone?: NgZone\n  ) {\n    this.message = toastPackage.message;\n    this.title = toastPackage.title;\n    this.options = toastPackage.config;\n    this.originalTimeout = toastPackage.config.timeOut;\n    this.toastClasses = `${toastPackage.toastType} ${\n      toastPackage.config.toastClass\n    }`;\n    this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n      this.activateToast();\n    });\n    this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n      this.remove();\n    });\n    this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(() => {\n      this.resetTimeout();\n    });\n    this.sub3 = toastPackage.toastRef.countDuplicate().subscribe(count => {\n      this.duplicatesCount = count;\n    });\n  }\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n    this.sub1.unsubscribe();\n    this.sub2.unsubscribe();\n    this.sub3.unsubscribe();\n    clearInterval(this.intervalId);\n    clearTimeout(this.timeout);\n  }\n  /**\n   * activates toast and sets timeout\n   */\n  activateToast() {\n    this.state = { ...this.state, value: 'active' };\n    if (!(this.options.disableTimeOut === true || this.options.disableTimeOut === 'timeOut') && this.options.timeOut) {\n      this.outsideTimeout(() => this.remove(), this.options.timeOut);\n      this.hideTime = new Date().getTime() + this.options.timeOut;\n      if (this.options.progressBar) {\n        this.outsideInterval(() => this.updateProgress(), 10);\n      }\n    }\n  }\n  /**\n   * updates progress bar width\n   */\n  updateProgress() {\n    if (this.width === 0 || this.width === 100 || !this.options.timeOut) {\n      return;\n    }\n    const now = new Date().getTime();\n    const remaining = this.hideTime - now;\n    this.width = (remaining / this.options.timeOut) * 100;\n    if (this.options.progressAnimation === 'increasing') {\n      this.width = 100 - this.width;\n    }\n    if (this.width <= 0) {\n      this.width = 0;\n    }\n    if (this.width >= 100) {\n      this.width = 100;\n    }\n  }\n\n  resetTimeout() {\n    clearTimeout(this.timeout);\n    clearInterval(this.intervalId);\n    this.state = { ...this.state, value: 'active' };\n\n    this.outsideTimeout(() => this.remove(), this.originalTimeout);\n    this.options.timeOut = this.originalTimeout;\n    this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n    this.width = -1;\n    if (this.options.progressBar) {\n      this.outsideInterval(() => this.updateProgress(), 10);\n    }\n  }\n\n  /**\n   * tells toastrService to remove this toast after animation time\n   */\n  remove() {\n    if (this.state.value === 'removed') {\n      return;\n    }\n    clearTimeout(this.timeout);\n    this.state = { ...this.state, value: 'removed' };\n    this.outsideTimeout(\n      () => this.toastrService.remove(this.toastPackage.toastId),\n      +this.toastPackage.config.easeTime\n    );\n  }\n  @HostListener('click')\n  tapToast() {\n    if (this.state.value === 'removed') {\n      return;\n    }\n    this.toastPackage.triggerTap();\n    if (this.options.tapToDismiss) {\n      this.remove();\n    }\n  }\n  @HostListener('mouseenter')\n  stickAround() {\n    if (this.state.value === 'removed') {\n      return;\n    }\n    clearTimeout(this.timeout);\n    this.options.timeOut = 0;\n    this.hideTime = 0;\n\n    // disable progressBar\n    clearInterval(this.intervalId);\n    this.width = 0;\n  }\n  @HostListener('mouseleave')\n  delayedHideToast() {\n    if (\n      (this.options.disableTimeOut === true || this.options.disableTimeOut === 'extendedTimeOut') ||\n      this.options.extendedTimeOut === 0 ||\n      this.state.value === 'removed'\n    ) {\n      return;\n    }\n    this.outsideTimeout(() => this.remove(), this.options.extendedTimeOut);\n    this.options.timeOut = this.options.extendedTimeOut;\n    this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n    this.width = -1;\n    if (this.options.progressBar) {\n      this.outsideInterval(() => this.updateProgress(), 10);\n    }\n  }\n\n  outsideTimeout(func: () => any, timeout: number) {\n    if (this.ngZone) {\n      this.ngZone.runOutsideAngular(\n        () =>\n          (this.timeout = setTimeout(\n            () => this.runInsideAngular(func),\n            timeout\n          ))\n      );\n    } else {\n      this.timeout = setTimeout(() => func(), timeout);\n    }\n  }\n\n  outsideInterval(func: () => any, timeout: number) {\n    if (this.ngZone) {\n      this.ngZone.runOutsideAngular(\n        () =>\n          (this.intervalId = setInterval(\n            () => this.runInsideAngular(func),\n            timeout\n          ))\n      );\n    } else {\n      this.intervalId = setInterval(() => func(), timeout);\n    }\n  }\n\n  private runInsideAngular(func: () => any) {\n    if (this.ngZone) {\n      this.ngZone.run(() => func());\n    } else {\n      func();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { Toast } from './toast.component';\nimport {\n  DefaultNoComponentGlobalConfig,\n  GlobalConfig,\n  TOAST_CONFIG,\n} from './toastr-config';\n\nexport const DefaultGlobalConfig: GlobalConfig = {\n  ...DefaultNoComponentGlobalConfig,\n  toastComponent: Toast,\n};\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [Toast],\n  exports: [Toast],\n  entryComponents: [Toast],\n})\nexport class ToastrModule {\n  static forRoot(config: Partial<GlobalConfig> = {}): ModuleWithProviders<ToastrModule> {\n    return {\n      ngModule: ToastrModule,\n      providers: [\n        {\n          provide: TOAST_CONFIG,\n          useValue: {\n            default: DefaultGlobalConfig,\n            config,\n          },\n        },\n      ],\n    };\n  }\n}\n\n@NgModule({\n  imports: [CommonModule],\n})\nexport class ToastrComponentlessModule {\n  static forRoot(config: Partial<GlobalConfig> = {}): ModuleWithProviders<ToastrModule> {\n    return {\n      ngModule: ToastrModule,\n      providers: [\n        {\n          provide: TOAST_CONFIG,\n          useValue: {\n            default: DefaultNoComponentGlobalConfig,\n            config,\n          },\n        },\n      ],\n    };\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders } from '@angular/core';\nimport {\n  ApplicationRef,\n  Component,\n  HostBinding,\n  HostListener,\n  NgModule,\n  OnDestroy,\n} from '@angular/core';\n\nimport { Subscription } from 'rxjs';\n\nimport {\n  DefaultNoComponentGlobalConfig,\n  GlobalConfig,\n  IndividualConfig,\n  ToastPackage,\n  TOAST_CONFIG,\n} from './toastr-config';\nimport { ToastrService } from './toastr.service';\n\n@Component({\n  selector: '[toast-component]',\n  template: `\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" class=\"toast-close-button\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n    {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n  </div>\n  <div *ngIf=\"message && options.enableHtml\" role=\"alert\" aria-live=\"polite\"\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\n  </div>\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alert\" aria-live=\"polite\"\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n    {{ message }}\n  </div>\n  <div *ngIf=\"options.progressBar\">\n    <div class=\"toast-progress\" [style.width]=\"width + '%'\"></div>\n  </div>\n  `,\n})\nexport class ToastNoAnimation implements OnDestroy {\n  message?: string | null;\n  title?: string;\n  options: IndividualConfig;\n  duplicatesCount: number;\n  originalTimeout: number;\n  /** width of progress bar */\n  width = -1;\n  /** a combination of toast type and options.toastClass */\n  @HostBinding('class') toastClasses = '';\n\n  /** hides component when waiting to be displayed */\n  @HostBinding('style.display')\n  get displayStyle() {\n    if (this.state === 'inactive') {\n      return 'none';\n    }\n  }\n\n  /** controls animation */\n  state = 'inactive';\n  private timeout: any;\n  private intervalId: any;\n  private hideTime: number;\n  private sub: Subscription;\n  private sub1: Subscription;\n  private sub2: Subscription;\n  private sub3: Subscription;\n\n  constructor(\n    protected toastrService: ToastrService,\n    public toastPackage: ToastPackage,\n    protected appRef: ApplicationRef,\n  ) {\n    this.message = toastPackage.message;\n    this.title = toastPackage.title;\n    this.options = toastPackage.config;\n    this.originalTimeout = toastPackage.config.timeOut;\n    this.toastClasses = `${toastPackage.toastType} ${\n      toastPackage.config.toastClass\n    }`;\n    this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n      this.activateToast();\n    });\n    this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n      this.remove();\n    });\n    this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(() => {\n      this.resetTimeout();\n    });\n    this.sub3 = toastPackage.toastRef.countDuplicate().subscribe(count => {\n      this.duplicatesCount = count;\n    });\n  }\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n    this.sub1.unsubscribe();\n    this.sub2.unsubscribe();\n    this.sub3.unsubscribe();\n    clearInterval(this.intervalId);\n    clearTimeout(this.timeout);\n  }\n  /**\n   * activates toast and sets timeout\n   */\n  activateToast() {\n    this.state = 'active';\n    if (!(this.options.disableTimeOut === true || this.options.disableTimeOut === 'timeOut') && this.options.timeOut) {\n      this.timeout = setTimeout(() => {\n        this.remove();\n      }, this.options.timeOut);\n      this.hideTime = new Date().getTime() + this.options.timeOut;\n      if (this.options.progressBar) {\n        this.intervalId = setInterval(() => this.updateProgress(), 10);\n      }\n    }\n    if (this.options.onActivateTick) {\n      this.appRef.tick();\n    }\n  }\n  /**\n   * updates progress bar width\n   */\n  updateProgress() {\n    if (this.width === 0 || this.width === 100 || !this.options.timeOut) {\n      return;\n    }\n    const now = new Date().getTime();\n    const remaining = this.hideTime - now;\n    this.width = (remaining / this.options.timeOut) * 100;\n    if (this.options.progressAnimation === 'increasing') {\n      this.width = 100 - this.width;\n    }\n    if (this.width <= 0) {\n      this.width = 0;\n    }\n    if (this.width >= 100) {\n      this.width = 100;\n    }\n  }\n\n  resetTimeout() {\n    clearTimeout(this.timeout);\n    clearInterval(this.intervalId);\n    this.state = 'active';\n\n    this.options.timeOut = this.originalTimeout;\n    this.timeout = setTimeout(() => this.remove(), this.originalTimeout);\n    this.hideTime = new Date().getTime() + (this.originalTimeout || 0);\n    this.width = -1;\n    if (this.options.progressBar) {\n      this.intervalId = setInterval(() => this.updateProgress(), 10);\n    }\n  }\n\n  /**\n   * tells toastrService to remove this toast after animation time\n   */\n  remove() {\n    if (this.state === 'removed') {\n      return;\n    }\n    clearTimeout(this.timeout);\n    this.state = 'removed';\n    this.timeout = setTimeout(() =>\n      this.toastrService.remove(this.toastPackage.toastId),\n    );\n  }\n  @HostListener('click')\n  tapToast() {\n    if (this.state === 'removed') {\n      return;\n    }\n    this.toastPackage.triggerTap();\n    if (this.options.tapToDismiss) {\n      this.remove();\n    }\n  }\n  @HostListener('mouseenter')\n  stickAround() {\n    if (this.state === 'removed') {\n      return;\n    }\n    clearTimeout(this.timeout);\n    this.options.timeOut = 0;\n    this.hideTime = 0;\n\n    // disable progressBar\n    clearInterval(this.intervalId);\n    this.width = 0;\n  }\n  @HostListener('mouseleave')\n  delayedHideToast() {\n    if (\n      (this.options.disableTimeOut === true || this.options.disableTimeOut === 'extendedTimeOut') ||\n      this.options.extendedTimeOut === 0 ||\n      this.state === 'removed'\n    ) {\n      return;\n    }\n    this.timeout = setTimeout(\n      () => this.remove(),\n      this.options.extendedTimeOut,\n    );\n    this.options.timeOut = this.options.extendedTimeOut;\n    this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n    this.width = -1;\n    if (this.options.progressBar) {\n      this.intervalId = setInterval(() => this.updateProgress(), 10);\n    }\n  }\n}\n\nexport const DefaultNoAnimationsGlobalConfig: GlobalConfig = {\n  ...DefaultNoComponentGlobalConfig,\n  toastComponent: ToastNoAnimation,\n};\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [ToastNoAnimation],\n  exports: [ToastNoAnimation],\n  entryComponents: [ToastNoAnimation],\n})\nexport class ToastNoAnimationModule {\n  static forRoot(config: Partial<GlobalConfig> = {}): ModuleWithProviders<ToastNoAnimationModule> {\n    return {\n      ngModule: ToastNoAnimationModule,\n      providers: [\n        {\n          provide: TOAST_CONFIG,\n          useValue: {\n            default: DefaultNoAnimationsGlobalConfig,\n            config,\n          },\n        },\n      ],\n    };\n  }\n}\n"]}