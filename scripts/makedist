#! /bin/bash
#
# makedist:  build the package and make the distribution
#
set -e
prog=`basename $0`
execdir=`dirname $0`
[ "$execdir" = "" -o "$execdir" = "." ] && execdir=$PWD
PACKAGE_DIR=`(cd $execdir/.. > /dev/null 2>&1; pwd)`
DIST_DIR=$PACKAGE_DIR/dist
builddir=$PACKAGE_DIR/dist

# Update this list with the names of the individual component names
# 
DISTNAMES="sdp pdr-lps"

# handle command line options
build_dist=
while [ "$1" != "" ]; do 
  case "$1" in
    --dist-dir=*)
        DIST_DIR=`echo $1 | sed -e 's/[^=]*=//'`
        ;;
    --dist-dir)
        shift
        DIST_DIR=$1
        ;;
    --source-dir=*|--dir=*)
        PACKAGE_DIR=`echo $1 | sed -e 's/[^=]*=//'`
        ;;
    -d|--dir|--source-dir)
        shift
        PACKAGE_DIR=$1
        ;;
    --cache-dir=*)
        CACHE_DIR=`echo $1 | sed -e 's/[^=]*=//'`
        ;;
    -c|--cache-dir)
        shift
        CACHE_DIR=$1
        ;;
    -*)
        echo "$prog: unsupported option:" $1
        false
        ;;
    *)
        (echo :${DISTNAMES}: | sed -e 's/ /:/g' | grep -qs :${1}:) || {
            echo "${prog}: ${1}: unrecognized distribution name"
            echo "${prog}: recognized names:" $DISTNAMES
            false
        }
        build_dist="$build_dist $1"
        ;;
  esac
  shift
done
[ -n "$build_dist" ] || build_dist=$DISTNAMES

true ${DIST_DIR:=$SOURCE_DIR/dist}
DIST_DIR=`realpath $DIST_DIR`
mkdir -p $DIST_DIR $builddir
cd $PACKAGE_DIR

# Use a CACHE_DIR to set up a share node_modules directory.  When building
# many different versions of the software, this can speed up the builds by
# not requiring the software to be downloaded every time.
#
[ -z "$CACHE_DIR" ] || {
    CACHE_DIR=`realpath $CACHE_DIR`
    if [ -e "node_modules" ]; then
        if [ -L "node_modules" ]; then
            { sharednmd=`readlink node_modules` && \
              sharednmd=`realpath $sharednmd`; } || true
            [ -n "$sharednmd" -a "$sharednmd" == "$CACHE_DIR/node_modules" ] || {
                echo ${prog}: node_modules already "established;" \
                     "ignoring --cache-dir"
            }
        else
            echo ${prog}: node_modules already "established;" \
                 "ignoring --cache-dir"
        fi
    else
        # make ./node_modules a link to the shared one.
        mkdir -p $CACHE_DIR/node_modules
        ln -s $CACHE_DIR/node_modules node_modules
    fi
}

# set the current version.  This will inject the version into the code, if 
# needed.
#
echo '+' $execdir/setversion.sh
$execdir/setversion.sh
[ -n "$PACKAGE_NAME" ] || PACKAGE_NAME=`cat VERSION | awk '{print $1}'`
version=`cat VERSION | awk '{print $2}'`
vers4fn=`echo $version | sed -re 's#[/\s]+#_#g'`

# install required modules
npmvers=`npm --version`
echo '+' npm install
npm $npmpfx install

for dist in $build_dist; do
    distname="${dist}-$vers4fn"
    angproj=$dist
    [ "$angproj" != "pdr-lps" ] || angproj=pdr

    echo '#########################'
    echo '#'
    echo "# Building $distname"...
    echo '#'
    echo '#########################'
 
    # build the component
    echo '+' "npm run build.prod.aot -- --app $angproj"
    npm run build.prod.aot -- --app $angproj

    # create the dependency file
    if [ -f "$PACKAGE_DIR/package-lock.json" ]; then
        echo '+' $execdir/record_deps.py $dist $version package-lock.json \
                 $npmvers \> $DIST_DIR/${distname}_dep.json
        $execdir/record_deps.py $dist $version package-lock.json $npmvers \
                                > $DIST_DIR/${distname}_dep.json
    else
        echo ${prog}: WARNING: Unable to create dependency file for ${dist}: \
             package-lock.json not found
    fi

    # create the distribution file
    echo '+' '(cd' $builddir/prod '&&' \
             "zip -qr $DIST_DIR/${distname}.zip *)"
    (cd $builddir/prod && zip -qr $DIST_DIR/${distname}.zip *)

done

